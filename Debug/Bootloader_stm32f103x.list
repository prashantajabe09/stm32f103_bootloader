
Bootloader_stm32f103x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000281c  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800294c  0800294c  0000394c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029cc  080029cc  00004114  2**0
                  CONTENTS
  4 .ARM          00000000  080029cc  080029cc  00004114  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029cc  080029cc  00004114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029cc  080029cc  000039cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080029d0  080029d0  000039d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000114  20000000  080029d4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000114  08002ae8  00004114  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  08002ae8  00004418  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004114  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002edf  00000000  00000000  0000413d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000de7  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000320  00000000  00000000  00007e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000235  00000000  00000000  00008128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002059  00000000  00000000  0000835d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000034d3  00000000  00000000  0000a3b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008c06  00000000  00000000  0000d889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0001648f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012fc  00000000  00000000  000164d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000177d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000114 	.word	0x20000114
 800014c:	00000000 	.word	0x00000000
 8000150:	08002934 	.word	0x08002934

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000118 	.word	0x20000118
 800016c:	08002934 	.word	0x08002934

08000170 <__aeabi_fmul>:
 8000170:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000174:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000178:	bf1e      	ittt	ne
 800017a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800017e:	ea92 0f0c 	teqne	r2, ip
 8000182:	ea93 0f0c 	teqne	r3, ip
 8000186:	d06f      	beq.n	8000268 <__aeabi_fmul+0xf8>
 8000188:	441a      	add	r2, r3
 800018a:	ea80 0c01 	eor.w	ip, r0, r1
 800018e:	0240      	lsls	r0, r0, #9
 8000190:	bf18      	it	ne
 8000192:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000196:	d01e      	beq.n	80001d6 <__aeabi_fmul+0x66>
 8000198:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800019c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001a0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001a4:	fba0 3101 	umull	r3, r1, r0, r1
 80001a8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80001ac:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001b0:	bf3e      	ittt	cc
 80001b2:	0049      	lslcc	r1, r1, #1
 80001b4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001b8:	005b      	lslcc	r3, r3, #1
 80001ba:	ea40 0001 	orr.w	r0, r0, r1
 80001be:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001c2:	2afd      	cmp	r2, #253	@ 0xfd
 80001c4:	d81d      	bhi.n	8000202 <__aeabi_fmul+0x92>
 80001c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ce:	bf08      	it	eq
 80001d0:	f020 0001 	biceq.w	r0, r0, #1
 80001d4:	4770      	bx	lr
 80001d6:	f090 0f00 	teq	r0, #0
 80001da:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001de:	bf08      	it	eq
 80001e0:	0249      	lsleq	r1, r1, #9
 80001e2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001e6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ea:	3a7f      	subs	r2, #127	@ 0x7f
 80001ec:	bfc2      	ittt	gt
 80001ee:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001f2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001f6:	4770      	bxgt	lr
 80001f8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001fc:	f04f 0300 	mov.w	r3, #0
 8000200:	3a01      	subs	r2, #1
 8000202:	dc5d      	bgt.n	80002c0 <__aeabi_fmul+0x150>
 8000204:	f112 0f19 	cmn.w	r2, #25
 8000208:	bfdc      	itt	le
 800020a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800020e:	4770      	bxle	lr
 8000210:	f1c2 0200 	rsb	r2, r2, #0
 8000214:	0041      	lsls	r1, r0, #1
 8000216:	fa21 f102 	lsr.w	r1, r1, r2
 800021a:	f1c2 0220 	rsb	r2, r2, #32
 800021e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000222:	ea5f 0031 	movs.w	r0, r1, rrx
 8000226:	f140 0000 	adc.w	r0, r0, #0
 800022a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800022e:	bf08      	it	eq
 8000230:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000234:	4770      	bx	lr
 8000236:	f092 0f00 	teq	r2, #0
 800023a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800023e:	bf02      	ittt	eq
 8000240:	0040      	lsleq	r0, r0, #1
 8000242:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000246:	3a01      	subeq	r2, #1
 8000248:	d0f9      	beq.n	800023e <__aeabi_fmul+0xce>
 800024a:	ea40 000c 	orr.w	r0, r0, ip
 800024e:	f093 0f00 	teq	r3, #0
 8000252:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000256:	bf02      	ittt	eq
 8000258:	0049      	lsleq	r1, r1, #1
 800025a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800025e:	3b01      	subeq	r3, #1
 8000260:	d0f9      	beq.n	8000256 <__aeabi_fmul+0xe6>
 8000262:	ea41 010c 	orr.w	r1, r1, ip
 8000266:	e78f      	b.n	8000188 <__aeabi_fmul+0x18>
 8000268:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800026c:	ea92 0f0c 	teq	r2, ip
 8000270:	bf18      	it	ne
 8000272:	ea93 0f0c 	teqne	r3, ip
 8000276:	d00a      	beq.n	800028e <__aeabi_fmul+0x11e>
 8000278:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800027c:	bf18      	it	ne
 800027e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000282:	d1d8      	bne.n	8000236 <__aeabi_fmul+0xc6>
 8000284:	ea80 0001 	eor.w	r0, r0, r1
 8000288:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f090 0f00 	teq	r0, #0
 8000292:	bf17      	itett	ne
 8000294:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000298:	4608      	moveq	r0, r1
 800029a:	f091 0f00 	teqne	r1, #0
 800029e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80002a2:	d014      	beq.n	80002ce <__aeabi_fmul+0x15e>
 80002a4:	ea92 0f0c 	teq	r2, ip
 80002a8:	d101      	bne.n	80002ae <__aeabi_fmul+0x13e>
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	d10f      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002ae:	ea93 0f0c 	teq	r3, ip
 80002b2:	d103      	bne.n	80002bc <__aeabi_fmul+0x14c>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	bf18      	it	ne
 80002b8:	4608      	movne	r0, r1
 80002ba:	d108      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002bc:	ea80 0001 	eor.w	r0, r0, r1
 80002c0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002c4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002cc:	4770      	bx	lr
 80002ce:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002d2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002d6:	4770      	bx	lr

080002d8 <__aeabi_drsub>:
 80002d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002dc:	e002      	b.n	80002e4 <__adddf3>
 80002de:	bf00      	nop

080002e0 <__aeabi_dsub>:
 80002e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002e4 <__adddf3>:
 80002e4:	b530      	push	{r4, r5, lr}
 80002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ee:	ea94 0f05 	teq	r4, r5
 80002f2:	bf08      	it	eq
 80002f4:	ea90 0f02 	teqeq	r0, r2
 80002f8:	bf1f      	itttt	ne
 80002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030a:	f000 80e2 	beq.w	80004d2 <__adddf3+0x1ee>
 800030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000316:	bfb8      	it	lt
 8000318:	426d      	neglt	r5, r5
 800031a:	dd0c      	ble.n	8000336 <__adddf3+0x52>
 800031c:	442c      	add	r4, r5
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	ea82 0000 	eor.w	r0, r2, r0
 800032a:	ea83 0101 	eor.w	r1, r3, r1
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	2d36      	cmp	r5, #54	@ 0x36
 8000338:	bf88      	it	hi
 800033a:	bd30      	pophi	{r4, r5, pc}
 800033c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000344:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800034c:	d002      	beq.n	8000354 <__adddf3+0x70>
 800034e:	4240      	negs	r0, r0
 8000350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000354:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000360:	d002      	beq.n	8000368 <__adddf3+0x84>
 8000362:	4252      	negs	r2, r2
 8000364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000368:	ea94 0f05 	teq	r4, r5
 800036c:	f000 80a7 	beq.w	80004be <__adddf3+0x1da>
 8000370:	f1a4 0401 	sub.w	r4, r4, #1
 8000374:	f1d5 0e20 	rsbs	lr, r5, #32
 8000378:	db0d      	blt.n	8000396 <__adddf3+0xb2>
 800037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037e:	fa22 f205 	lsr.w	r2, r2, r5
 8000382:	1880      	adds	r0, r0, r2
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	fa03 f20e 	lsl.w	r2, r3, lr
 800038c:	1880      	adds	r0, r0, r2
 800038e:	fa43 f305 	asr.w	r3, r3, r5
 8000392:	4159      	adcs	r1, r3
 8000394:	e00e      	b.n	80003b4 <__adddf3+0xd0>
 8000396:	f1a5 0520 	sub.w	r5, r5, #32
 800039a:	f10e 0e20 	add.w	lr, lr, #32
 800039e:	2a01      	cmp	r2, #1
 80003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a4:	bf28      	it	cs
 80003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003aa:	fa43 f305 	asr.w	r3, r3, r5
 80003ae:	18c0      	adds	r0, r0, r3
 80003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b8:	d507      	bpl.n	80003ca <__adddf3+0xe6>
 80003ba:	f04f 0e00 	mov.w	lr, #0
 80003be:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ce:	d31b      	bcc.n	8000408 <__adddf3+0x124>
 80003d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003d4:	d30c      	bcc.n	80003f0 <__adddf3+0x10c>
 80003d6:	0849      	lsrs	r1, r1, #1
 80003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e0:	f104 0401 	add.w	r4, r4, #1
 80003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003ec:	f080 809a 	bcs.w	8000524 <__adddf3+0x240>
 80003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003f4:	bf08      	it	eq
 80003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fa:	f150 0000 	adcs.w	r0, r0, #0
 80003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000402:	ea41 0105 	orr.w	r1, r1, r5
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800040c:	4140      	adcs	r0, r0
 800040e:	eb41 0101 	adc.w	r1, r1, r1
 8000412:	3c01      	subs	r4, #1
 8000414:	bf28      	it	cs
 8000416:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800041a:	d2e9      	bcs.n	80003f0 <__adddf3+0x10c>
 800041c:	f091 0f00 	teq	r1, #0
 8000420:	bf04      	itt	eq
 8000422:	4601      	moveq	r1, r0
 8000424:	2000      	moveq	r0, #0
 8000426:	fab1 f381 	clz	r3, r1
 800042a:	bf08      	it	eq
 800042c:	3320      	addeq	r3, #32
 800042e:	f1a3 030b 	sub.w	r3, r3, #11
 8000432:	f1b3 0220 	subs.w	r2, r3, #32
 8000436:	da0c      	bge.n	8000452 <__adddf3+0x16e>
 8000438:	320c      	adds	r2, #12
 800043a:	dd08      	ble.n	800044e <__adddf3+0x16a>
 800043c:	f102 0c14 	add.w	ip, r2, #20
 8000440:	f1c2 020c 	rsb	r2, r2, #12
 8000444:	fa01 f00c 	lsl.w	r0, r1, ip
 8000448:	fa21 f102 	lsr.w	r1, r1, r2
 800044c:	e00c      	b.n	8000468 <__adddf3+0x184>
 800044e:	f102 0214 	add.w	r2, r2, #20
 8000452:	bfd8      	it	le
 8000454:	f1c2 0c20 	rsble	ip, r2, #32
 8000458:	fa01 f102 	lsl.w	r1, r1, r2
 800045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000460:	bfdc      	itt	le
 8000462:	ea41 010c 	orrle.w	r1, r1, ip
 8000466:	4090      	lslle	r0, r2
 8000468:	1ae4      	subs	r4, r4, r3
 800046a:	bfa2      	ittt	ge
 800046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000470:	4329      	orrge	r1, r5
 8000472:	bd30      	popge	{r4, r5, pc}
 8000474:	ea6f 0404 	mvn.w	r4, r4
 8000478:	3c1f      	subs	r4, #31
 800047a:	da1c      	bge.n	80004b6 <__adddf3+0x1d2>
 800047c:	340c      	adds	r4, #12
 800047e:	dc0e      	bgt.n	800049e <__adddf3+0x1ba>
 8000480:	f104 0414 	add.w	r4, r4, #20
 8000484:	f1c4 0220 	rsb	r2, r4, #32
 8000488:	fa20 f004 	lsr.w	r0, r0, r4
 800048c:	fa01 f302 	lsl.w	r3, r1, r2
 8000490:	ea40 0003 	orr.w	r0, r0, r3
 8000494:	fa21 f304 	lsr.w	r3, r1, r4
 8000498:	ea45 0103 	orr.w	r1, r5, r3
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f1c4 040c 	rsb	r4, r4, #12
 80004a2:	f1c4 0220 	rsb	r2, r4, #32
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 f304 	lsl.w	r3, r1, r4
 80004ae:	ea40 0003 	orr.w	r0, r0, r3
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	f094 0f00 	teq	r4, #0
 80004c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004c6:	bf06      	itte	eq
 80004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004cc:	3401      	addeq	r4, #1
 80004ce:	3d01      	subne	r5, #1
 80004d0:	e74e      	b.n	8000370 <__adddf3+0x8c>
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf18      	it	ne
 80004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004dc:	d029      	beq.n	8000532 <__adddf3+0x24e>
 80004de:	ea94 0f05 	teq	r4, r5
 80004e2:	bf08      	it	eq
 80004e4:	ea90 0f02 	teqeq	r0, r2
 80004e8:	d005      	beq.n	80004f6 <__adddf3+0x212>
 80004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ee:	bf04      	itt	eq
 80004f0:	4619      	moveq	r1, r3
 80004f2:	4610      	moveq	r0, r2
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	ea91 0f03 	teq	r1, r3
 80004fa:	bf1e      	ittt	ne
 80004fc:	2100      	movne	r1, #0
 80004fe:	2000      	movne	r0, #0
 8000500:	bd30      	popne	{r4, r5, pc}
 8000502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000506:	d105      	bne.n	8000514 <__adddf3+0x230>
 8000508:	0040      	lsls	r0, r0, #1
 800050a:	4149      	adcs	r1, r1
 800050c:	bf28      	it	cs
 800050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000512:	bd30      	pop	{r4, r5, pc}
 8000514:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000518:	bf3c      	itt	cc
 800051a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800051e:	bd30      	popcc	{r4, r5, pc}
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000524:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000528:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800052c:	f04f 0000 	mov.w	r0, #0
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000536:	bf1a      	itte	ne
 8000538:	4619      	movne	r1, r3
 800053a:	4610      	movne	r0, r2
 800053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000540:	bf1c      	itt	ne
 8000542:	460b      	movne	r3, r1
 8000544:	4602      	movne	r2, r0
 8000546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054a:	bf06      	itte	eq
 800054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000550:	ea91 0f03 	teqeq	r1, r3
 8000554:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	bf00      	nop

0800055c <__aeabi_ui2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000570:	f04f 0500 	mov.w	r5, #0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e750      	b.n	800041c <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_i2d>:
 800057c:	f090 0f00 	teq	r0, #0
 8000580:	bf04      	itt	eq
 8000582:	2100      	moveq	r1, #0
 8000584:	4770      	bxeq	lr
 8000586:	b530      	push	{r4, r5, lr}
 8000588:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800058c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000590:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000594:	bf48      	it	mi
 8000596:	4240      	negmi	r0, r0
 8000598:	f04f 0100 	mov.w	r1, #0
 800059c:	e73e      	b.n	800041c <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_f2d>:
 80005a0:	0042      	lsls	r2, r0, #1
 80005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ae:	bf1f      	itttt	ne
 80005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005bc:	4770      	bxne	lr
 80005be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005c2:	bf08      	it	eq
 80005c4:	4770      	bxeq	lr
 80005c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ca:	bf04      	itt	eq
 80005cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d0:	4770      	bxeq	lr
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	e71c      	b.n	800041c <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_ul2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	e00a      	b.n	800060a <__aeabi_l2d+0x16>

080005f4 <__aeabi_l2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000602:	d502      	bpl.n	800060a <__aeabi_l2d+0x16>
 8000604:	4240      	negs	r0, r0
 8000606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800060e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000616:	f43f aed8 	beq.w	80003ca <__adddf3+0xe6>
 800061a:	f04f 0203 	mov.w	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	fa00 fc03 	lsl.w	ip, r0, r3
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000642:	ea40 000e 	orr.w	r0, r0, lr
 8000646:	fa21 f102 	lsr.w	r1, r1, r2
 800064a:	4414      	add	r4, r2
 800064c:	e6bd      	b.n	80003ca <__adddf3+0xe6>
 800064e:	bf00      	nop

08000650 <__aeabi_dmul>:
 8000650:	b570      	push	{r4, r5, r6, lr}
 8000652:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000656:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065e:	bf1d      	ittte	ne
 8000660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000664:	ea94 0f0c 	teqne	r4, ip
 8000668:	ea95 0f0c 	teqne	r5, ip
 800066c:	f000 f8de 	bleq	800082c <__aeabi_dmul+0x1dc>
 8000670:	442c      	add	r4, r5
 8000672:	ea81 0603 	eor.w	r6, r1, r3
 8000676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000682:	bf18      	it	ne
 8000684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000688:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800068c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000690:	d038      	beq.n	8000704 <__aeabi_dmul+0xb4>
 8000692:	fba0 ce02 	umull	ip, lr, r0, r2
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a6:	f04f 0600 	mov.w	r6, #0
 80006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ae:	f09c 0f00 	teq	ip, #0
 80006b2:	bf18      	it	ne
 80006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006c4:	d204      	bcs.n	80006d0 <__aeabi_dmul+0x80>
 80006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ca:	416d      	adcs	r5, r5
 80006cc:	eb46 0606 	adc.w	r6, r6, r6
 80006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e8:	bf88      	it	hi
 80006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006ee:	d81e      	bhi.n	800072e <__aeabi_dmul+0xde>
 80006f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006f4:	bf08      	it	eq
 80006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006fa:	f150 0000 	adcs.w	r0, r0, #0
 80006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000708:	ea46 0101 	orr.w	r1, r6, r1
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000718:	bfc2      	ittt	gt
 800071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000722:	bd70      	popgt	{r4, r5, r6, pc}
 8000724:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000728:	f04f 0e00 	mov.w	lr, #0
 800072c:	3c01      	subs	r4, #1
 800072e:	f300 80ab 	bgt.w	8000888 <__aeabi_dmul+0x238>
 8000732:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000736:	bfde      	ittt	le
 8000738:	2000      	movle	r0, #0
 800073a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800073e:	bd70      	pople	{r4, r5, r6, pc}
 8000740:	f1c4 0400 	rsb	r4, r4, #0
 8000744:	3c20      	subs	r4, #32
 8000746:	da35      	bge.n	80007b4 <__aeabi_dmul+0x164>
 8000748:	340c      	adds	r4, #12
 800074a:	dc1b      	bgt.n	8000784 <__aeabi_dmul+0x134>
 800074c:	f104 0414 	add.w	r4, r4, #20
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f305 	lsl.w	r3, r0, r5
 8000758:	fa20 f004 	lsr.w	r0, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000768:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000770:	fa21 f604 	lsr.w	r6, r1, r4
 8000774:	eb42 0106 	adc.w	r1, r2, r6
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 040c 	rsb	r4, r4, #12
 8000788:	f1c4 0520 	rsb	r5, r4, #32
 800078c:	fa00 f304 	lsl.w	r3, r0, r4
 8000790:	fa20 f005 	lsr.w	r0, r0, r5
 8000794:	fa01 f204 	lsl.w	r2, r1, r4
 8000798:	ea40 0002 	orr.w	r0, r0, r2
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a4:	f141 0100 	adc.w	r1, r1, #0
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f1c4 0520 	rsb	r5, r4, #32
 80007b8:	fa00 f205 	lsl.w	r2, r0, r5
 80007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c0:	fa20 f304 	lsr.w	r3, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea43 0302 	orr.w	r3, r3, r2
 80007cc:	fa21 f004 	lsr.w	r0, r1, r4
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007d4:	fa21 f204 	lsr.w	r2, r1, r4
 80007d8:	ea20 0002 	bic.w	r0, r0, r2
 80007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f094 0f00 	teq	r4, #0
 80007f0:	d10f      	bne.n	8000812 <__aeabi_dmul+0x1c2>
 80007f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007f6:	0040      	lsls	r0, r0, #1
 80007f8:	eb41 0101 	adc.w	r1, r1, r1
 80007fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000800:	bf08      	it	eq
 8000802:	3c01      	subeq	r4, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1a6>
 8000806:	ea41 0106 	orr.w	r1, r1, r6
 800080a:	f095 0f00 	teq	r5, #0
 800080e:	bf18      	it	ne
 8000810:	4770      	bxne	lr
 8000812:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000816:	0052      	lsls	r2, r2, #1
 8000818:	eb43 0303 	adc.w	r3, r3, r3
 800081c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000820:	bf08      	it	eq
 8000822:	3d01      	subeq	r5, #1
 8000824:	d0f7      	beq.n	8000816 <__aeabi_dmul+0x1c6>
 8000826:	ea43 0306 	orr.w	r3, r3, r6
 800082a:	4770      	bx	lr
 800082c:	ea94 0f0c 	teq	r4, ip
 8000830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000834:	bf18      	it	ne
 8000836:	ea95 0f0c 	teqne	r5, ip
 800083a:	d00c      	beq.n	8000856 <__aeabi_dmul+0x206>
 800083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000840:	bf18      	it	ne
 8000842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000846:	d1d1      	bne.n	80007ec <__aeabi_dmul+0x19c>
 8000848:	ea81 0103 	eor.w	r1, r1, r3
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085a:	bf06      	itte	eq
 800085c:	4610      	moveq	r0, r2
 800085e:	4619      	moveq	r1, r3
 8000860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000864:	d019      	beq.n	800089a <__aeabi_dmul+0x24a>
 8000866:	ea94 0f0c 	teq	r4, ip
 800086a:	d102      	bne.n	8000872 <__aeabi_dmul+0x222>
 800086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000870:	d113      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000872:	ea95 0f0c 	teq	r5, ip
 8000876:	d105      	bne.n	8000884 <__aeabi_dmul+0x234>
 8000878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800087c:	bf1c      	itt	ne
 800087e:	4610      	movne	r0, r2
 8000880:	4619      	movne	r1, r3
 8000882:	d10a      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000884:	ea81 0103 	eor.w	r1, r1, r3
 8000888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800088c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000890:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	bd70      	pop	{r4, r5, r6, pc}
 800089a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800089e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008a2:	bd70      	pop	{r4, r5, r6, pc}

080008a4 <__aeabi_ddiv>:
 80008a4:	b570      	push	{r4, r5, r6, lr}
 80008a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b2:	bf1d      	ittte	ne
 80008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b8:	ea94 0f0c 	teqne	r4, ip
 80008bc:	ea95 0f0c 	teqne	r5, ip
 80008c0:	f000 f8a7 	bleq	8000a12 <__aeabi_ddiv+0x16e>
 80008c4:	eba4 0405 	sub.w	r4, r4, r5
 80008c8:	ea81 0e03 	eor.w	lr, r1, r3
 80008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d4:	f000 8088 	beq.w	80009e8 <__aeabi_ddiv+0x144>
 80008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008fc:	429d      	cmp	r5, r3
 80008fe:	bf08      	it	eq
 8000900:	4296      	cmpeq	r6, r2
 8000902:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000906:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800090a:	d202      	bcs.n	8000912 <__aeabi_ddiv+0x6e>
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	1ab6      	subs	r6, r6, r2
 8000914:	eb65 0503 	sbc.w	r5, r5, r3
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000922:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 000c 	orrcs.w	r0, r0, ip
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000980:	ea55 0e06 	orrs.w	lr, r5, r6
 8000984:	d018      	beq.n	80009b8 <__aeabi_ddiv+0x114>
 8000986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009a2:	d1c0      	bne.n	8000926 <__aeabi_ddiv+0x82>
 80009a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a8:	d10b      	bne.n	80009c2 <__aeabi_ddiv+0x11e>
 80009aa:	ea41 0100 	orr.w	r1, r1, r0
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009b6:	e7b6      	b.n	8000926 <__aeabi_ddiv+0x82>
 80009b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009bc:	bf04      	itt	eq
 80009be:	4301      	orreq	r1, r0
 80009c0:	2000      	moveq	r0, #0
 80009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009c6:	bf88      	it	hi
 80009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009cc:	f63f aeaf 	bhi.w	800072e <__aeabi_dmul+0xde>
 80009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d4:	bf04      	itt	eq
 80009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009de:	f150 0000 	adcs.w	r0, r0, #0
 80009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	pop	{r4, r5, r6, pc}
 80009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f4:	bfc2      	ittt	gt
 80009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000a00:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a04:	f04f 0e00 	mov.w	lr, #0
 8000a08:	3c01      	subs	r4, #1
 8000a0a:	e690      	b.n	800072e <__aeabi_dmul+0xde>
 8000a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a10:	e68d      	b.n	800072e <__aeabi_dmul+0xde>
 8000a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a16:	ea94 0f0c 	teq	r4, ip
 8000a1a:	bf08      	it	eq
 8000a1c:	ea95 0f0c 	teqeq	r5, ip
 8000a20:	f43f af3b 	beq.w	800089a <__aeabi_dmul+0x24a>
 8000a24:	ea94 0f0c 	teq	r4, ip
 8000a28:	d10a      	bne.n	8000a40 <__aeabi_ddiv+0x19c>
 8000a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2e:	f47f af34 	bne.w	800089a <__aeabi_dmul+0x24a>
 8000a32:	ea95 0f0c 	teq	r5, ip
 8000a36:	f47f af25 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	e72c      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a40:	ea95 0f0c 	teq	r5, ip
 8000a44:	d106      	bne.n	8000a54 <__aeabi_ddiv+0x1b0>
 8000a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a4a:	f43f aefd 	beq.w	8000848 <__aeabi_dmul+0x1f8>
 8000a4e:	4610      	mov	r0, r2
 8000a50:	4619      	mov	r1, r3
 8000a52:	e722      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5e:	f47f aec5 	bne.w	80007ec <__aeabi_dmul+0x19c>
 8000a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a66:	f47f af0d 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6e:	f47f aeeb 	bne.w	8000848 <__aeabi_dmul+0x1f8>
 8000a72:	e712      	b.n	800089a <__aeabi_dmul+0x24a>

08000a74 <__aeabi_d2f>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a7c:	bf24      	itt	cs
 8000a7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a86:	d90d      	bls.n	8000aa4 <__aeabi_d2f+0x30>
 8000a88:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a94:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a9c:	bf08      	it	eq
 8000a9e:	f020 0001 	biceq.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aa8:	d121      	bne.n	8000aee <__aeabi_d2f+0x7a>
 8000aaa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aae:	bfbc      	itt	lt
 8000ab0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	4770      	bxlt	lr
 8000ab6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000abe:	f1c2 0218 	rsb	r2, r2, #24
 8000ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aca:	fa20 f002 	lsr.w	r0, r0, r2
 8000ace:	bf18      	it	ne
 8000ad0:	f040 0001 	orrne.w	r0, r0, #1
 8000ad4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000adc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae0:	ea40 000c 	orr.w	r0, r0, ip
 8000ae4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aec:	e7cc      	b.n	8000a88 <__aeabi_d2f+0x14>
 8000aee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af2:	d107      	bne.n	8000b04 <__aeabi_d2f+0x90>
 8000af4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af8:	bf1e      	ittt	ne
 8000afa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000afe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b02:	4770      	bxne	lr
 8000b04:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_frsub>:
 8000b14:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b18:	e002      	b.n	8000b20 <__addsf3>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_fsub>:
 8000b1c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b20 <__addsf3>:
 8000b20:	0042      	lsls	r2, r0, #1
 8000b22:	bf1f      	itttt	ne
 8000b24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b28:	ea92 0f03 	teqne	r2, r3
 8000b2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b34:	d06a      	beq.n	8000c0c <__addsf3+0xec>
 8000b36:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b3e:	bfc1      	itttt	gt
 8000b40:	18d2      	addgt	r2, r2, r3
 8000b42:	4041      	eorgt	r1, r0
 8000b44:	4048      	eorgt	r0, r1
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	bfb8      	it	lt
 8000b4a:	425b      	neglt	r3, r3
 8000b4c:	2b19      	cmp	r3, #25
 8000b4e:	bf88      	it	hi
 8000b50:	4770      	bxhi	lr
 8000b52:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b56:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b5a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b5e:	bf18      	it	ne
 8000b60:	4240      	negne	r0, r0
 8000b62:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b66:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b6a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4249      	negne	r1, r1
 8000b72:	ea92 0f03 	teq	r2, r3
 8000b76:	d03f      	beq.n	8000bf8 <__addsf3+0xd8>
 8000b78:	f1a2 0201 	sub.w	r2, r2, #1
 8000b7c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b80:	eb10 000c 	adds.w	r0, r0, ip
 8000b84:	f1c3 0320 	rsb	r3, r3, #32
 8000b88:	fa01 f103 	lsl.w	r1, r1, r3
 8000b8c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b90:	d502      	bpl.n	8000b98 <__addsf3+0x78>
 8000b92:	4249      	negs	r1, r1
 8000b94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b98:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b9c:	d313      	bcc.n	8000bc6 <__addsf3+0xa6>
 8000b9e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ba2:	d306      	bcc.n	8000bb2 <__addsf3+0x92>
 8000ba4:	0840      	lsrs	r0, r0, #1
 8000ba6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000baa:	f102 0201 	add.w	r2, r2, #1
 8000bae:	2afe      	cmp	r2, #254	@ 0xfe
 8000bb0:	d251      	bcs.n	8000c56 <__addsf3+0x136>
 8000bb2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bba:	bf08      	it	eq
 8000bbc:	f020 0001 	biceq.w	r0, r0, #1
 8000bc0:	ea40 0003 	orr.w	r0, r0, r3
 8000bc4:	4770      	bx	lr
 8000bc6:	0049      	lsls	r1, r1, #1
 8000bc8:	eb40 0000 	adc.w	r0, r0, r0
 8000bcc:	3a01      	subs	r2, #1
 8000bce:	bf28      	it	cs
 8000bd0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bd4:	d2ed      	bcs.n	8000bb2 <__addsf3+0x92>
 8000bd6:	fab0 fc80 	clz	ip, r0
 8000bda:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bde:	ebb2 020c 	subs.w	r2, r2, ip
 8000be2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000be6:	bfaa      	itet	ge
 8000be8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bec:	4252      	neglt	r2, r2
 8000bee:	4318      	orrge	r0, r3
 8000bf0:	bfbc      	itt	lt
 8000bf2:	40d0      	lsrlt	r0, r2
 8000bf4:	4318      	orrlt	r0, r3
 8000bf6:	4770      	bx	lr
 8000bf8:	f092 0f00 	teq	r2, #0
 8000bfc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c00:	bf06      	itte	eq
 8000c02:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c06:	3201      	addeq	r2, #1
 8000c08:	3b01      	subne	r3, #1
 8000c0a:	e7b5      	b.n	8000b78 <__addsf3+0x58>
 8000c0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c14:	bf18      	it	ne
 8000c16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1a:	d021      	beq.n	8000c60 <__addsf3+0x140>
 8000c1c:	ea92 0f03 	teq	r2, r3
 8000c20:	d004      	beq.n	8000c2c <__addsf3+0x10c>
 8000c22:	f092 0f00 	teq	r2, #0
 8000c26:	bf08      	it	eq
 8000c28:	4608      	moveq	r0, r1
 8000c2a:	4770      	bx	lr
 8000c2c:	ea90 0f01 	teq	r0, r1
 8000c30:	bf1c      	itt	ne
 8000c32:	2000      	movne	r0, #0
 8000c34:	4770      	bxne	lr
 8000c36:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c3a:	d104      	bne.n	8000c46 <__addsf3+0x126>
 8000c3c:	0040      	lsls	r0, r0, #1
 8000c3e:	bf28      	it	cs
 8000c40:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c44:	4770      	bx	lr
 8000c46:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c4a:	bf3c      	itt	cc
 8000c4c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c50:	4770      	bxcc	lr
 8000c52:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c56:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c5e:	4770      	bx	lr
 8000c60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c64:	bf16      	itet	ne
 8000c66:	4608      	movne	r0, r1
 8000c68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c6c:	4601      	movne	r1, r0
 8000c6e:	0242      	lsls	r2, r0, #9
 8000c70:	bf06      	itte	eq
 8000c72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c76:	ea90 0f01 	teqeq	r0, r1
 8000c7a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_ui2f>:
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e004      	b.n	8000c90 <__aeabi_i2f+0x8>
 8000c86:	bf00      	nop

08000c88 <__aeabi_i2f>:
 8000c88:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c8c:	bf48      	it	mi
 8000c8e:	4240      	negmi	r0, r0
 8000c90:	ea5f 0c00 	movs.w	ip, r0
 8000c94:	bf08      	it	eq
 8000c96:	4770      	bxeq	lr
 8000c98:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c9c:	4601      	mov	r1, r0
 8000c9e:	f04f 0000 	mov.w	r0, #0
 8000ca2:	e01c      	b.n	8000cde <__aeabi_l2f+0x2a>

08000ca4 <__aeabi_ul2f>:
 8000ca4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f04f 0300 	mov.w	r3, #0
 8000cb0:	e00a      	b.n	8000cc8 <__aeabi_l2f+0x14>
 8000cb2:	bf00      	nop

08000cb4 <__aeabi_l2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cc0:	d502      	bpl.n	8000cc8 <__aeabi_l2f+0x14>
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	ea5f 0c01 	movs.w	ip, r1
 8000ccc:	bf02      	ittt	eq
 8000cce:	4684      	moveq	ip, r0
 8000cd0:	4601      	moveq	r1, r0
 8000cd2:	2000      	moveq	r0, #0
 8000cd4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cd8:	bf08      	it	eq
 8000cda:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cde:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ce2:	fabc f28c 	clz	r2, ip
 8000ce6:	3a08      	subs	r2, #8
 8000ce8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cec:	db10      	blt.n	8000d10 <__aeabi_l2f+0x5c>
 8000cee:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf2:	4463      	add	r3, ip
 8000cf4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cf8:	f1c2 0220 	rsb	r2, r2, #32
 8000cfc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d00:	fa20 f202 	lsr.w	r2, r0, r2
 8000d04:	eb43 0002 	adc.w	r0, r3, r2
 8000d08:	bf08      	it	eq
 8000d0a:	f020 0001 	biceq.w	r0, r0, #1
 8000d0e:	4770      	bx	lr
 8000d10:	f102 0220 	add.w	r2, r2, #32
 8000d14:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d18:	f1c2 0220 	rsb	r2, r2, #32
 8000d1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d20:	fa21 f202 	lsr.w	r2, r1, r2
 8000d24:	eb43 0002 	adc.w	r0, r3, r2
 8000d28:	bf08      	it	eq
 8000d2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d2e:	4770      	bx	lr

08000d30 <__gesf2>:
 8000d30:	f04f 3cff 	mov.w	ip, #4294967295
 8000d34:	e006      	b.n	8000d44 <__cmpsf2+0x4>
 8000d36:	bf00      	nop

08000d38 <__lesf2>:
 8000d38:	f04f 0c01 	mov.w	ip, #1
 8000d3c:	e002      	b.n	8000d44 <__cmpsf2+0x4>
 8000d3e:	bf00      	nop

08000d40 <__cmpsf2>:
 8000d40:	f04f 0c01 	mov.w	ip, #1
 8000d44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d48:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d54:	bf18      	it	ne
 8000d56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5a:	d011      	beq.n	8000d80 <__cmpsf2+0x40>
 8000d5c:	b001      	add	sp, #4
 8000d5e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d62:	bf18      	it	ne
 8000d64:	ea90 0f01 	teqne	r0, r1
 8000d68:	bf58      	it	pl
 8000d6a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d6e:	bf88      	it	hi
 8000d70:	17c8      	asrhi	r0, r1, #31
 8000d72:	bf38      	it	cc
 8000d74:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d78:	bf18      	it	ne
 8000d7a:	f040 0001 	orrne.w	r0, r0, #1
 8000d7e:	4770      	bx	lr
 8000d80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d84:	d102      	bne.n	8000d8c <__cmpsf2+0x4c>
 8000d86:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d8a:	d105      	bne.n	8000d98 <__cmpsf2+0x58>
 8000d8c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d90:	d1e4      	bne.n	8000d5c <__cmpsf2+0x1c>
 8000d92:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d96:	d0e1      	beq.n	8000d5c <__cmpsf2+0x1c>
 8000d98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop

08000da0 <__aeabi_cfrcmple>:
 8000da0:	4684      	mov	ip, r0
 8000da2:	4608      	mov	r0, r1
 8000da4:	4661      	mov	r1, ip
 8000da6:	e7ff      	b.n	8000da8 <__aeabi_cfcmpeq>

08000da8 <__aeabi_cfcmpeq>:
 8000da8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000daa:	f7ff ffc9 	bl	8000d40 <__cmpsf2>
 8000dae:	2800      	cmp	r0, #0
 8000db0:	bf48      	it	mi
 8000db2:	f110 0f00 	cmnmi.w	r0, #0
 8000db6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000db8 <__aeabi_fcmpeq>:
 8000db8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dbc:	f7ff fff4 	bl	8000da8 <__aeabi_cfcmpeq>
 8000dc0:	bf0c      	ite	eq
 8000dc2:	2001      	moveq	r0, #1
 8000dc4:	2000      	movne	r0, #0
 8000dc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dca:	bf00      	nop

08000dcc <__aeabi_fcmplt>:
 8000dcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd0:	f7ff ffea 	bl	8000da8 <__aeabi_cfcmpeq>
 8000dd4:	bf34      	ite	cc
 8000dd6:	2001      	movcc	r0, #1
 8000dd8:	2000      	movcs	r0, #0
 8000dda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dde:	bf00      	nop

08000de0 <__aeabi_fcmple>:
 8000de0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000de4:	f7ff ffe0 	bl	8000da8 <__aeabi_cfcmpeq>
 8000de8:	bf94      	ite	ls
 8000dea:	2001      	movls	r0, #1
 8000dec:	2000      	movhi	r0, #0
 8000dee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000df2:	bf00      	nop

08000df4 <__aeabi_fcmpge>:
 8000df4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000df8:	f7ff ffd2 	bl	8000da0 <__aeabi_cfrcmple>
 8000dfc:	bf94      	ite	ls
 8000dfe:	2001      	movls	r0, #1
 8000e00:	2000      	movhi	r0, #0
 8000e02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e06:	bf00      	nop

08000e08 <__aeabi_fcmpgt>:
 8000e08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e0c:	f7ff ffc8 	bl	8000da0 <__aeabi_cfrcmple>
 8000e10:	bf34      	ite	cc
 8000e12:	2001      	movcc	r0, #1
 8000e14:	2000      	movcs	r0, #0
 8000e16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e1a:	bf00      	nop

08000e1c <__aeabi_f2iz>:
 8000e1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e20:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e24:	d30f      	bcc.n	8000e46 <__aeabi_f2iz+0x2a>
 8000e26:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e2e:	d90d      	bls.n	8000e4c <__aeabi_f2iz+0x30>
 8000e30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e38:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000e3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000e40:	bf18      	it	ne
 8000e42:	4240      	negne	r0, r0
 8000e44:	4770      	bx	lr
 8000e46:	f04f 0000 	mov.w	r0, #0
 8000e4a:	4770      	bx	lr
 8000e4c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000e50:	d101      	bne.n	8000e56 <__aeabi_f2iz+0x3a>
 8000e52:	0242      	lsls	r2, r0, #9
 8000e54:	d105      	bne.n	8000e62 <__aeabi_f2iz+0x46>
 8000e56:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000e5a:	bf08      	it	eq
 8000e5c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f04f 0000 	mov.w	r0, #0
 8000e66:	4770      	bx	lr

08000e68 <__aeabi_f2uiz>:
 8000e68:	0042      	lsls	r2, r0, #1
 8000e6a:	d20e      	bcs.n	8000e8a <__aeabi_f2uiz+0x22>
 8000e6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e70:	d30b      	bcc.n	8000e8a <__aeabi_f2uiz+0x22>
 8000e72:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e7a:	d409      	bmi.n	8000e90 <__aeabi_f2uiz+0x28>
 8000e7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e84:	fa23 f002 	lsr.w	r0, r3, r2
 8000e88:	4770      	bx	lr
 8000e8a:	f04f 0000 	mov.w	r0, #0
 8000e8e:	4770      	bx	lr
 8000e90:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000e94:	d101      	bne.n	8000e9a <__aeabi_f2uiz+0x32>
 8000e96:	0242      	lsls	r2, r0, #9
 8000e98:	d102      	bne.n	8000ea0 <__aeabi_f2uiz+0x38>
 8000e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9e:	4770      	bx	lr
 8000ea0:	f04f 0000 	mov.w	r0, #0
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <clock_init>:
** Returned value:	Current Source of the system Clock
**
*****************************************************************************/

void clock_init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	ahb_clk_set(p->ahb_prescalar);
 8000eac:	4b17      	ldr	r3, [pc, #92]	@ (8000f0c <clock_init+0x64>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	78db      	ldrb	r3, [r3, #3]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f8c2 	bl	800103c <ahb_clk_set>

	apb1_clk_set(p->apb1_prescalar);
 8000eb8:	4b14      	ldr	r3, [pc, #80]	@ (8000f0c <clock_init+0x64>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	791b      	ldrb	r3, [r3, #4]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f8d6 	bl	8001070 <apb1_clk_set>

	apb2_clk_set(p->apb2_prescalar);
 8000ec4:	4b11      	ldr	r3, [pc, #68]	@ (8000f0c <clock_init+0x64>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	795b      	ldrb	r3, [r3, #5]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 f8ea 	bl	80010a4 <apb2_clk_set>

	pll_clk_config(p->pll_clock_source,p->pll_input_clock_multiplier);
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f0c <clock_init+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	789a      	ldrb	r2, [r3, #2]
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f0c <clock_init+0x64>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	785b      	ldrb	r3, [r3, #1]
 8000edc:	4619      	mov	r1, r3
 8000ede:	4610      	mov	r0, r2
 8000ee0:	f000 f882 	bl	8000fe8 <pll_clk_config>

	system_clock_set(p->system_clock_source);
 8000ee4:	4b09      	ldr	r3, [pc, #36]	@ (8000f0c <clock_init+0x64>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 f812 	bl	8000f14 <system_clock_set>

	ahb_peripheral_clock_en(AHB_PERIPHERAL_CLOCK_EN);
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f000 f915 	bl	8001120 <ahb_peripheral_clock_en>

	apb2_peripheral_clock_en(APB2_PERIPHERAL_CLOCK_EN);
 8000ef6:	f641 201d 	movw	r0, #6685	@ 0x1a1d
 8000efa:	f000 f8ed 	bl	80010d8 <apb2_peripheral_clock_en>

	apb1_peripheral_clock_en(APB1_PERIPHERAL_CLOCK_EN);
 8000efe:	4804      	ldr	r0, [pc, #16]	@ (8000f10 <clock_init+0x68>)
 8000f00:	f000 f8fc 	bl	80010fc <apb1_peripheral_clock_en>

	lsi_clock_en();
 8000f04:	f000 f9d4 	bl	80012b0 <lsi_clock_en>

}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	02420000 	.word	0x02420000

08000f14 <system_clock_set>:
** Returned value:	Current Source of the system Clock
**
*****************************************************************************/

uint8_t system_clock_set(clock_source_e source)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = HSI;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	73fb      	strb	r3, [r7, #15]
	if (source == HSE)
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d11f      	bne.n	8000f68 <system_clock_set+0x54>
	{
		RCC->CR |= HSE_ON;
 8000f28:	4b2e      	ldr	r3, [pc, #184]	@ (8000fe4 <system_clock_set+0xd0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a2d      	ldr	r2, [pc, #180]	@ (8000fe4 <system_clock_set+0xd0>)
 8000f2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f32:	6013      	str	r3, [r2, #0]
		while (!IS_HSE_READY())
 8000f34:	bf00      	nop
 8000f36:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe4 <system_clock_set+0xd0>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d0f9      	beq.n	8000f36 <system_clock_set+0x22>
		{
			;
		}
		RCC->CFGR &= ~(3 << 0);
 8000f42:	4b28      	ldr	r3, [pc, #160]	@ (8000fe4 <system_clock_set+0xd0>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	4a27      	ldr	r2, [pc, #156]	@ (8000fe4 <system_clock_set+0xd0>)
 8000f48:	f023 0303 	bic.w	r3, r3, #3
 8000f4c:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= HSE;
 8000f4e:	4b25      	ldr	r3, [pc, #148]	@ (8000fe4 <system_clock_set+0xd0>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	4a24      	ldr	r2, [pc, #144]	@ (8000fe4 <system_clock_set+0xd0>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6053      	str	r3, [r2, #4]
		RCC->CR &= ~(1 << 0);
 8000f5a:	4b22      	ldr	r3, [pc, #136]	@ (8000fe4 <system_clock_set+0xd0>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a21      	ldr	r2, [pc, #132]	@ (8000fe4 <system_clock_set+0xd0>)
 8000f60:	f023 0301 	bic.w	r3, r3, #1
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	e037      	b.n	8000fd8 <system_clock_set+0xc4>
	}
	else if (source == HSI)
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d117      	bne.n	8000f9e <system_clock_set+0x8a>
	{
		RCC->CR |= HSI_ON;
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe4 <system_clock_set+0xd0>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a1c      	ldr	r2, [pc, #112]	@ (8000fe4 <system_clock_set+0xd0>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6013      	str	r3, [r2, #0]
		while (!IS_HSI_READY())
 8000f7a:	bf00      	nop
 8000f7c:	4b19      	ldr	r3, [pc, #100]	@ (8000fe4 <system_clock_set+0xd0>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0f9      	beq.n	8000f7c <system_clock_set+0x68>
		{
			;
		}
		RCC->CFGR &= ~(3 << 0);
 8000f88:	4b16      	ldr	r3, [pc, #88]	@ (8000fe4 <system_clock_set+0xd0>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	4a15      	ldr	r2, [pc, #84]	@ (8000fe4 <system_clock_set+0xd0>)
 8000f8e:	f023 0303 	bic.w	r3, r3, #3
 8000f92:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= HSI;
 8000f94:	4b13      	ldr	r3, [pc, #76]	@ (8000fe4 <system_clock_set+0xd0>)
 8000f96:	4a13      	ldr	r2, [pc, #76]	@ (8000fe4 <system_clock_set+0xd0>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	6053      	str	r3, [r2, #4]
 8000f9c:	e01c      	b.n	8000fd8 <system_clock_set+0xc4>
	}
	else if (source == PLL)
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d119      	bne.n	8000fd8 <system_clock_set+0xc4>
	{
		RCC->CR |= PLL_ON;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe4 <system_clock_set+0xd0>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe4 <system_clock_set+0xd0>)
 8000faa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000fae:	6013      	str	r3, [r2, #0]
		while (!IS_PLL_READY())
 8000fb0:	bf00      	nop
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe4 <system_clock_set+0xd0>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d0f9      	beq.n	8000fb2 <system_clock_set+0x9e>
		{
			;
		}
		//RCC->CFGR &= ~(3 << 0);
		RCC->CFGR |= PLL;
 8000fbe:	4b09      	ldr	r3, [pc, #36]	@ (8000fe4 <system_clock_set+0xd0>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	4a08      	ldr	r2, [pc, #32]	@ (8000fe4 <system_clock_set+0xd0>)
 8000fc4:	f043 0302 	orr.w	r3, r3, #2
 8000fc8:	6053      	str	r3, [r2, #4]
		while ((RCC->CFGR & (3 << 2)) != 8);
 8000fca:	bf00      	nop
 8000fcc:	4b05      	ldr	r3, [pc, #20]	@ (8000fe4 <system_clock_set+0xd0>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 030c 	and.w	r3, r3, #12
 8000fd4:	2b08      	cmp	r3, #8
 8000fd6:	d1f9      	bne.n	8000fcc <system_clock_set+0xb8>
		//RCC->CR &= ~(1 << 0);

	}
	return temp;
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <pll_clk_config>:
**
** Returned value:		status of the function (healthy or error)
**
*****************************************************************************/
uint8_t pll_clk_config(pll_entry_clock_source_e source,pll_input_multiplier_e multiplication_factor)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	460a      	mov	r2, r1
 8000ff2:	71fb      	strb	r3, [r7, #7]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	71bb      	strb	r3, [r7, #6]
	 RCC->CFGR &= ~(0xF << 18);
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8001038 <pll_clk_config+0x50>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	4a0e      	ldr	r2, [pc, #56]	@ (8001038 <pll_clk_config+0x50>)
 8000ffe:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 8001002:	6053      	str	r3, [r2, #4]
	 RCC->CFGR |= (multiplication_factor << 18);
 8001004:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <pll_clk_config+0x50>)
 8001006:	685a      	ldr	r2, [r3, #4]
 8001008:	79bb      	ldrb	r3, [r7, #6]
 800100a:	049b      	lsls	r3, r3, #18
 800100c:	490a      	ldr	r1, [pc, #40]	@ (8001038 <pll_clk_config+0x50>)
 800100e:	4313      	orrs	r3, r2
 8001010:	604b      	str	r3, [r1, #4]
	 RCC->CFGR &= ~(1 << 16);
 8001012:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <pll_clk_config+0x50>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	4a08      	ldr	r2, [pc, #32]	@ (8001038 <pll_clk_config+0x50>)
 8001018:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800101c:	6053      	str	r3, [r2, #4]
	 RCC->CFGR |= source;
 800101e:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <pll_clk_config+0x50>)
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	4904      	ldr	r1, [pc, #16]	@ (8001038 <pll_clk_config+0x50>)
 8001026:	4313      	orrs	r3, r2
 8001028:	604b      	str	r3, [r1, #4]
     return 1;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000

0800103c <ahb_clk_set>:
**
*****************************************************************************/


void ahb_clk_set(ahb_prescalar_option_e factor)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0xF << AHB_CLOCK_PRESCALAR_OFFSET);
 8001046:	4b09      	ldr	r3, [pc, #36]	@ (800106c <ahb_clk_set+0x30>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	4a08      	ldr	r2, [pc, #32]	@ (800106c <ahb_clk_set+0x30>)
 800104c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001050:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (factor << AHB_CLOCK_PRESCALAR_OFFSET);
 8001052:	4b06      	ldr	r3, [pc, #24]	@ (800106c <ahb_clk_set+0x30>)
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	011b      	lsls	r3, r3, #4
 800105a:	4904      	ldr	r1, [pc, #16]	@ (800106c <ahb_clk_set+0x30>)
 800105c:	4313      	orrs	r3, r2
 800105e:	604b      	str	r3, [r1, #4]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40021000 	.word	0x40021000

08001070 <apb1_clk_set>:
**
** Returned value:		void
**
*****************************************************************************/
void apb1_clk_set(apbx_prescalar_options_e factor)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0x7 << APB1_CLOCK_PRESCALAR_OFFSET);
 800107a:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <apb1_clk_set+0x30>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	4a08      	ldr	r2, [pc, #32]	@ (80010a0 <apb1_clk_set+0x30>)
 8001080:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001084:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (factor << APB1_CLOCK_PRESCALAR_OFFSET);
 8001086:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <apb1_clk_set+0x30>)
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	021b      	lsls	r3, r3, #8
 800108e:	4904      	ldr	r1, [pc, #16]	@ (80010a0 <apb1_clk_set+0x30>)
 8001090:	4313      	orrs	r3, r2
 8001092:	604b      	str	r3, [r1, #4]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40021000 	.word	0x40021000

080010a4 <apb2_clk_set>:
**
** Returned value:		void
**
*****************************************************************************/
void apb2_clk_set(apbx_prescalar_options_e factor)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0xF << APB2_CLOCK_PRESCALAR_OFFSET);
 80010ae:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <apb2_clk_set+0x30>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	4a08      	ldr	r2, [pc, #32]	@ (80010d4 <apb2_clk_set+0x30>)
 80010b4:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 80010b8:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (factor << APB2_CLOCK_PRESCALAR_OFFSET);
 80010ba:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <apb2_clk_set+0x30>)
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	02db      	lsls	r3, r3, #11
 80010c2:	4904      	ldr	r1, [pc, #16]	@ (80010d4 <apb2_clk_set+0x30>)
 80010c4:	4313      	orrs	r3, r2
 80010c6:	604b      	str	r3, [r1, #4]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40021000 	.word	0x40021000

080010d8 <apb2_peripheral_clock_en>:
**
** Returned value:		void
**
*****************************************************************************/
void apb2_peripheral_clock_en(uint32_t clock_en_parameter)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR |= clock_en_parameter;
 80010e0:	4b05      	ldr	r3, [pc, #20]	@ (80010f8 <apb2_peripheral_clock_en+0x20>)
 80010e2:	699a      	ldr	r2, [r3, #24]
 80010e4:	4904      	ldr	r1, [pc, #16]	@ (80010f8 <apb2_peripheral_clock_en+0x20>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	618b      	str	r3, [r1, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40021000 	.word	0x40021000

080010fc <apb1_peripheral_clock_en>:
**
** Returned value:		void
**
*****************************************************************************/
void apb1_peripheral_clock_en(uint32_t clock_en_parameter)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	RCC->APB1ENR |= clock_en_parameter;
 8001104:	4b05      	ldr	r3, [pc, #20]	@ (800111c <apb1_peripheral_clock_en+0x20>)
 8001106:	69da      	ldr	r2, [r3, #28]
 8001108:	4904      	ldr	r1, [pc, #16]	@ (800111c <apb1_peripheral_clock_en+0x20>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4313      	orrs	r3, r2
 800110e:	61cb      	str	r3, [r1, #28]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000

08001120 <ahb_peripheral_clock_en>:


void ahb_peripheral_clock_en(uint32_t clock_en_parameter)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	RCC->AHBENR |= clock_en_parameter;
 8001128:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <ahb_peripheral_clock_en+0x20>)
 800112a:	695a      	ldr	r2, [r3, #20]
 800112c:	4904      	ldr	r1, [pc, #16]	@ (8001140 <ahb_peripheral_clock_en+0x20>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4313      	orrs	r3, r2
 8001132:	614b      	str	r3, [r1, #20]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	40021000 	.word	0x40021000

08001144 <apb_get_clock>:
**
** Returned value:		Clock Frequency
**
*****************************************************************************/
uint32_t apb_get_clock(uint8_t apb)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
	uint8_t clock_source;
	uint32_t sysclk, temp,temp2, ahbp, apbp;

	clock_source = ((RCC->CFGR >> 2) & 0x03);
 800114e:	4b33      	ldr	r3, [pc, #204]	@ (800121c <apb_get_clock+0xd8>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	089b      	lsrs	r3, r3, #2
 8001154:	b2db      	uxtb	r3, r3
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	74fb      	strb	r3, [r7, #19]
	if (clock_source == SYSCLK_SOURCE_HSI)
 800115c:	7cfb      	ldrb	r3, [r7, #19]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d102      	bne.n	8001168 <apb_get_clock+0x24>
	{
		sysclk = 8000000;
 8001162:	4b2f      	ldr	r3, [pc, #188]	@ (8001220 <apb_get_clock+0xdc>)
 8001164:	61fb      	str	r3, [r7, #28]
 8001166:	e011      	b.n	800118c <apb_get_clock+0x48>
	}
	else if (clock_source == SYSCLK_SOURCE_HSE)
 8001168:	7cfb      	ldrb	r3, [r7, #19]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d102      	bne.n	8001174 <apb_get_clock+0x30>
	{
		sysclk = 8000000;
 800116e:	4b2c      	ldr	r3, [pc, #176]	@ (8001220 <apb_get_clock+0xdc>)
 8001170:	61fb      	str	r3, [r7, #28]
 8001172:	e00b      	b.n	800118c <apb_get_clock+0x48>
	}
	else if (clock_source == SYSCLK_SOURCE_PLL)
 8001174:	7cfb      	ldrb	r3, [r7, #19]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d103      	bne.n	8001182 <apb_get_clock+0x3e>
	{
		sysclk = get_pll_clock();
 800117a:	f000 f857 	bl	800122c <get_pll_clock>
 800117e:	61f8      	str	r0, [r7, #28]
 8001180:	e004      	b.n	800118c <apb_get_clock+0x48>
	}
	else if (clock_source == SYSCLK_SOURCE_PLL_R)
 8001182:	7cfb      	ldrb	r3, [r7, #19]
 8001184:	2b03      	cmp	r3, #3
 8001186:	d101      	bne.n	800118c <apb_get_clock+0x48>
	{
		sysclk = 1; // study this and write the function for it.
 8001188:	2301      	movs	r3, #1
 800118a:	61fb      	str	r3, [r7, #28]
	}

	/*
	 * Get AHB Prescalar Value
	 */
	temp = (RCC->CFGR >> 4) & 0xF;
 800118c:	4b23      	ldr	r3, [pc, #140]	@ (800121c <apb_get_clock+0xd8>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	091b      	lsrs	r3, r3, #4
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	60fb      	str	r3, [r7, #12]
	if (temp < 8)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2b07      	cmp	r3, #7
 800119c:	d802      	bhi.n	80011a4 <apb_get_clock+0x60>
	{
		ahbp = 1;
 800119e:	2301      	movs	r3, #1
 80011a0:	61bb      	str	r3, [r7, #24]
 80011a2:	e005      	b.n	80011b0 <apb_get_clock+0x6c>
	}
	else
	{
		ahbp = ahb_prescaler_1[temp - 8];
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	3b08      	subs	r3, #8
 80011a8:	4a1e      	ldr	r2, [pc, #120]	@ (8001224 <apb_get_clock+0xe0>)
 80011aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011ae:	61bb      	str	r3, [r7, #24]
	}

	/*
	 * Get APB1 Prescalar Value
	 */
	if (apb == APB1)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d111      	bne.n	80011da <apb_get_clock+0x96>
	{
		temp = ( (RCC->CFGR >> 8) & 0x7);
 80011b6:	4b19      	ldr	r3, [pc, #100]	@ (800121c <apb_get_clock+0xd8>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	0a1b      	lsrs	r3, r3, #8
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	60fb      	str	r3, [r7, #12]
		if (temp < 4)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	d802      	bhi.n	80011ce <apb_get_clock+0x8a>
		{
			apbp = 1;
 80011c8:	2301      	movs	r3, #1
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	e005      	b.n	80011da <apb_get_clock+0x96>
		}
		else
		{
			apbp = apb_prescaler_1[temp-4];
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	3b04      	subs	r3, #4
 80011d2:	4a15      	ldr	r2, [pc, #84]	@ (8001228 <apb_get_clock+0xe4>)
 80011d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011d8:	617b      	str	r3, [r7, #20]
	}

	/*
	 * get APB2 Prescalar Value
	 */
	if (apb == APB2)
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d111      	bne.n	8001204 <apb_get_clock+0xc0>
	{
		temp = ((RCC->CFGR >> 11) & 0x7);
 80011e0:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <apb_get_clock+0xd8>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	0adb      	lsrs	r3, r3, #11
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	60fb      	str	r3, [r7, #12]
		if (temp < 4)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2b03      	cmp	r3, #3
 80011f0:	d802      	bhi.n	80011f8 <apb_get_clock+0xb4>
		{
			apbp = 1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	e005      	b.n	8001204 <apb_get_clock+0xc0>
		}
		else
		{
			apbp = apb_prescaler_1[temp-4];
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	3b04      	subs	r3, #4
 80011fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001228 <apb_get_clock+0xe4>)
 80011fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001202:	617b      	str	r3, [r7, #20]
		}
	}
	return (sysclk / ahbp / apbp);
 8001204:	69fa      	ldr	r2, [r7, #28]
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	fbb2 f2f3 	udiv	r2, r2, r3
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fbb2 f3f3 	udiv	r3, r2, r3

}
 8001212:	4618      	mov	r0, r3
 8001214:	3720      	adds	r7, #32
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40021000 	.word	0x40021000
 8001220:	007a1200 	.word	0x007a1200
 8001224:	2000000c 	.word	0x2000000c
 8001228:	2000001c 	.word	0x2000001c

0800122c <get_pll_clock>:




uint32_t get_pll_clock(void)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
	// PLL input Clock source
	// If PLL input clock source is HSE then check PLLXTRE in Register
	uint8_t clock_source = ( (RCC->CFGR >> 16) & 0x01);
 8001232:	4b1b      	ldr	r3, [pc, #108]	@ (80012a0 <get_pll_clock+0x74>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	0c1b      	lsrs	r3, r3, #16
 8001238:	b2db      	uxtb	r3, r3
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	72fb      	strb	r3, [r7, #11]
	uint32_t multipliation_factor = ( (RCC->CFGR >> 18) & 0x0F);
 8001240:	4b17      	ldr	r3, [pc, #92]	@ (80012a0 <get_pll_clock+0x74>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	0c9b      	lsrs	r3, r3, #18
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	607b      	str	r3, [r7, #4]
	uint32_t hse_pll_divider = ( (RCC->CFGR >> 17) & 0x01);
 800124c:	4b14      	ldr	r3, [pc, #80]	@ (80012a0 <get_pll_clock+0x74>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	0c5b      	lsrs	r3, r3, #17
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	603b      	str	r3, [r7, #0]
	uint32_t pll_out_clk = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
	if (clock_source == PLL_HSI_DIV_2)
 800125c:	7afb      	ldrb	r3, [r7, #11]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d109      	bne.n	8001276 <get_pll_clock+0x4a>
	{
		pll_out_clk =  ( (HSI_INPUT / 2) * pll_multiplier[multipliation_factor]);
 8001262:	4a10      	ldr	r2, [pc, #64]	@ (80012a4 <get_pll_clock+0x78>)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4413      	add	r3, r2
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	4b0e      	ldr	r3, [pc, #56]	@ (80012a8 <get_pll_clock+0x7c>)
 800126e:	fb02 f303 	mul.w	r3, r2, r3
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	e00e      	b.n	8001294 <get_pll_clock+0x68>
	}
	else if (clock_source == PLL_HSE)
 8001276:	7afb      	ldrb	r3, [r7, #11]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d10b      	bne.n	8001294 <get_pll_clock+0x68>
	{
		pll_out_clk =  ( ( (HSE_INPUT) / (hse_pll_divider + 1) ) * pll_multiplier[multipliation_factor]);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	3301      	adds	r3, #1
 8001280:	4a0a      	ldr	r2, [pc, #40]	@ (80012ac <get_pll_clock+0x80>)
 8001282:	fbb2 f3f3 	udiv	r3, r2, r3
 8001286:	4907      	ldr	r1, [pc, #28]	@ (80012a4 <get_pll_clock+0x78>)
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	440a      	add	r2, r1
 800128c:	7812      	ldrb	r2, [r2, #0]
 800128e:	fb02 f303 	mul.w	r3, r2, r3
 8001292:	60fb      	str	r3, [r7, #12]
	}
	return pll_out_clk;
 8001294:	68fb      	ldr	r3, [r7, #12]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	40021000 	.word	0x40021000
 80012a4:	20000024 	.word	0x20000024
 80012a8:	003d0900 	.word	0x003d0900
 80012ac:	007a1200 	.word	0x007a1200

080012b0 <lsi_clock_en>:

void lsi_clock_en(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
	RCC->CSR |= (1 << LSI_CLOCK_EN_BIT_POSITION_CSR);
 80012b4:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <lsi_clock_en+0x28>)
 80012b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b8:	4a07      	ldr	r2, [pc, #28]	@ (80012d8 <lsi_clock_en+0x28>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	6253      	str	r3, [r2, #36]	@ 0x24
	while(!(RCC->CSR & IS_LSI_CLOCK_READY)){;}
 80012c0:	bf00      	nop
 80012c2:	4b05      	ldr	r3, [pc, #20]	@ (80012d8 <lsi_clock_en+0x28>)
 80012c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f9      	beq.n	80012c2 <lsi_clock_en+0x12>
}
 80012ce:	bf00      	nop
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr
 80012d8:	40021000 	.word	0x40021000

080012dc <io_port>:

#define LED_ON() 			io_set_out(IO_TEST_LED, OUT_STATE_LOW);
#define LED_OFF() 			io_set_out(IO_TEST_LED, OUT_STATE_HIGH);

static uint8_t io_port(io_e io)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
    return (io & IO_PORT_MASK) >> IO_PORT_OFFSET;
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	091b      	lsrs	r3, r3, #4
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	b2db      	uxtb	r3, r3
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <io_pin_bit>:

static uint8_t io_pin_bit(gpio_pins io)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
    return io & IO_PIN_MASK;
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	f003 030f 	and.w	r3, r3, #15
 800130c:	b2db      	uxtb	r3, r3
}
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <io_init>:
	}
}


void io_init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
	for (io_e io = P0_2; io <= ARRAY_SIZE(io_initial_config);io++)
 800131e:	2302      	movs	r3, #2
 8001320:	71fb      	strb	r3, [r7, #7]
 8001322:	e00d      	b.n	8001340 <io_init+0x28>
	{
		io_config(io,&io_initial_config[io]);
 8001324:	79fa      	ldrb	r2, [r7, #7]
 8001326:	4613      	mov	r3, r2
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	4413      	add	r3, r2
 800132c:	4a08      	ldr	r2, [pc, #32]	@ (8001350 <io_init+0x38>)
 800132e:	441a      	add	r2, r3
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f000 f80d 	bl	8001354 <io_config>
	for (io_e io = P0_2; io <= ARRAY_SIZE(io_initial_config);io++)
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	3301      	adds	r3, #1
 800133e:	71fb      	strb	r3, [r7, #7]
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	2b30      	cmp	r3, #48	@ 0x30
 8001344:	d9ee      	bls.n	8001324 <io_init+0xc>
	}
}
 8001346:	bf00      	nop
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000034 	.word	0x20000034

08001354 <io_config>:

void io_config(io_e io, io_configuration *config)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	6039      	str	r1, [r7, #0]
 800135e:	71fb      	strb	r3, [r7, #7]
	io_set_io_mode(io,config->mode,config->config,config->pupd);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	7819      	ldrb	r1, [r3, #0]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	785a      	ldrb	r2, [r3, #1]
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	789b      	ldrb	r3, [r3, #2]
 800136c:	79f8      	ldrb	r0, [r7, #7]
 800136e:	f000 f805 	bl	800137c <io_set_io_mode>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <io_set_io_mode>:

void io_set_io_mode(io_e io, io_mode_e mode, io_config_e config,io_pull_up_down_e pupd)
{
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	4604      	mov	r4, r0
 8001384:	4608      	mov	r0, r1
 8001386:	4611      	mov	r1, r2
 8001388:	461a      	mov	r2, r3
 800138a:	4623      	mov	r3, r4
 800138c:	71fb      	strb	r3, [r7, #7]
 800138e:	4603      	mov	r3, r0
 8001390:	71bb      	strb	r3, [r7, #6]
 8001392:	460b      	mov	r3, r1
 8001394:	717b      	strb	r3, [r7, #5]
 8001396:	4613      	mov	r3, r2
 8001398:	713b      	strb	r3, [r7, #4]
	pin = io_pin_bit(io);
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ffad 	bl	80012fc <io_pin_bit>
 80013a2:	4603      	mov	r3, r0
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001498 <io_set_io_mode+0x11c>)
 80013a8:	701a      	strb	r2, [r3, #0]
	gpio_regdef_t *Port = (gpio_regdef_t*)(GPIO_BASEADDR + (io_port(io)*0x400));
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff95 	bl	80012dc <io_port>
 80013b2:	4603      	mov	r3, r0
 80013b4:	029b      	lsls	r3, r3, #10
 80013b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80013ba:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 80013be:	60fb      	str	r3, [r7, #12]
	if(config == CONFIG_INPUT_WITH_PULLUP_PULLDOWN)
 80013c0:	797b      	ldrb	r3, [r7, #5]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d11b      	bne.n	80013fe <io_set_io_mode+0x82>
	{
		if (pupd == PULL_UP)
 80013c6:	793b      	ldrb	r3, [r7, #4]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d10a      	bne.n	80013e2 <io_set_io_mode+0x66>
		{
			Port->ODR |= (1 << pin);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	4a31      	ldr	r2, [pc, #196]	@ (8001498 <io_set_io_mode+0x11c>)
 80013d2:	7812      	ldrb	r2, [r2, #0]
 80013d4:	4611      	mov	r1, r2
 80013d6:	2201      	movs	r2, #1
 80013d8:	408a      	lsls	r2, r1
 80013da:	431a      	orrs	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	e00d      	b.n	80013fe <io_set_io_mode+0x82>
		}
		else if (pupd == PULL_DOWN)
 80013e2:	793b      	ldrb	r3, [r7, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d10a      	bne.n	80013fe <io_set_io_mode+0x82>
		{
			Port->ODR &= ~(1 << pin);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	4a2a      	ldr	r2, [pc, #168]	@ (8001498 <io_set_io_mode+0x11c>)
 80013ee:	7812      	ldrb	r2, [r2, #0]
 80013f0:	4611      	mov	r1, r2
 80013f2:	2201      	movs	r2, #1
 80013f4:	408a      	lsls	r2, r1
 80013f6:	43d2      	mvns	r2, r2
 80013f8:	401a      	ands	r2, r3
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	60da      	str	r2, [r3, #12]
		}
	}
	if (pin < 8)
 80013fe:	4b26      	ldr	r3, [pc, #152]	@ (8001498 <io_set_io_mode+0x11c>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b07      	cmp	r3, #7
 8001404:	d81e      	bhi.n	8001444 <io_set_io_mode+0xc8>
	{
		Port->CRL &= ~(0xF << PIN_MODE_MASK);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a23      	ldr	r2, [pc, #140]	@ (8001498 <io_set_io_mode+0x11c>)
 800140c:	7812      	ldrb	r2, [r2, #0]
 800140e:	0092      	lsls	r2, r2, #2
 8001410:	210f      	movs	r1, #15
 8001412:	fa01 f202 	lsl.w	r2, r1, r2
 8001416:	43d2      	mvns	r2, r2
 8001418:	401a      	ands	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	601a      	str	r2, [r3, #0]
		Port->CRL |= (mode << PIN_MODE_MASK) | (config << (PIN_MODE_MASK + 2));
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	79b9      	ldrb	r1, [r7, #6]
 8001424:	4a1c      	ldr	r2, [pc, #112]	@ (8001498 <io_set_io_mode+0x11c>)
 8001426:	7812      	ldrb	r2, [r2, #0]
 8001428:	0092      	lsls	r2, r2, #2
 800142a:	4091      	lsls	r1, r2
 800142c:	7978      	ldrb	r0, [r7, #5]
 800142e:	4a1a      	ldr	r2, [pc, #104]	@ (8001498 <io_set_io_mode+0x11c>)
 8001430:	7812      	ldrb	r2, [r2, #0]
 8001432:	0092      	lsls	r2, r2, #2
 8001434:	3202      	adds	r2, #2
 8001436:	fa00 f202 	lsl.w	r2, r0, r2
 800143a:	430a      	orrs	r2, r1
 800143c:	431a      	orrs	r2, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	601a      	str	r2, [r3, #0]
	{
		pin %= 8;
		Port->CRH &= ~(0xF << PIN_MODE_MASK);
		Port->CRH |= (mode << PIN_MODE_MASK) | (config << (PIN_MODE_MASK+2));
	}
}
 8001442:	e024      	b.n	800148e <io_set_io_mode+0x112>
		pin %= 8;
 8001444:	4b14      	ldr	r3, [pc, #80]	@ (8001498 <io_set_io_mode+0x11c>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	f003 0307 	and.w	r3, r3, #7
 800144c:	b2da      	uxtb	r2, r3
 800144e:	4b12      	ldr	r3, [pc, #72]	@ (8001498 <io_set_io_mode+0x11c>)
 8001450:	701a      	strb	r2, [r3, #0]
		Port->CRH &= ~(0xF << PIN_MODE_MASK);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	4a10      	ldr	r2, [pc, #64]	@ (8001498 <io_set_io_mode+0x11c>)
 8001458:	7812      	ldrb	r2, [r2, #0]
 800145a:	0092      	lsls	r2, r2, #2
 800145c:	210f      	movs	r1, #15
 800145e:	fa01 f202 	lsl.w	r2, r1, r2
 8001462:	43d2      	mvns	r2, r2
 8001464:	401a      	ands	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	605a      	str	r2, [r3, #4]
		Port->CRH |= (mode << PIN_MODE_MASK) | (config << (PIN_MODE_MASK+2));
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	79b9      	ldrb	r1, [r7, #6]
 8001470:	4a09      	ldr	r2, [pc, #36]	@ (8001498 <io_set_io_mode+0x11c>)
 8001472:	7812      	ldrb	r2, [r2, #0]
 8001474:	0092      	lsls	r2, r2, #2
 8001476:	4091      	lsls	r1, r2
 8001478:	7978      	ldrb	r0, [r7, #5]
 800147a:	4a07      	ldr	r2, [pc, #28]	@ (8001498 <io_set_io_mode+0x11c>)
 800147c:	7812      	ldrb	r2, [r2, #0]
 800147e:	0092      	lsls	r2, r2, #2
 8001480:	3202      	adds	r2, #2
 8001482:	fa00 f202 	lsl.w	r2, r0, r2
 8001486:	430a      	orrs	r2, r1
 8001488:	431a      	orrs	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	605a      	str	r2, [r3, #4]
}
 800148e:	bf00      	nop
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	bd90      	pop	{r4, r7, pc}
 8001496:	bf00      	nop
 8001498:	20000131 	.word	0x20000131

0800149c <io_set_out>:



void io_set_out(io_e io, io_out_e out)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	460a      	mov	r2, r1
 80014a6:	71fb      	strb	r3, [r7, #7]
 80014a8:	4613      	mov	r3, r2
 80014aa:	71bb      	strb	r3, [r7, #6]
	gpio_regdef_t *Port = (gpio_regdef_t*)(GPIO_BASEADDR + ( io_port(io) *0x400));
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff14 	bl	80012dc <io_port>
 80014b4:	4603      	mov	r3, r0
 80014b6:	029b      	lsls	r3, r3, #10
 80014b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80014bc:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 80014c0:	60fb      	str	r3, [r7, #12]
	switch(out){
 80014c2:	79bb      	ldrb	r3, [r7, #6]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d010      	beq.n	80014ea <io_set_out+0x4e>
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d11d      	bne.n	8001508 <io_set_out+0x6c>
	case OUT_STATE_HIGH:
		Port->ODR &= ~(1 << io_pin_bit(io));
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ff14 	bl	80012fc <io_pin_bit>
 80014d4:	4603      	mov	r3, r0
 80014d6:	461a      	mov	r2, r3
 80014d8:	2301      	movs	r3, #1
 80014da:	4093      	lsls	r3, r2
 80014dc:	43da      	mvns	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	401a      	ands	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	60da      	str	r2, [r3, #12]
		break;
 80014e8:	e00e      	b.n	8001508 <io_set_out+0x6c>
	case OUT_STATE_LOW:
		Port->ODR |= (1 << io_pin_bit(io));
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff05 	bl	80012fc <io_pin_bit>
 80014f2:	4603      	mov	r3, r0
 80014f4:	461a      	mov	r2, r3
 80014f6:	2301      	movs	r3, #1
 80014f8:	fa03 f202 	lsl.w	r2, r3, r2
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	431a      	orrs	r2, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	60da      	str	r2, [r3, #12]
		break;
 8001506:	bf00      	nop
	}
}
 8001508:	bf00      	nop
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <io_get_in>:
	gpio_regdef_t *Port = (gpio_regdef_t*)(GPIO_BASEADDR + ( io_port(io) *0x400));
	Port->ODR ^= (1 << 13);
}

uint16_t io_get_in(io_e io)
{
 8001510:	b590      	push	{r4, r7, lr}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
	gpio_regdef_t *Port = (gpio_regdef_t*)(GPIO_BASEADDR + ( io_port(io) *0x400));
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fedd 	bl	80012dc <io_port>
 8001522:	4603      	mov	r3, r0
 8001524:	029b      	lsls	r3, r3, #10
 8001526:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800152a:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 800152e:	60fb      	str	r3, [r7, #12]
	return (Port->IDR & (1 << io_pin_bit(io)));
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	b29c      	uxth	r4, r3
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fedf 	bl	80012fc <io_pin_bit>
 800153e:	4603      	mov	r3, r0
 8001540:	461a      	mov	r2, r3
 8001542:	2301      	movs	r3, #1
 8001544:	4093      	lsls	r3, r2
 8001546:	b29b      	uxth	r3, r3
 8001548:	4023      	ands	r3, r4
 800154a:	b29b      	uxth	r3, r3
}
 800154c:	4618      	mov	r0, r3
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	bd90      	pop	{r4, r7, pc}

08001554 <EXTI4_IRQHandler>:


void EXTI4_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 4))
 8001558:	4b10      	ldr	r3, [pc, #64]	@ (800159c <EXTI4_IRQHandler+0x48>)
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	f003 0310 	and.w	r3, r3, #16
 8001560:	2b00      	cmp	r3, #0
 8001562:	d018      	beq.n	8001596 <EXTI4_IRQHandler+0x42>
	{
		EXTI->PR |= (1 << 4);
 8001564:	4b0d      	ldr	r3, [pc, #52]	@ (800159c <EXTI4_IRQHandler+0x48>)
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	4a0c      	ldr	r2, [pc, #48]	@ (800159c <EXTI4_IRQHandler+0x48>)
 800156a:	f043 0310 	orr.w	r3, r3, #16
 800156e:	6153      	str	r3, [r2, #20]
		if (!flag_led_on)
 8001570:	4b0b      	ldr	r3, [pc, #44]	@ (80015a0 <EXTI4_IRQHandler+0x4c>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d107      	bne.n	8001588 <EXTI4_IRQHandler+0x34>
		{
			LED_ON();
 8001578:	2100      	movs	r1, #0
 800157a:	202d      	movs	r0, #45	@ 0x2d
 800157c:	f7ff ff8e 	bl	800149c <io_set_out>
			flag_led_on = 1;
 8001580:	4b07      	ldr	r3, [pc, #28]	@ (80015a0 <EXTI4_IRQHandler+0x4c>)
 8001582:	2201      	movs	r2, #1
 8001584:	701a      	strb	r2, [r3, #0]
		{
			LED_OFF();
			flag_led_on = 0;
		}
	}
}
 8001586:	e006      	b.n	8001596 <EXTI4_IRQHandler+0x42>
			LED_OFF();
 8001588:	2101      	movs	r1, #1
 800158a:	202d      	movs	r0, #45	@ 0x2d
 800158c:	f7ff ff86 	bl	800149c <io_set_out>
			flag_led_on = 0;
 8001590:	4b03      	ldr	r3, [pc, #12]	@ (80015a0 <EXTI4_IRQHandler+0x4c>)
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40010400 	.word	0x40010400
 80015a0:	20000130 	.word	0x20000130

080015a4 <systick_init>:
	uint8_t irq_position = irqn % 32;
	NVIC->ISER[register_position] = (1 << irq_position);
}

void systick_init(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
	// Reload Value
	SYSTICK->RVR = 7999; //for 1 ms @ 8 Mhz
 80015a8:	4b08      	ldr	r3, [pc, #32]	@ (80015cc <systick_init+0x28>)
 80015aa:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80015ae:	605a      	str	r2, [r3, #4]
	// Clear the current count
	SYSTICK->CVR = 0;
 80015b0:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <systick_init+0x28>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]

	// Clock Selection
	SYSTICK->CSR |= (1 << 2) | (1 << 1) | ((1 << 0)); //AHB selected
 80015b6:	4b05      	ldr	r3, [pc, #20]	@ (80015cc <systick_init+0x28>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a04      	ldr	r2, [pc, #16]	@ (80015cc <systick_init+0x28>)
 80015bc:	f043 0307 	orr.w	r3, r3, #7
 80015c0:	6013      	str	r3, [r2, #0]

}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000e010 	.word	0xe000e010

080015d0 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
	counter_adc_sampling++;
 80015d4:	4b0d      	ldr	r3, [pc, #52]	@ (800160c <SysTick_Handler+0x3c>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	3301      	adds	r3, #1
 80015da:	b29a      	uxth	r2, r3
 80015dc:	4b0b      	ldr	r3, [pc, #44]	@ (800160c <SysTick_Handler+0x3c>)
 80015de:	801a      	strh	r2, [r3, #0]
	counter_data_transmit++;
 80015e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001610 <SysTick_Handler+0x40>)
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	3301      	adds	r3, #1
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <SysTick_Handler+0x40>)
 80015ea:	801a      	strh	r2, [r3, #0]
	counter_led_toggle++;
 80015ec:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <SysTick_Handler+0x44>)
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	3301      	adds	r3, #1
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	4b07      	ldr	r3, [pc, #28]	@ (8001614 <SysTick_Handler+0x44>)
 80015f6:	801a      	strh	r2, [r3, #0]
	counter_systick++; // 1 ms tick.
 80015f8:	4b07      	ldr	r3, [pc, #28]	@ (8001618 <SysTick_Handler+0x48>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	3301      	adds	r3, #1
 80015fe:	4a06      	ldr	r2, [pc, #24]	@ (8001618 <SysTick_Handler+0x48>)
 8001600:	6013      	str	r3, [r2, #0]
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	20000132 	.word	0x20000132
 8001610:	20000134 	.word	0x20000134
 8001614:	20000136 	.word	0x20000136
 8001618:	20000138 	.word	0x20000138

0800161c <uart_2_configure_parameter>:
uint16_t logic_counter5 = 0;

static uart_callback_t callback_rx_data = 0;

void uart_2_configure_parameter(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
	usart_2_handle.add_of_usartx = USART2;
 8001620:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <uart_2_configure_parameter+0x48>)
 8001622:	4a11      	ldr	r2, [pc, #68]	@ (8001668 <uart_2_configure_parameter+0x4c>)
 8001624:	601a      	str	r2, [r3, #0]
	usart_2_handle.usart_configuration.mode = USART_MODE_TXRX;
 8001626:	4b0f      	ldr	r3, [pc, #60]	@ (8001664 <uart_2_configure_parameter+0x48>)
 8001628:	2202      	movs	r2, #2
 800162a:	711a      	strb	r2, [r3, #4]
	usart_2_handle.usart_configuration.no_of_stop_bits = USART_STOPBITS_1;
 800162c:	4b0d      	ldr	r3, [pc, #52]	@ (8001664 <uart_2_configure_parameter+0x48>)
 800162e:	2200      	movs	r2, #0
 8001630:	719a      	strb	r2, [r3, #6]
	usart_2_handle.usart_configuration.data_word_length = USART_WORDLEN_8BITS;
 8001632:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <uart_2_configure_parameter+0x48>)
 8001634:	2200      	movs	r2, #0
 8001636:	715a      	strb	r2, [r3, #5]
	usart_2_handle.usart_configuration.baudrate = USART_STD_BAUD_9600;
 8001638:	4b0a      	ldr	r3, [pc, #40]	@ (8001664 <uart_2_configure_parameter+0x48>)
 800163a:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800163e:	609a      	str	r2, [r3, #8]
	usart_2_handle.usart_configuration.parity_control = USART_PARITY_DISABLE;
 8001640:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <uart_2_configure_parameter+0x48>)
 8001642:	2200      	movs	r2, #0
 8001644:	60da      	str	r2, [r3, #12]
	//p_usart_handle->usart_configuration.dma_transmitter_en = USARTx_DMA_TRANSMITTER_EN;
	//p_usart_handle->usart_configuration.dma_receiver_en = USARTx_DMA_RECEIVER_EN;
	usart_2_handle.tx_buffer = &(tx_buffer_data[0]);
 8001646:	4b07      	ldr	r3, [pc, #28]	@ (8001664 <uart_2_configure_parameter+0x48>)
 8001648:	4a08      	ldr	r2, [pc, #32]	@ (800166c <uart_2_configure_parameter+0x50>)
 800164a:	615a      	str	r2, [r3, #20]
	usart_2_handle.rx_buffer = &(rx_buffer_data[0]);
 800164c:	4b05      	ldr	r3, [pc, #20]	@ (8001664 <uart_2_configure_parameter+0x48>)
 800164e:	4a08      	ldr	r2, [pc, #32]	@ (8001670 <uart_2_configure_parameter+0x54>)
 8001650:	619a      	str	r2, [r3, #24]
	usart_2_handle.rx_len = 8;
 8001652:	4b04      	ldr	r3, [pc, #16]	@ (8001664 <uart_2_configure_parameter+0x48>)
 8001654:	2208      	movs	r2, #8
 8001656:	775a      	strb	r2, [r3, #29]
	usart_init(&usart_2_handle);
 8001658:	4802      	ldr	r0, [pc, #8]	@ (8001664 <uart_2_configure_parameter+0x48>)
 800165a:	f000 f837 	bl	80016cc <usart_init>
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000284 	.word	0x20000284
 8001668:	40004400 	.word	0x40004400
 800166c:	2000013c 	.word	0x2000013c
 8001670:	2000018c 	.word	0x2000018c

08001674 <uart_3_configure_parameter>:

void uart_3_configure_parameter(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	usart_3_handle.add_of_usartx = USART3;
 8001678:	4b10      	ldr	r3, [pc, #64]	@ (80016bc <uart_3_configure_parameter+0x48>)
 800167a:	4a11      	ldr	r2, [pc, #68]	@ (80016c0 <uart_3_configure_parameter+0x4c>)
 800167c:	601a      	str	r2, [r3, #0]
	usart_3_handle.usart_configuration.mode = USART_MODE_TXRX;
 800167e:	4b0f      	ldr	r3, [pc, #60]	@ (80016bc <uart_3_configure_parameter+0x48>)
 8001680:	2202      	movs	r2, #2
 8001682:	711a      	strb	r2, [r3, #4]
	usart_3_handle.usart_configuration.no_of_stop_bits = USART_STOPBITS_1;
 8001684:	4b0d      	ldr	r3, [pc, #52]	@ (80016bc <uart_3_configure_parameter+0x48>)
 8001686:	2200      	movs	r2, #0
 8001688:	719a      	strb	r2, [r3, #6]
	usart_3_handle.usart_configuration.data_word_length = USART_WORDLEN_8BITS;
 800168a:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <uart_3_configure_parameter+0x48>)
 800168c:	2200      	movs	r2, #0
 800168e:	715a      	strb	r2, [r3, #5]
	usart_3_handle.usart_configuration.baudrate = USART_STD_BAUD_9600;
 8001690:	4b0a      	ldr	r3, [pc, #40]	@ (80016bc <uart_3_configure_parameter+0x48>)
 8001692:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001696:	609a      	str	r2, [r3, #8]
	usart_3_handle.usart_configuration.parity_control = USART_PARITY_DISABLE;
 8001698:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <uart_3_configure_parameter+0x48>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
	//p_usart_handle->usart_configuration.dma_transmitter_en = USARTx_DMA_TRANSMITTER_EN;
	//p_usart_handle->usart_configuration.dma_receiver_en = USARTx_DMA_RECEIVER_EN;
	usart_3_handle.tx_buffer = &(tx_buffer_data[0]);
 800169e:	4b07      	ldr	r3, [pc, #28]	@ (80016bc <uart_3_configure_parameter+0x48>)
 80016a0:	4a08      	ldr	r2, [pc, #32]	@ (80016c4 <uart_3_configure_parameter+0x50>)
 80016a2:	615a      	str	r2, [r3, #20]
	usart_3_handle.rx_buffer = &(rx_buffer_data[0]);
 80016a4:	4b05      	ldr	r3, [pc, #20]	@ (80016bc <uart_3_configure_parameter+0x48>)
 80016a6:	4a08      	ldr	r2, [pc, #32]	@ (80016c8 <uart_3_configure_parameter+0x54>)
 80016a8:	619a      	str	r2, [r3, #24]
	usart_3_handle.rx_len = 8;
 80016aa:	4b04      	ldr	r3, [pc, #16]	@ (80016bc <uart_3_configure_parameter+0x48>)
 80016ac:	2208      	movs	r2, #8
 80016ae:	775a      	strb	r2, [r3, #29]
	usart_init(&usart_3_handle);
 80016b0:	4802      	ldr	r0, [pc, #8]	@ (80016bc <uart_3_configure_parameter+0x48>)
 80016b2:	f000 f80b 	bl	80016cc <usart_init>
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200002a4 	.word	0x200002a4
 80016c0:	40004800 	.word	0x40004800
 80016c4:	2000013c 	.word	0x2000013c
 80016c8:	2000018c 	.word	0x2000018c

080016cc <usart_init>:

void usart_init(usart_handle *p_usart_handle)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	config_stop_bit(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.no_of_stop_bits);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	799b      	ldrb	r3, [r3, #6]
 80016dc:	4619      	mov	r1, r3
 80016de:	4610      	mov	r0, r2
 80016e0:	f000 f923 	bl	800192a <config_stop_bit>

	config_data_word_len(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.data_word_length);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	795b      	ldrb	r3, [r3, #5]
 80016ec:	4619      	mov	r1, r3
 80016ee:	4610      	mov	r0, r2
 80016f0:	f000 f933 	bl	800195a <config_data_word_len>

	config_parity(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.parity_control);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	4619      	mov	r1, r3
 8001700:	4610      	mov	r0, r2
 8001702:	f000 f93c 	bl	800197e <config_parity>

	config_mode(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.mode);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	791b      	ldrb	r3, [r3, #4]
 800170e:	4619      	mov	r1, r3
 8001710:	4610      	mov	r0, r2
 8001712:	f000 f952 	bl	80019ba <config_mode>

	usart_set_baudrate(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.baudrate);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	4619      	mov	r1, r3
 8001720:	4610      	mov	r0, r2
 8001722:	f000 f81f 	bl	8001764 <usart_set_baudrate>

	usart_dma_mode_en_di(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.dma_transmitter_en);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	7c1b      	ldrb	r3, [r3, #16]
 800172e:	4619      	mov	r1, r3
 8001730:	4610      	mov	r0, r2
 8001732:	f000 fabb 	bl	8001cac <usart_dma_mode_en_di>

	usart_dma_mode_en_di(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.dma_receiver_en);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	7c5b      	ldrb	r3, [r3, #17]
 800173e:	4619      	mov	r1, r3
 8001740:	4610      	mov	r0, r2
 8001742:	f000 fab3 	bl	8001cac <usart_dma_mode_en_di>

	usart_en(p_usart_handle->add_of_usartx);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f000 f8de 	bl	800190c <usart_en>

	//usart_read_interrupt(p_usart_handle->add_of_usartx);

	usart_rx_en(p_usart_handle->add_of_usartx);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f000 fa8b 	bl	8001c70 <usart_rx_en>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <usart_set_baudrate>:

void usart_set_baudrate(usartx_regdef_t *p_usartx,uint32_t baudrate)
{
 8001764:	b5b0      	push	{r4, r5, r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
	 * USARTDIV is an unsigned fixed point number that is coded on the USART_BRR register.
	 */
	float temp,fraction;
	uint32_t mantissa;
	// TO DO: ADD CONDITION FOR CHECKING WHICH UART IT IS BEFORE GETTING THE CLOCK OF THE PERIPHERAL.
	uint32_t pclk = apb_get_clock(APB1); // It gets the Clock source for mentioned APB.
 800176e:	2001      	movs	r0, #1
 8001770:	f7ff fce8 	bl	8001144 <apb_get_clock>
 8001774:	6178      	str	r0, [r7, #20]
	uint32_t div_fraction;
	temp = pclk / (16.0 * baudrate);
 8001776:	6978      	ldr	r0, [r7, #20]
 8001778:	f7fe fef0 	bl	800055c <__aeabi_ui2d>
 800177c:	4604      	mov	r4, r0
 800177e:	460d      	mov	r5, r1
 8001780:	6838      	ldr	r0, [r7, #0]
 8001782:	f7fe feeb 	bl	800055c <__aeabi_ui2d>
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	4b26      	ldr	r3, [pc, #152]	@ (8001824 <usart_set_baudrate+0xc0>)
 800178c:	f7fe ff60 	bl	8000650 <__aeabi_dmul>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4620      	mov	r0, r4
 8001796:	4629      	mov	r1, r5
 8001798:	f7ff f884 	bl	80008a4 <__aeabi_ddiv>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	f7ff f966 	bl	8000a74 <__aeabi_d2f>
 80017a8:	4603      	mov	r3, r0
 80017aa:	613b      	str	r3, [r7, #16]
	fraction = temp - (int)temp;
 80017ac:	6938      	ldr	r0, [r7, #16]
 80017ae:	f7ff fb35 	bl	8000e1c <__aeabi_f2iz>
 80017b2:	4603      	mov	r3, r0
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fa67 	bl	8000c88 <__aeabi_i2f>
 80017ba:	4603      	mov	r3, r0
 80017bc:	4619      	mov	r1, r3
 80017be:	6938      	ldr	r0, [r7, #16]
 80017c0:	f7ff f9ac 	bl	8000b1c <__aeabi_fsub>
 80017c4:	4603      	mov	r3, r0
 80017c6:	60fb      	str	r3, [r7, #12]
	mantissa = temp - fraction;
 80017c8:	68f9      	ldr	r1, [r7, #12]
 80017ca:	6938      	ldr	r0, [r7, #16]
 80017cc:	f7ff f9a6 	bl	8000b1c <__aeabi_fsub>
 80017d0:	4603      	mov	r3, r0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fb48 	bl	8000e68 <__aeabi_f2uiz>
 80017d8:	4603      	mov	r3, r0
 80017da:	61fb      	str	r3, [r7, #28]

	div_fraction = round_off((16 * fraction)); // Function to round off the decimal number
 80017dc:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 80017e0:	68f8      	ldr	r0, [r7, #12]
 80017e2:	f7fe fcc5 	bl	8000170 <__aeabi_fmul>
 80017e6:	4603      	mov	r3, r0
 80017e8:	4618      	mov	r0, r3
 80017ea:	f000 faad 	bl	8001d48 <round_off>
 80017ee:	61b8      	str	r0, [r7, #24]
	if (div_fraction > 15)
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	2b0f      	cmp	r3, #15
 80017f4:	d904      	bls.n	8001800 <usart_set_baudrate+0x9c>
	{
		div_fraction = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61bb      	str	r3, [r7, #24]
		mantissa += 1;
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3301      	adds	r3, #1
 80017fe:	61fb      	str	r3, [r7, #28]
	}
	p_usartx->BRR |= (mantissa << 4);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	011b      	lsls	r3, r3, #4
 8001808:	431a      	orrs	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	609a      	str	r2, [r3, #8]
	p_usartx->BRR |= div_fraction;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	431a      	orrs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	609a      	str	r2, [r3, #8]
}
 800181a:	bf00      	nop
 800181c:	3720      	adds	r7, #32
 800181e:	46bd      	mov	sp, r7
 8001820:	bdb0      	pop	{r4, r5, r7, pc}
 8001822:	bf00      	nop
 8001824:	40300000 	.word	0x40300000

08001828 <uart_transmit>:

void uart_transmit(usart_handle *p_usart_handle,uint8_t* p_data, uint32_t len)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
	p_usart_handle->tx_buffer = p_data;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	615a      	str	r2, [r3, #20]
	p_usart_handle->tx_len = len;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	b2da      	uxtb	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	771a      	strb	r2, [r3, #28]
	usart_write_polling(p_usart_handle);
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f000 f804 	bl	8001850 <usart_write_polling>
}
 8001848:	bf00      	nop
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <usart_write_polling>:
{
	usart_2_handle.tx_buffer = (uint8_t*)&num;
	usart_write_polling(&usart_2_handle);
}
void usart_write_polling(usart_handle *p_usart_handle)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]

	//p_usart_handle->tx_buffer = tx_buffer_data;
	//usart_tx_en(p_usart_handle->add_of_usartx);
	//while (*p_usart_handle->tx_buffer != '\0')
	while ((p_usart_handle->tx_len)--)
 8001858:	e03d      	b.n	80018d6 <usart_write_polling+0x86>
	{
		// 8 bit data len
		// 9 bit data len
		while ( get_flag_status(p_usart_handle->add_of_usartx,USART_FLAG_TXE) == 0);
 800185a:	bf00      	nop
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2180      	movs	r1, #128	@ 0x80
 8001862:	4618      	mov	r0, r3
 8001864:	f000 f8d3 	bl	8001a0e <get_flag_status>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f6      	beq.n	800185c <usart_write_polling+0xc>

		if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_9BITS)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	795b      	ldrb	r3, [r3, #5]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d120      	bne.n	80018b8 <usart_write_polling+0x68>
		{
			// IF Parity DISABLED
			if (p_usart_handle->usart_configuration.parity_control == USART_PARITY_DISABLE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d110      	bne.n	80018a0 <usart_write_polling+0x50>
			{
				//*pData = buffer;
				p_usart_handle->add_of_usartx->DR = (*p_usart_handle->tx_buffer & (uint16_t)0x1FF);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	781a      	ldrb	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
				p_usart_handle->tx_buffer++;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	615a      	str	r2, [r3, #20]
				p_usart_handle->tx_buffer++;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	1c5a      	adds	r2, r3, #1
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	615a      	str	r2, [r3, #20]
 800189e:	e01a      	b.n	80018d6 <usart_write_polling+0x86>
			}
			// IF Parity ENABLED
			else
			{
				p_usart_handle->add_of_usartx->DR = (*p_usart_handle->tx_buffer & (uint8_t)0xFF);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	781a      	ldrb	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
				p_usart_handle->tx_buffer++;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	1c5a      	adds	r2, r3, #1
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	615a      	str	r2, [r3, #20]
 80018b6:	e00e      	b.n	80018d6 <usart_write_polling+0x86>
			}
		}
		else if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_8BITS)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	795b      	ldrb	r3, [r3, #5]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d10a      	bne.n	80018d6 <usart_write_polling+0x86>
		{
			//p_usart_handle->add_of_usartx->DR = (*buffer & (uint8_t)0xFF);
			//temp_chara = (*buffer);
			// printable character anyhoe is 7-bits, So it doesnt matter if we handle the parity control.
			p_usart_handle->add_of_usartx->DR = *p_usart_handle->tx_buffer;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	781a      	ldrb	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
			p_usart_handle->tx_buffer++;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	1c5a      	adds	r2, r3, #1
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	615a      	str	r2, [r3, #20]
	while ((p_usart_handle->tx_len)--)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	7f1b      	ldrb	r3, [r3, #28]
 80018da:	1e5a      	subs	r2, r3, #1
 80018dc:	b2d1      	uxtb	r1, r2
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	7711      	strb	r1, [r2, #28]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1b9      	bne.n	800185a <usart_write_polling+0xa>



	}
	// Wait till TC Got completed
	while (get_flag_status(p_usart_handle->add_of_usartx,USART_FLAG_TC) != 1);
 80018e6:	bf00      	nop
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2140      	movs	r1, #64	@ 0x40
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 f88d 	bl	8001a0e <get_flag_status>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d1f6      	bne.n	80018e8 <usart_write_polling+0x98>
	usart_tx_di(p_usart_handle->add_of_usartx);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 f9c5 	bl	8001c8e <usart_tx_di>
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <usart_en>:
		}
	}
}

void usart_en(usartx_regdef_t* p_usartx)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	p_usartx->CR1 |= (1 << USART_CR1_EN);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	60da      	str	r2, [r3, #12]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr

0800192a <config_stop_bit>:

void config_stop_bit(usartx_regdef_t* p_usartx, uint8_t stop_bits)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	460b      	mov	r3, r1
 8001934:	70fb      	strb	r3, [r7, #3]
	p_usartx->CR2 &=  ~(STOP_BIT_MASK());
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	611a      	str	r2, [r3, #16]
	p_usartx->CR2 |=  (stop_bits << USART_CR2_STOP_BIT);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	691a      	ldr	r2, [r3, #16]
 8001946:	78fb      	ldrb	r3, [r7, #3]
 8001948:	031b      	lsls	r3, r3, #12
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	611a      	str	r2, [r3, #16]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr

0800195a <config_data_word_len>:

void config_data_word_len(usartx_regdef_t* p_usartx, uint8_t data_word_len)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	460b      	mov	r3, r1
 8001964:	70fb      	strb	r3, [r7, #3]
	p_usartx->CR1 |= (data_word_len << USART_CR1_DATA_WORD_LEN);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68da      	ldr	r2, [r3, #12]
 800196a:	78fb      	ldrb	r3, [r7, #3]
 800196c:	031b      	lsls	r3, r3, #12
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	60da      	str	r2, [r3, #12]
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr

0800197e <config_parity>:

void config_parity(usartx_regdef_t* p_usartx, uint8_t parity_type)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	460b      	mov	r3, r1
 8001988:	70fb      	strb	r3, [r7, #3]
	if (parity_type == USART_PARITY_EN_EVEN)
 800198a:	78fb      	ldrb	r3, [r7, #3]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d106      	bne.n	800199e <config_parity+0x20>
	{
		p_usartx->CR1 |= (1 << USART_CR1_PARITY_CONTROL_EN); // Enabled the Parity Control, Even Parity Bydefault Selected.
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	60da      	str	r2, [r3, #12]
	}
	else if(parity_type == USART_PARITY_EN_ODD)
	{
		p_usartx->CR1 |= ( (1 << USART_CR1_PARITY_CONTROL_EN) | (1 << USART_CR1_PARITY_SELECT) );
	}
}
 800199c:	e008      	b.n	80019b0 <config_parity+0x32>
	else if(parity_type == USART_PARITY_EN_ODD)
 800199e:	78fb      	ldrb	r3, [r7, #3]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d105      	bne.n	80019b0 <config_parity+0x32>
		p_usartx->CR1 |= ( (1 << USART_CR1_PARITY_CONTROL_EN) | (1 << USART_CR1_PARITY_SELECT) );
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	f443 62c0 	orr.w	r2, r3, #1536	@ 0x600
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	60da      	str	r2, [r3, #12]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <config_mode>:

void config_mode(usartx_regdef_t* p_usartx, uint8_t mode)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	460b      	mov	r3, r1
 80019c4:	70fb      	strb	r3, [r7, #3]
	switch (mode)
 80019c6:	78fb      	ldrb	r3, [r7, #3]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d014      	beq.n	80019f6 <config_mode+0x3c>
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	dc19      	bgt.n	8001a04 <config_mode+0x4a>
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d002      	beq.n	80019da <config_mode+0x20>
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d007      	beq.n	80019e8 <config_mode+0x2e>
		p_usartx->CR1 |= (1 << USART_CR1_RX_EN);
		break;
	case USART_MODE_TXRX:
		p_usartx->CR1 |= ( (1 << USART_CR1_TX_EN) | (1 << USART_CR1_RX_EN) );
	}
}
 80019d8:	e014      	b.n	8001a04 <config_mode+0x4a>
		p_usartx->CR1 |= (1 << USART_CR1_TX_EN);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	f043 0208 	orr.w	r2, r3, #8
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	60da      	str	r2, [r3, #12]
		break;
 80019e6:	e00d      	b.n	8001a04 <config_mode+0x4a>
		p_usartx->CR1 |= (1 << USART_CR1_RX_EN);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	f043 0204 	orr.w	r2, r3, #4
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	60da      	str	r2, [r3, #12]
		break;
 80019f4:	e006      	b.n	8001a04 <config_mode+0x4a>
		p_usartx->CR1 |= ( (1 << USART_CR1_TX_EN) | (1 << USART_CR1_RX_EN) );
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	f043 020c 	orr.w	r2, r3, #12
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	60da      	str	r2, [r3, #12]
}
 8001a02:	e7ff      	b.n	8001a04 <config_mode+0x4a>
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr

08001a0e <get_flag_status>:

uint8_t get_flag_status(usartx_regdef_t *p_usartx, uint8_t flag)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	460b      	mov	r3, r1
 8001a18:	70fb      	strb	r3, [r7, #3]
	if (p_usartx->SR & flag)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	78fb      	ldrb	r3, [r7, #3]
 8001a20:	4013      	ands	r3, r2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <get_flag_status+0x1c>
	{
		return 1;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <get_flag_status+0x1e>
	}
	else
	{
		return 0;
 8001a2a:	2300      	movs	r3, #0
	}
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr
	...

08001a38 <usart_interrupt_handling>:
{
	callback_rx_data = callback;
}

void usart_interrupt_handling(usart_handle *p_usart_handle)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	if (get_flag_status(p_usart_handle->add_of_usartx,USART_FLAG_TC) == 1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2140      	movs	r1, #64	@ 0x40
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff ffe1 	bl	8001a0e <get_flag_status>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d128      	bne.n	8001aa4 <usart_interrupt_handling+0x6c>
	{
		tc_buffer[tc_buffer_index++] = *(p_usart_handle->tx_buffer);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	695a      	ldr	r2, [r3, #20]
 8001a56:	4b7e      	ldr	r3, [pc, #504]	@ (8001c50 <usart_interrupt_handling+0x218>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	1c59      	adds	r1, r3, #1
 8001a5c:	b2c8      	uxtb	r0, r1
 8001a5e:	497c      	ldr	r1, [pc, #496]	@ (8001c50 <usart_interrupt_handling+0x218>)
 8001a60:	7008      	strb	r0, [r1, #0]
 8001a62:	4619      	mov	r1, r3
 8001a64:	7812      	ldrb	r2, [r2, #0]
 8001a66:	4b7b      	ldr	r3, [pc, #492]	@ (8001c54 <usart_interrupt_handling+0x21c>)
 8001a68:	545a      	strb	r2, [r3, r1]
		if (*(p_usart_handle->tx_buffer) == '\0')
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d117      	bne.n	8001aa4 <usart_interrupt_handling+0x6c>
		{
			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_TXE_INTEERUPT_EN);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a82:	60da      	str	r2, [r3, #12]
			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_TC_INTERRUPT_EN);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a92:	60da      	str	r2, [r3, #12]
			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_TX_EN);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 0208 	bic.w	r2, r2, #8
 8001aa2:	60da      	str	r2, [r3, #12]
		}
	}
	if (get_flag_status(p_usart_handle->add_of_usartx,USART_FLAG_TXE) == 1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2180      	movs	r1, #128	@ 0x80
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff ffaf 	bl	8001a0e <get_flag_status>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d158      	bne.n	8001b68 <usart_interrupt_handling+0x130>
	{
		txe_counter++;
 8001ab6:	4b68      	ldr	r3, [pc, #416]	@ (8001c58 <usart_interrupt_handling+0x220>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	3301      	adds	r3, #1
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4b66      	ldr	r3, [pc, #408]	@ (8001c58 <usart_interrupt_handling+0x220>)
 8001ac0:	701a      	strb	r2, [r3, #0]
		txe_buffer[txe_buffer_index++] = *(p_usart_handle->tx_buffer);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	4b65      	ldr	r3, [pc, #404]	@ (8001c5c <usart_interrupt_handling+0x224>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	1c59      	adds	r1, r3, #1
 8001acc:	b2c8      	uxtb	r0, r1
 8001ace:	4963      	ldr	r1, [pc, #396]	@ (8001c5c <usart_interrupt_handling+0x224>)
 8001ad0:	7008      	strb	r0, [r1, #0]
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	7812      	ldrb	r2, [r2, #0]
 8001ad6:	4b62      	ldr	r3, [pc, #392]	@ (8001c60 <usart_interrupt_handling+0x228>)
 8001ad8:	545a      	strb	r2, [r3, r1]
		if (*(p_usart_handle->tx_buffer) != '\0')
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d039      	beq.n	8001b58 <usart_interrupt_handling+0x120>
		{
			if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_9BITS)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	795b      	ldrb	r3, [r3, #5]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d125      	bne.n	8001b38 <usart_interrupt_handling+0x100>
			{
				// IF Parity DISABLED
				if (p_usart_handle->usart_configuration.parity_control == USART_PARITY_DISABLE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d115      	bne.n	8001b20 <usart_interrupt_handling+0xe8>
				{
					uint16_t *p_data = (uint16_t*)p_usart_handle->tx_buffer;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	60fb      	str	r3, [r7, #12]
					p_usart_handle->add_of_usartx->DR = (*(p_data) & (uint16_t)0x1FF);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b08:	605a      	str	r2, [r3, #4]
					p_usart_handle->tx_buffer++;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	1c5a      	adds	r2, r3, #1
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	615a      	str	r2, [r3, #20]
					p_usart_handle->tx_buffer++;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	1c5a      	adds	r2, r3, #1
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	615a      	str	r2, [r3, #20]
 8001b1e:	e023      	b.n	8001b68 <usart_interrupt_handling+0x130>
				}
				// IF Parity ENABLED
				else
				{
					p_usart_handle->add_of_usartx->DR = (*(p_usart_handle->tx_buffer) & (uint8_t)0xFF);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	781a      	ldrb	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
					p_usart_handle->tx_buffer++;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	615a      	str	r2, [r3, #20]
 8001b36:	e017      	b.n	8001b68 <usart_interrupt_handling+0x130>
				}
			}
			else if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_8BITS)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	795b      	ldrb	r3, [r3, #5]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d113      	bne.n	8001b68 <usart_interrupt_handling+0x130>
			{
				p_usart_handle->add_of_usartx->DR = (*p_usart_handle->tx_buffer);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	781a      	ldrb	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
				p_usart_handle->tx_buffer++;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	615a      	str	r2, [r3, #20]
 8001b56:	e007      	b.n	8001b68 <usart_interrupt_handling+0x130>
			}
		}
		else
		{
			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_TXE_INTEERUPT_EN);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b66:	60da      	str	r2, [r3, #12]
		}
	}
	if (get_flag_status(p_usart_handle->add_of_usartx,USART_FLAG_RXNE) == 1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2120      	movs	r1, #32
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff ff4d 	bl	8001a0e <get_flag_status>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d166      	bne.n	8001c48 <usart_interrupt_handling+0x210>
	{
		count_interrupt_enterred = count_interrupt_enterred + 1;
 8001b7a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c64 <usart_interrupt_handling+0x22c>)
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	4b38      	ldr	r3, [pc, #224]	@ (8001c64 <usart_interrupt_handling+0x22c>)
 8001b84:	801a      	strh	r2, [r3, #0]

			if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_9BITS)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	795b      	ldrb	r3, [r3, #5]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d125      	bne.n	8001bda <usart_interrupt_handling+0x1a2>
			{
				if (p_usart_handle->usart_configuration.parity_control == USART_PARITY_DISABLE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d114      	bne.n	8001bc0 <usart_interrupt_handling+0x188>
				{
					//*((uint16_t*)(p_usart_handle->rx_buffer)) = ((uint16_t*)(p_usart_handle->add_of_usartx->DR & 0x1FF));
					*((uint16_t*)(p_usart_handle->rx_buffer)) = (p_usart_handle->add_of_usartx->DR & 0x1FF);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ba6:	b292      	uxth	r2, r2
 8001ba8:	801a      	strh	r2, [r3, #0]
					p_usart_handle->rx_buffer++;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	619a      	str	r2, [r3, #24]
					p_usart_handle->rx_buffer++;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	619a      	str	r2, [r3, #24]
 8001bbe:	e033      	b.n	8001c28 <usart_interrupt_handling+0x1f0>
				}
				else
				{
					//*(p_usart_handle->rx_buffer) = ((uint8_t*)(p_usart_handle->add_of_usartx->DR & 0xFF));
					*(p_usart_handle->rx_buffer) = (p_usart_handle->add_of_usartx->DR & 0xFF);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	701a      	strb	r2, [r3, #0]
					p_usart_handle->rx_buffer++;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	619a      	str	r2, [r3, #24]
 8001bd8:	e026      	b.n	8001c28 <usart_interrupt_handling+0x1f0>
				}
			}
			else if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_8BITS)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	795b      	ldrb	r3, [r3, #5]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d122      	bne.n	8001c28 <usart_interrupt_handling+0x1f0>
			{
				if (p_usart_handle->usart_configuration.parity_control == USART_PARITY_DISABLE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d112      	bne.n	8001c10 <usart_interrupt_handling+0x1d8>
				{
					//*(p_usart_handle->rx_buffer) = ((uint8_t*)(p_usart_handle->add_of_usartx->DR & 0xFF));
					*(p_usart_handle->rx_buffer) = (p_usart_handle->add_of_usartx->DR & 0xFF);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	701a      	strb	r2, [r3, #0]
					p_usart_handle->rx_buffer++;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	619a      	str	r2, [r3, #24]
					p_usart_handle->rx_len--;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	7f5b      	ldrb	r3, [r3, #29]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	775a      	strb	r2, [r3, #29]
 8001c0e:	e00b      	b.n	8001c28 <usart_interrupt_handling+0x1f0>
				}
				else
				{
					//*(p_usart_handle->rx_buffer) = ((uint8_t*)(p_usart_handle->add_of_usartx->DR & 0xFF));
					*(p_usart_handle->rx_buffer) = (p_usart_handle->add_of_usartx->DR & 0xFF);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	701a      	strb	r2, [r3, #0]
					p_usart_handle->rx_buffer++;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	619a      	str	r2, [r3, #24]
				}
			}

			if (p_usart_handle->rx_len == 0)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	7f5b      	ldrb	r3, [r3, #29]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10b      	bne.n	8001c48 <usart_interrupt_handling+0x210>
			{
				p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_RXNE_INTERRUPT_EN);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0220 	bic.w	r2, r2, #32
 8001c3e:	60da      	str	r2, [r3, #12]
				callback_rx_data(rx_buffer_data);
 8001c40:	4b09      	ldr	r3, [pc, #36]	@ (8001c68 <usart_interrupt_handling+0x230>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4809      	ldr	r0, [pc, #36]	@ (8001c6c <usart_interrupt_handling+0x234>)
 8001c46:	4798      	blx	r3
//		{
//			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_RXNE_INTERRUPT_EN);
//			callback_rx_data(rx_buffer_data);
//		}

}
 8001c48:	bf00      	nop
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	2000022c 	.word	0x2000022c
 8001c54:	200001dc 	.word	0x200001dc
 8001c58:	200002c6 	.word	0x200002c6
 8001c5c:	20000280 	.word	0x20000280
 8001c60:	20000230 	.word	0x20000230
 8001c64:	200002c4 	.word	0x200002c4
 8001c68:	200002c8 	.word	0x200002c8
 8001c6c:	2000018c 	.word	0x2000018c

08001c70 <usart_rx_en>:
{
	p_usartx->CR1 |= (1 << USART_CR1_TX_EN);
}

void usart_rx_en(usartx_regdef_t *p_usartx)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	p_usartx->CR1 |= (1 << USART_CR1_RX_EN);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	f043 0204 	orr.w	r2, r3, #4
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	60da      	str	r2, [r3, #12]
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr

08001c8e <usart_tx_di>:

void usart_tx_di(usartx_regdef_t *p_usartx)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
	p_usartx->CR1 &= ~(1 << USART_CR1_TX_EN);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	f023 0208 	bic.w	r2, r3, #8
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	60da      	str	r2, [r3, #12]
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <usart_dma_mode_en_di>:
{
	p_usartx->CR1 &= ~(1 << USART_CR1_RX_EN);
}

void usart_dma_mode_en_di(usartx_regdef_t *p_usartx,uint8_t en_di)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	70fb      	strb	r3, [r7, #3]
	switch(en_di){
 8001cb8:	78fb      	ldrb	r3, [r7, #3]
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d826      	bhi.n	8001d0c <usart_dma_mode_en_di+0x60>
 8001cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8001cc4 <usart_dma_mode_en_di+0x18>)
 8001cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc4:	08001cd5 	.word	0x08001cd5
 8001cc8:	08001ce3 	.word	0x08001ce3
 8001ccc:	08001cf1 	.word	0x08001cf1
 8001cd0:	08001cff 	.word	0x08001cff
	case USARTx_DMA_TRANSMITTER_EN:
		p_usartx->CR3 |= USARTx_DMA_TRANSMITTER_EN_POS;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	615a      	str	r2, [r3, #20]
		break;
 8001ce0:	e014      	b.n	8001d0c <usart_dma_mode_en_di+0x60>
	case USARTx_DMA_TRANSMITTER_DI:
		p_usartx->CR3 &= USARTx_DMA_TRANSMITTER_DI_POS;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	615a      	str	r2, [r3, #20]
		break;
 8001cee:	e00d      	b.n	8001d0c <usart_dma_mode_en_di+0x60>
	case USARTx_DMA_RECEIVER_EN:
		p_usartx->CR3 |= USARTx_DMA_RECEIVER_EN_POS;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	615a      	str	r2, [r3, #20]
		break;
 8001cfc:	e006      	b.n	8001d0c <usart_dma_mode_en_di+0x60>
	case USARTx_DMA_RECEIVER_DI:
		p_usartx->CR3 &= USARTx_DMA_RECEIVER_DI_POS;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	615a      	str	r2, [r3, #20]
		break;
 8001d0a:	bf00      	nop
	}
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop

08001d18 <USART2_IRQHandler>:
	dma_channel_en(DMA1,7,1);


}
void USART2_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
	usart_interrupt_handling(&usart_2_handle);
 8001d1c:	4802      	ldr	r0, [pc, #8]	@ (8001d28 <USART2_IRQHandler+0x10>)
 8001d1e:	f7ff fe8b 	bl	8001a38 <usart_interrupt_handling>
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000284 	.word	0x20000284

08001d2c <mcu_init>:
 *      Author: Prashant Ajabe
 */
#include "common.h"

void mcu_init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
	clock_init();
 8001d30:	f7ff f8ba 	bl	8000ea8 <clock_init>
	io_init();
 8001d34:	f7ff faf0 	bl	8001318 <io_init>

	uart_2_configure_parameter();
 8001d38:	f7ff fc70 	bl	800161c <uart_2_configure_parameter>
	uart_3_configure_parameter();
 8001d3c:	f7ff fc9a 	bl	8001674 <uart_3_configure_parameter>

	systick_init();
 8001d40:	f7ff fc30 	bl	80015a4 <systick_init>

}
 8001d44:	bf00      	nop
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <round_off>:

uint32_t round_off(float number)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
	float fraction;
	uint8_t carry;
	uint32_t realPart = (int)number;
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff f863 	bl	8000e1c <__aeabi_f2iz>
 8001d56:	4603      	mov	r3, r0
 8001d58:	613b      	str	r3, [r7, #16]
	fraction = number - (int)number;
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff f85e 	bl	8000e1c <__aeabi_f2iz>
 8001d60:	4603      	mov	r3, r0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe ff90 	bl	8000c88 <__aeabi_i2f>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7fe fed5 	bl	8000b1c <__aeabi_fsub>
 8001d72:	4603      	mov	r3, r0
 8001d74:	60fb      	str	r3, [r7, #12]
	if (fraction < 0.50)
 8001d76:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f7ff f826 	bl	8000dcc <__aeabi_fcmplt>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d002      	beq.n	8001d8c <round_off+0x44>
	{
		carry = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	75fb      	strb	r3, [r7, #23]
 8001d8a:	e009      	b.n	8001da0 <round_off+0x58>
	}
	else if (fraction >= 0.50)
 8001d8c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f7ff f82f 	bl	8000df4 <__aeabi_fcmpge>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <round_off+0x58>
	{
		carry = 1;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	75fb      	strb	r3, [r7, #23]
	}

	return (realPart + (uint32_t)carry);
 8001da0:	7dfa      	ldrb	r2, [r7, #23]
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4413      	add	r3, r2
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <print_msg>:


void print_msg(char* format,...)
{
 8001db0:	b40f      	push	{r0, r1, r2, r3}
 8001db2:	b5b0      	push	{r4, r5, r7, lr}
 8001db4:	b09c      	sub	sp, #112	@ 0x70
 8001db6:	af06      	add	r7, sp, #24
//	vsprintf(str,format,args);
//	usart_2_handle.tx_buffer = &(str);
//	usart_write_polling(&usart_2_handle);

	char str[80];
	uint8_t  length = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	memory_set(&str,'\0',80);
 8001dbe:	1d3b      	adds	r3, r7, #4
 8001dc0:	2250      	movs	r2, #80	@ 0x50
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 f829 	bl	8001e1c <memory_set>
	va_list args;
	va_start(args,format);
 8001dca:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001dce:	603b      	str	r3, [r7, #0]
	vsprintf(str,format,args);
 8001dd0:	1d3b      	adds	r3, r7, #4
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 f91a 	bl	8002010 <vsiprintf>
	length = str_len(&str);
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 f836 	bl	8001e50 <str_len>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	uart_transmit(usart_2_handle,&str,length);
 8001dea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001dee:	4c0a      	ldr	r4, [pc, #40]	@ (8001e18 <print_msg+0x68>)
 8001df0:	9305      	str	r3, [sp, #20]
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	9304      	str	r3, [sp, #16]
 8001df6:	466d      	mov	r5, sp
 8001df8:	f104 0310 	add.w	r3, r4, #16
 8001dfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dfe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001e02:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e06:	f7ff fd0f 	bl	8001828 <uart_transmit>

}
 8001e0a:	bf00      	nop
 8001e0c:	3758      	adds	r7, #88	@ 0x58
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001e14:	b004      	add	sp, #16
 8001e16:	4770      	bx	lr
 8001e18:	20000284 	.word	0x20000284

08001e1c <memory_set>:
	uart_transmit(usart_3_handle,&str,length);

}

void memory_set(void* ptr,int value, int num)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
	unsigned char* p = (unsigned char*)ptr;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	617b      	str	r3, [r7, #20]
	while(num--)
 8001e2c:	e005      	b.n	8001e3a <memory_set+0x1e>
	{
		*p++ = (unsigned int)value;
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	1c5a      	adds	r2, r3, #1
 8001e32:	617a      	str	r2, [r7, #20]
 8001e34:	68ba      	ldr	r2, [r7, #8]
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	701a      	strb	r2, [r3, #0]
	while(num--)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	1e5a      	subs	r2, r3, #1
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1f4      	bne.n	8001e2e <memory_set+0x12>
	}

}
 8001e44:	bf00      	nop
 8001e46:	bf00      	nop
 8001e48:	371c      	adds	r7, #28
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <str_len>:

uint8_t str_len(uint8_t* p_data)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
	uint8_t length;
	while(*p_data++ != '\0')
 8001e58:	e002      	b.n	8001e60 <str_len+0x10>
		++length;
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
	while(*p_data++ != '\0')
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	1c5a      	adds	r2, r3, #1
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1f6      	bne.n	8001e5a <str_len+0xa>
	return length;
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr

08001e78 <jump_to_user_app>:

#include "app.h"

uint8_t buffer[BUFF_SIZE];
void jump_to_user_app(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
	uint32_t reset_handler_addr;
	uint32_t msp_value;
	void(*app_reset_handler)(void);

	msp_value = *(volatile uint32_t*)USER_APPLICATION_BASE_ADDR;
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb8 <jump_to_user_app+0x40>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	60fb      	str	r3, [r7, #12]
	print_msg("application msp: %x \r\n",msp_value);
 8001e84:	68f9      	ldr	r1, [r7, #12]
 8001e86:	480d      	ldr	r0, [pc, #52]	@ (8001ebc <jump_to_user_app+0x44>)
 8001e88:	f7ff ff92 	bl	8001db0 <print_msg>
	set_msp(msp_value);
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 f81d 	bl	8001ecc <set_msp>

	reset_handler_addr = *(volatile uint32_t*)(USER_APPLICATION_BASE_ADDR + 4);
 8001e92:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec0 <jump_to_user_app+0x48>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	60bb      	str	r3, [r7, #8]
	print_msg("reset handler addr: %x \r\n",reset_handler_addr);
 8001e98:	68b9      	ldr	r1, [r7, #8]
 8001e9a:	480a      	ldr	r0, [pc, #40]	@ (8001ec4 <jump_to_user_app+0x4c>)
 8001e9c:	f7ff ff88 	bl	8001db0 <print_msg>
	app_reset_handler = (void(*)(void))reset_handler_addr;
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	607b      	str	r3, [r7, #4]

	SCB->VTOR = USER_APPLICATION_BASE_ADDR;
 8001ea4:	4b08      	ldr	r3, [pc, #32]	@ (8001ec8 <jump_to_user_app+0x50>)
 8001ea6:	4a04      	ldr	r2, [pc, #16]	@ (8001eb8 <jump_to_user_app+0x40>)
 8001ea8:	609a      	str	r2, [r3, #8]

	app_reset_handler();
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4798      	blx	r3
}
 8001eae:	bf00      	nop
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	08004000 	.word	0x08004000
 8001ebc:	0800294c 	.word	0x0800294c
 8001ec0:	08004004 	.word	0x08004004
 8001ec4:	08002964 	.word	0x08002964
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <set_msp>:

void set_msp(uint32_t msp_value)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
	__asm volatile("MSR msp,%0"::"r"(msp_value));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f383 8808 	msr	MSP, r3
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <main>:


void jump_to_user_app(void);
void set_msp(uint32_t msp_value);
int main(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0

	mcu_init();
 8001eea:	f7ff ff1f 	bl	8001d2c <mcu_init>

	/* Loop forever */
	while(1)
	{
		if (io_get_in(PUSH_BUTTON) == GPIO_PIN_RESET)
 8001eee:	2010      	movs	r0, #16
 8001ef0:	f7ff fb0e 	bl	8001510 <io_get_in>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10d      	bne.n	8001f16 <main+0x32>
		{
			print_msg("Welcome to Bootloader \r\n");
 8001efa:	4808      	ldr	r0, [pc, #32]	@ (8001f1c <main+0x38>)
 8001efc:	f7ff ff58 	bl	8001db0 <print_msg>
			for (uint32_t i = 0; i < 100000;i++);
 8001f00:	2300      	movs	r3, #0
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	e002      	b.n	8001f0c <main+0x28>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a04      	ldr	r2, [pc, #16]	@ (8001f20 <main+0x3c>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d9f8      	bls.n	8001f06 <main+0x22>
 8001f14:	e7eb      	b.n	8001eee <main+0xa>
		}
		else
		{
			jump_to_user_app();
 8001f16:	f7ff ffaf 	bl	8001e78 <jump_to_user_app>
		if (io_get_in(PUSH_BUTTON) == GPIO_PIN_RESET)
 8001f1a:	e7e8      	b.n	8001eee <main+0xa>
 8001f1c:	08002980 	.word	0x08002980
 8001f20:	0001869f 	.word	0x0001869f

08001f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f2c:	4a14      	ldr	r2, [pc, #80]	@ (8001f80 <_sbrk+0x5c>)
 8001f2e:	4b15      	ldr	r3, [pc, #84]	@ (8001f84 <_sbrk+0x60>)
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f38:	4b13      	ldr	r3, [pc, #76]	@ (8001f88 <_sbrk+0x64>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d102      	bne.n	8001f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f40:	4b11      	ldr	r3, [pc, #68]	@ (8001f88 <_sbrk+0x64>)
 8001f42:	4a12      	ldr	r2, [pc, #72]	@ (8001f8c <_sbrk+0x68>)
 8001f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f46:	4b10      	ldr	r3, [pc, #64]	@ (8001f88 <_sbrk+0x64>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d207      	bcs.n	8001f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f54:	f000 f866 	bl	8002024 <__errno>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	220c      	movs	r2, #12
 8001f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f62:	e009      	b.n	8001f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f64:	4b08      	ldr	r3, [pc, #32]	@ (8001f88 <_sbrk+0x64>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f6a:	4b07      	ldr	r3, [pc, #28]	@ (8001f88 <_sbrk+0x64>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4413      	add	r3, r2
 8001f72:	4a05      	ldr	r2, [pc, #20]	@ (8001f88 <_sbrk+0x64>)
 8001f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f76:	68fb      	ldr	r3, [r7, #12]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20005000 	.word	0x20005000
 8001f84:	00000400 	.word	0x00000400
 8001f88:	200002cc 	.word	0x200002cc
 8001f8c:	20000418 	.word	0x20000418

08001f90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f90:	480d      	ldr	r0, [pc, #52]	@ (8001fc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f92:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f94:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f98:	480c      	ldr	r0, [pc, #48]	@ (8001fcc <LoopForever+0x6>)
  ldr r1, =_edata
 8001f9a:	490d      	ldr	r1, [pc, #52]	@ (8001fd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fd4 <LoopForever+0xe>)
  movs r3, #0
 8001f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa0:	e002      	b.n	8001fa8 <LoopCopyDataInit>

08001fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fa6:	3304      	adds	r3, #4

08001fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fac:	d3f9      	bcc.n	8001fa2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fae:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fb0:	4c0a      	ldr	r4, [pc, #40]	@ (8001fdc <LoopForever+0x16>)
  movs r3, #0
 8001fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb4:	e001      	b.n	8001fba <LoopFillZerobss>

08001fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb8:	3204      	adds	r2, #4

08001fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fbc:	d3fb      	bcc.n	8001fb6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001fbe:	f000 f837 	bl	8002030 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fc2:	f7ff ff8f 	bl	8001ee4 <main>

08001fc6 <LoopForever>:

LoopForever:
  b LoopForever
 8001fc6:	e7fe      	b.n	8001fc6 <LoopForever>
  ldr   r0, =_estack
 8001fc8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd0:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8001fd4:	080029d4 	.word	0x080029d4
  ldr r2, =_sbss
 8001fd8:	20000114 	.word	0x20000114
  ldr r4, =_ebss
 8001fdc:	20000418 	.word	0x20000418

08001fe0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fe0:	e7fe      	b.n	8001fe0 <ADC1_2_IRQHandler>
	...

08001fe4 <_vsiprintf_r>:
 8001fe4:	b500      	push	{lr}
 8001fe6:	b09b      	sub	sp, #108	@ 0x6c
 8001fe8:	9100      	str	r1, [sp, #0]
 8001fea:	9104      	str	r1, [sp, #16]
 8001fec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001ff0:	9105      	str	r1, [sp, #20]
 8001ff2:	9102      	str	r1, [sp, #8]
 8001ff4:	4905      	ldr	r1, [pc, #20]	@ (800200c <_vsiprintf_r+0x28>)
 8001ff6:	9103      	str	r1, [sp, #12]
 8001ff8:	4669      	mov	r1, sp
 8001ffa:	f000 f991 	bl	8002320 <_svfiprintf_r>
 8001ffe:	2200      	movs	r2, #0
 8002000:	9b00      	ldr	r3, [sp, #0]
 8002002:	701a      	strb	r2, [r3, #0]
 8002004:	b01b      	add	sp, #108	@ 0x6c
 8002006:	f85d fb04 	ldr.w	pc, [sp], #4
 800200a:	bf00      	nop
 800200c:	ffff0208 	.word	0xffff0208

08002010 <vsiprintf>:
 8002010:	4613      	mov	r3, r2
 8002012:	460a      	mov	r2, r1
 8002014:	4601      	mov	r1, r0
 8002016:	4802      	ldr	r0, [pc, #8]	@ (8002020 <vsiprintf+0x10>)
 8002018:	6800      	ldr	r0, [r0, #0]
 800201a:	f7ff bfe3 	b.w	8001fe4 <_vsiprintf_r>
 800201e:	bf00      	nop
 8002020:	200000c4 	.word	0x200000c4

08002024 <__errno>:
 8002024:	4b01      	ldr	r3, [pc, #4]	@ (800202c <__errno+0x8>)
 8002026:	6818      	ldr	r0, [r3, #0]
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	200000c4 	.word	0x200000c4

08002030 <__libc_init_array>:
 8002030:	b570      	push	{r4, r5, r6, lr}
 8002032:	2600      	movs	r6, #0
 8002034:	4d0c      	ldr	r5, [pc, #48]	@ (8002068 <__libc_init_array+0x38>)
 8002036:	4c0d      	ldr	r4, [pc, #52]	@ (800206c <__libc_init_array+0x3c>)
 8002038:	1b64      	subs	r4, r4, r5
 800203a:	10a4      	asrs	r4, r4, #2
 800203c:	42a6      	cmp	r6, r4
 800203e:	d109      	bne.n	8002054 <__libc_init_array+0x24>
 8002040:	f000 fc78 	bl	8002934 <_init>
 8002044:	2600      	movs	r6, #0
 8002046:	4d0a      	ldr	r5, [pc, #40]	@ (8002070 <__libc_init_array+0x40>)
 8002048:	4c0a      	ldr	r4, [pc, #40]	@ (8002074 <__libc_init_array+0x44>)
 800204a:	1b64      	subs	r4, r4, r5
 800204c:	10a4      	asrs	r4, r4, #2
 800204e:	42a6      	cmp	r6, r4
 8002050:	d105      	bne.n	800205e <__libc_init_array+0x2e>
 8002052:	bd70      	pop	{r4, r5, r6, pc}
 8002054:	f855 3b04 	ldr.w	r3, [r5], #4
 8002058:	4798      	blx	r3
 800205a:	3601      	adds	r6, #1
 800205c:	e7ee      	b.n	800203c <__libc_init_array+0xc>
 800205e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002062:	4798      	blx	r3
 8002064:	3601      	adds	r6, #1
 8002066:	e7f2      	b.n	800204e <__libc_init_array+0x1e>
 8002068:	080029cc 	.word	0x080029cc
 800206c:	080029cc 	.word	0x080029cc
 8002070:	080029cc 	.word	0x080029cc
 8002074:	080029d0 	.word	0x080029d0

08002078 <__retarget_lock_acquire_recursive>:
 8002078:	4770      	bx	lr

0800207a <__retarget_lock_release_recursive>:
 800207a:	4770      	bx	lr

0800207c <_free_r>:
 800207c:	b538      	push	{r3, r4, r5, lr}
 800207e:	4605      	mov	r5, r0
 8002080:	2900      	cmp	r1, #0
 8002082:	d040      	beq.n	8002106 <_free_r+0x8a>
 8002084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002088:	1f0c      	subs	r4, r1, #4
 800208a:	2b00      	cmp	r3, #0
 800208c:	bfb8      	it	lt
 800208e:	18e4      	addlt	r4, r4, r3
 8002090:	f000 f8de 	bl	8002250 <__malloc_lock>
 8002094:	4a1c      	ldr	r2, [pc, #112]	@ (8002108 <_free_r+0x8c>)
 8002096:	6813      	ldr	r3, [r2, #0]
 8002098:	b933      	cbnz	r3, 80020a8 <_free_r+0x2c>
 800209a:	6063      	str	r3, [r4, #4]
 800209c:	6014      	str	r4, [r2, #0]
 800209e:	4628      	mov	r0, r5
 80020a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020a4:	f000 b8da 	b.w	800225c <__malloc_unlock>
 80020a8:	42a3      	cmp	r3, r4
 80020aa:	d908      	bls.n	80020be <_free_r+0x42>
 80020ac:	6820      	ldr	r0, [r4, #0]
 80020ae:	1821      	adds	r1, r4, r0
 80020b0:	428b      	cmp	r3, r1
 80020b2:	bf01      	itttt	eq
 80020b4:	6819      	ldreq	r1, [r3, #0]
 80020b6:	685b      	ldreq	r3, [r3, #4]
 80020b8:	1809      	addeq	r1, r1, r0
 80020ba:	6021      	streq	r1, [r4, #0]
 80020bc:	e7ed      	b.n	800209a <_free_r+0x1e>
 80020be:	461a      	mov	r2, r3
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	b10b      	cbz	r3, 80020c8 <_free_r+0x4c>
 80020c4:	42a3      	cmp	r3, r4
 80020c6:	d9fa      	bls.n	80020be <_free_r+0x42>
 80020c8:	6811      	ldr	r1, [r2, #0]
 80020ca:	1850      	adds	r0, r2, r1
 80020cc:	42a0      	cmp	r0, r4
 80020ce:	d10b      	bne.n	80020e8 <_free_r+0x6c>
 80020d0:	6820      	ldr	r0, [r4, #0]
 80020d2:	4401      	add	r1, r0
 80020d4:	1850      	adds	r0, r2, r1
 80020d6:	4283      	cmp	r3, r0
 80020d8:	6011      	str	r1, [r2, #0]
 80020da:	d1e0      	bne.n	800209e <_free_r+0x22>
 80020dc:	6818      	ldr	r0, [r3, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	4408      	add	r0, r1
 80020e2:	6010      	str	r0, [r2, #0]
 80020e4:	6053      	str	r3, [r2, #4]
 80020e6:	e7da      	b.n	800209e <_free_r+0x22>
 80020e8:	d902      	bls.n	80020f0 <_free_r+0x74>
 80020ea:	230c      	movs	r3, #12
 80020ec:	602b      	str	r3, [r5, #0]
 80020ee:	e7d6      	b.n	800209e <_free_r+0x22>
 80020f0:	6820      	ldr	r0, [r4, #0]
 80020f2:	1821      	adds	r1, r4, r0
 80020f4:	428b      	cmp	r3, r1
 80020f6:	bf01      	itttt	eq
 80020f8:	6819      	ldreq	r1, [r3, #0]
 80020fa:	685b      	ldreq	r3, [r3, #4]
 80020fc:	1809      	addeq	r1, r1, r0
 80020fe:	6021      	streq	r1, [r4, #0]
 8002100:	6063      	str	r3, [r4, #4]
 8002102:	6054      	str	r4, [r2, #4]
 8002104:	e7cb      	b.n	800209e <_free_r+0x22>
 8002106:	bd38      	pop	{r3, r4, r5, pc}
 8002108:	20000414 	.word	0x20000414

0800210c <sbrk_aligned>:
 800210c:	b570      	push	{r4, r5, r6, lr}
 800210e:	4e0f      	ldr	r6, [pc, #60]	@ (800214c <sbrk_aligned+0x40>)
 8002110:	460c      	mov	r4, r1
 8002112:	6831      	ldr	r1, [r6, #0]
 8002114:	4605      	mov	r5, r0
 8002116:	b911      	cbnz	r1, 800211e <sbrk_aligned+0x12>
 8002118:	f000 fbaa 	bl	8002870 <_sbrk_r>
 800211c:	6030      	str	r0, [r6, #0]
 800211e:	4621      	mov	r1, r4
 8002120:	4628      	mov	r0, r5
 8002122:	f000 fba5 	bl	8002870 <_sbrk_r>
 8002126:	1c43      	adds	r3, r0, #1
 8002128:	d103      	bne.n	8002132 <sbrk_aligned+0x26>
 800212a:	f04f 34ff 	mov.w	r4, #4294967295
 800212e:	4620      	mov	r0, r4
 8002130:	bd70      	pop	{r4, r5, r6, pc}
 8002132:	1cc4      	adds	r4, r0, #3
 8002134:	f024 0403 	bic.w	r4, r4, #3
 8002138:	42a0      	cmp	r0, r4
 800213a:	d0f8      	beq.n	800212e <sbrk_aligned+0x22>
 800213c:	1a21      	subs	r1, r4, r0
 800213e:	4628      	mov	r0, r5
 8002140:	f000 fb96 	bl	8002870 <_sbrk_r>
 8002144:	3001      	adds	r0, #1
 8002146:	d1f2      	bne.n	800212e <sbrk_aligned+0x22>
 8002148:	e7ef      	b.n	800212a <sbrk_aligned+0x1e>
 800214a:	bf00      	nop
 800214c:	20000410 	.word	0x20000410

08002150 <_malloc_r>:
 8002150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002154:	1ccd      	adds	r5, r1, #3
 8002156:	f025 0503 	bic.w	r5, r5, #3
 800215a:	3508      	adds	r5, #8
 800215c:	2d0c      	cmp	r5, #12
 800215e:	bf38      	it	cc
 8002160:	250c      	movcc	r5, #12
 8002162:	2d00      	cmp	r5, #0
 8002164:	4606      	mov	r6, r0
 8002166:	db01      	blt.n	800216c <_malloc_r+0x1c>
 8002168:	42a9      	cmp	r1, r5
 800216a:	d904      	bls.n	8002176 <_malloc_r+0x26>
 800216c:	230c      	movs	r3, #12
 800216e:	6033      	str	r3, [r6, #0]
 8002170:	2000      	movs	r0, #0
 8002172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002176:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800224c <_malloc_r+0xfc>
 800217a:	f000 f869 	bl	8002250 <__malloc_lock>
 800217e:	f8d8 3000 	ldr.w	r3, [r8]
 8002182:	461c      	mov	r4, r3
 8002184:	bb44      	cbnz	r4, 80021d8 <_malloc_r+0x88>
 8002186:	4629      	mov	r1, r5
 8002188:	4630      	mov	r0, r6
 800218a:	f7ff ffbf 	bl	800210c <sbrk_aligned>
 800218e:	1c43      	adds	r3, r0, #1
 8002190:	4604      	mov	r4, r0
 8002192:	d158      	bne.n	8002246 <_malloc_r+0xf6>
 8002194:	f8d8 4000 	ldr.w	r4, [r8]
 8002198:	4627      	mov	r7, r4
 800219a:	2f00      	cmp	r7, #0
 800219c:	d143      	bne.n	8002226 <_malloc_r+0xd6>
 800219e:	2c00      	cmp	r4, #0
 80021a0:	d04b      	beq.n	800223a <_malloc_r+0xea>
 80021a2:	6823      	ldr	r3, [r4, #0]
 80021a4:	4639      	mov	r1, r7
 80021a6:	4630      	mov	r0, r6
 80021a8:	eb04 0903 	add.w	r9, r4, r3
 80021ac:	f000 fb60 	bl	8002870 <_sbrk_r>
 80021b0:	4581      	cmp	r9, r0
 80021b2:	d142      	bne.n	800223a <_malloc_r+0xea>
 80021b4:	6821      	ldr	r1, [r4, #0]
 80021b6:	4630      	mov	r0, r6
 80021b8:	1a6d      	subs	r5, r5, r1
 80021ba:	4629      	mov	r1, r5
 80021bc:	f7ff ffa6 	bl	800210c <sbrk_aligned>
 80021c0:	3001      	adds	r0, #1
 80021c2:	d03a      	beq.n	800223a <_malloc_r+0xea>
 80021c4:	6823      	ldr	r3, [r4, #0]
 80021c6:	442b      	add	r3, r5
 80021c8:	6023      	str	r3, [r4, #0]
 80021ca:	f8d8 3000 	ldr.w	r3, [r8]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	bb62      	cbnz	r2, 800222c <_malloc_r+0xdc>
 80021d2:	f8c8 7000 	str.w	r7, [r8]
 80021d6:	e00f      	b.n	80021f8 <_malloc_r+0xa8>
 80021d8:	6822      	ldr	r2, [r4, #0]
 80021da:	1b52      	subs	r2, r2, r5
 80021dc:	d420      	bmi.n	8002220 <_malloc_r+0xd0>
 80021de:	2a0b      	cmp	r2, #11
 80021e0:	d917      	bls.n	8002212 <_malloc_r+0xc2>
 80021e2:	1961      	adds	r1, r4, r5
 80021e4:	42a3      	cmp	r3, r4
 80021e6:	6025      	str	r5, [r4, #0]
 80021e8:	bf18      	it	ne
 80021ea:	6059      	strne	r1, [r3, #4]
 80021ec:	6863      	ldr	r3, [r4, #4]
 80021ee:	bf08      	it	eq
 80021f0:	f8c8 1000 	streq.w	r1, [r8]
 80021f4:	5162      	str	r2, [r4, r5]
 80021f6:	604b      	str	r3, [r1, #4]
 80021f8:	4630      	mov	r0, r6
 80021fa:	f000 f82f 	bl	800225c <__malloc_unlock>
 80021fe:	f104 000b 	add.w	r0, r4, #11
 8002202:	1d23      	adds	r3, r4, #4
 8002204:	f020 0007 	bic.w	r0, r0, #7
 8002208:	1ac2      	subs	r2, r0, r3
 800220a:	bf1c      	itt	ne
 800220c:	1a1b      	subne	r3, r3, r0
 800220e:	50a3      	strne	r3, [r4, r2]
 8002210:	e7af      	b.n	8002172 <_malloc_r+0x22>
 8002212:	6862      	ldr	r2, [r4, #4]
 8002214:	42a3      	cmp	r3, r4
 8002216:	bf0c      	ite	eq
 8002218:	f8c8 2000 	streq.w	r2, [r8]
 800221c:	605a      	strne	r2, [r3, #4]
 800221e:	e7eb      	b.n	80021f8 <_malloc_r+0xa8>
 8002220:	4623      	mov	r3, r4
 8002222:	6864      	ldr	r4, [r4, #4]
 8002224:	e7ae      	b.n	8002184 <_malloc_r+0x34>
 8002226:	463c      	mov	r4, r7
 8002228:	687f      	ldr	r7, [r7, #4]
 800222a:	e7b6      	b.n	800219a <_malloc_r+0x4a>
 800222c:	461a      	mov	r2, r3
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	42a3      	cmp	r3, r4
 8002232:	d1fb      	bne.n	800222c <_malloc_r+0xdc>
 8002234:	2300      	movs	r3, #0
 8002236:	6053      	str	r3, [r2, #4]
 8002238:	e7de      	b.n	80021f8 <_malloc_r+0xa8>
 800223a:	230c      	movs	r3, #12
 800223c:	4630      	mov	r0, r6
 800223e:	6033      	str	r3, [r6, #0]
 8002240:	f000 f80c 	bl	800225c <__malloc_unlock>
 8002244:	e794      	b.n	8002170 <_malloc_r+0x20>
 8002246:	6005      	str	r5, [r0, #0]
 8002248:	e7d6      	b.n	80021f8 <_malloc_r+0xa8>
 800224a:	bf00      	nop
 800224c:	20000414 	.word	0x20000414

08002250 <__malloc_lock>:
 8002250:	4801      	ldr	r0, [pc, #4]	@ (8002258 <__malloc_lock+0x8>)
 8002252:	f7ff bf11 	b.w	8002078 <__retarget_lock_acquire_recursive>
 8002256:	bf00      	nop
 8002258:	2000040c 	.word	0x2000040c

0800225c <__malloc_unlock>:
 800225c:	4801      	ldr	r0, [pc, #4]	@ (8002264 <__malloc_unlock+0x8>)
 800225e:	f7ff bf0c 	b.w	800207a <__retarget_lock_release_recursive>
 8002262:	bf00      	nop
 8002264:	2000040c 	.word	0x2000040c

08002268 <__ssputs_r>:
 8002268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800226c:	461f      	mov	r7, r3
 800226e:	688e      	ldr	r6, [r1, #8]
 8002270:	4682      	mov	sl, r0
 8002272:	42be      	cmp	r6, r7
 8002274:	460c      	mov	r4, r1
 8002276:	4690      	mov	r8, r2
 8002278:	680b      	ldr	r3, [r1, #0]
 800227a:	d82d      	bhi.n	80022d8 <__ssputs_r+0x70>
 800227c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002280:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002284:	d026      	beq.n	80022d4 <__ssputs_r+0x6c>
 8002286:	6965      	ldr	r5, [r4, #20]
 8002288:	6909      	ldr	r1, [r1, #16]
 800228a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800228e:	eba3 0901 	sub.w	r9, r3, r1
 8002292:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002296:	1c7b      	adds	r3, r7, #1
 8002298:	444b      	add	r3, r9
 800229a:	106d      	asrs	r5, r5, #1
 800229c:	429d      	cmp	r5, r3
 800229e:	bf38      	it	cc
 80022a0:	461d      	movcc	r5, r3
 80022a2:	0553      	lsls	r3, r2, #21
 80022a4:	d527      	bpl.n	80022f6 <__ssputs_r+0x8e>
 80022a6:	4629      	mov	r1, r5
 80022a8:	f7ff ff52 	bl	8002150 <_malloc_r>
 80022ac:	4606      	mov	r6, r0
 80022ae:	b360      	cbz	r0, 800230a <__ssputs_r+0xa2>
 80022b0:	464a      	mov	r2, r9
 80022b2:	6921      	ldr	r1, [r4, #16]
 80022b4:	f000 fafa 	bl	80028ac <memcpy>
 80022b8:	89a3      	ldrh	r3, [r4, #12]
 80022ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80022be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022c2:	81a3      	strh	r3, [r4, #12]
 80022c4:	6126      	str	r6, [r4, #16]
 80022c6:	444e      	add	r6, r9
 80022c8:	6026      	str	r6, [r4, #0]
 80022ca:	463e      	mov	r6, r7
 80022cc:	6165      	str	r5, [r4, #20]
 80022ce:	eba5 0509 	sub.w	r5, r5, r9
 80022d2:	60a5      	str	r5, [r4, #8]
 80022d4:	42be      	cmp	r6, r7
 80022d6:	d900      	bls.n	80022da <__ssputs_r+0x72>
 80022d8:	463e      	mov	r6, r7
 80022da:	4632      	mov	r2, r6
 80022dc:	4641      	mov	r1, r8
 80022de:	6820      	ldr	r0, [r4, #0]
 80022e0:	f000 faac 	bl	800283c <memmove>
 80022e4:	2000      	movs	r0, #0
 80022e6:	68a3      	ldr	r3, [r4, #8]
 80022e8:	1b9b      	subs	r3, r3, r6
 80022ea:	60a3      	str	r3, [r4, #8]
 80022ec:	6823      	ldr	r3, [r4, #0]
 80022ee:	4433      	add	r3, r6
 80022f0:	6023      	str	r3, [r4, #0]
 80022f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022f6:	462a      	mov	r2, r5
 80022f8:	f000 fae6 	bl	80028c8 <_realloc_r>
 80022fc:	4606      	mov	r6, r0
 80022fe:	2800      	cmp	r0, #0
 8002300:	d1e0      	bne.n	80022c4 <__ssputs_r+0x5c>
 8002302:	4650      	mov	r0, sl
 8002304:	6921      	ldr	r1, [r4, #16]
 8002306:	f7ff feb9 	bl	800207c <_free_r>
 800230a:	230c      	movs	r3, #12
 800230c:	f8ca 3000 	str.w	r3, [sl]
 8002310:	89a3      	ldrh	r3, [r4, #12]
 8002312:	f04f 30ff 	mov.w	r0, #4294967295
 8002316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800231a:	81a3      	strh	r3, [r4, #12]
 800231c:	e7e9      	b.n	80022f2 <__ssputs_r+0x8a>
	...

08002320 <_svfiprintf_r>:
 8002320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002324:	4698      	mov	r8, r3
 8002326:	898b      	ldrh	r3, [r1, #12]
 8002328:	4607      	mov	r7, r0
 800232a:	061b      	lsls	r3, r3, #24
 800232c:	460d      	mov	r5, r1
 800232e:	4614      	mov	r4, r2
 8002330:	b09d      	sub	sp, #116	@ 0x74
 8002332:	d510      	bpl.n	8002356 <_svfiprintf_r+0x36>
 8002334:	690b      	ldr	r3, [r1, #16]
 8002336:	b973      	cbnz	r3, 8002356 <_svfiprintf_r+0x36>
 8002338:	2140      	movs	r1, #64	@ 0x40
 800233a:	f7ff ff09 	bl	8002150 <_malloc_r>
 800233e:	6028      	str	r0, [r5, #0]
 8002340:	6128      	str	r0, [r5, #16]
 8002342:	b930      	cbnz	r0, 8002352 <_svfiprintf_r+0x32>
 8002344:	230c      	movs	r3, #12
 8002346:	603b      	str	r3, [r7, #0]
 8002348:	f04f 30ff 	mov.w	r0, #4294967295
 800234c:	b01d      	add	sp, #116	@ 0x74
 800234e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002352:	2340      	movs	r3, #64	@ 0x40
 8002354:	616b      	str	r3, [r5, #20]
 8002356:	2300      	movs	r3, #0
 8002358:	9309      	str	r3, [sp, #36]	@ 0x24
 800235a:	2320      	movs	r3, #32
 800235c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002360:	2330      	movs	r3, #48	@ 0x30
 8002362:	f04f 0901 	mov.w	r9, #1
 8002366:	f8cd 800c 	str.w	r8, [sp, #12]
 800236a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002504 <_svfiprintf_r+0x1e4>
 800236e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002372:	4623      	mov	r3, r4
 8002374:	469a      	mov	sl, r3
 8002376:	f813 2b01 	ldrb.w	r2, [r3], #1
 800237a:	b10a      	cbz	r2, 8002380 <_svfiprintf_r+0x60>
 800237c:	2a25      	cmp	r2, #37	@ 0x25
 800237e:	d1f9      	bne.n	8002374 <_svfiprintf_r+0x54>
 8002380:	ebba 0b04 	subs.w	fp, sl, r4
 8002384:	d00b      	beq.n	800239e <_svfiprintf_r+0x7e>
 8002386:	465b      	mov	r3, fp
 8002388:	4622      	mov	r2, r4
 800238a:	4629      	mov	r1, r5
 800238c:	4638      	mov	r0, r7
 800238e:	f7ff ff6b 	bl	8002268 <__ssputs_r>
 8002392:	3001      	adds	r0, #1
 8002394:	f000 80a7 	beq.w	80024e6 <_svfiprintf_r+0x1c6>
 8002398:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800239a:	445a      	add	r2, fp
 800239c:	9209      	str	r2, [sp, #36]	@ 0x24
 800239e:	f89a 3000 	ldrb.w	r3, [sl]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 809f 	beq.w	80024e6 <_svfiprintf_r+0x1c6>
 80023a8:	2300      	movs	r3, #0
 80023aa:	f04f 32ff 	mov.w	r2, #4294967295
 80023ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80023b2:	f10a 0a01 	add.w	sl, sl, #1
 80023b6:	9304      	str	r3, [sp, #16]
 80023b8:	9307      	str	r3, [sp, #28]
 80023ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80023be:	931a      	str	r3, [sp, #104]	@ 0x68
 80023c0:	4654      	mov	r4, sl
 80023c2:	2205      	movs	r2, #5
 80023c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023c8:	484e      	ldr	r0, [pc, #312]	@ (8002504 <_svfiprintf_r+0x1e4>)
 80023ca:	f000 fa61 	bl	8002890 <memchr>
 80023ce:	9a04      	ldr	r2, [sp, #16]
 80023d0:	b9d8      	cbnz	r0, 800240a <_svfiprintf_r+0xea>
 80023d2:	06d0      	lsls	r0, r2, #27
 80023d4:	bf44      	itt	mi
 80023d6:	2320      	movmi	r3, #32
 80023d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80023dc:	0711      	lsls	r1, r2, #28
 80023de:	bf44      	itt	mi
 80023e0:	232b      	movmi	r3, #43	@ 0x2b
 80023e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80023e6:	f89a 3000 	ldrb.w	r3, [sl]
 80023ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80023ec:	d015      	beq.n	800241a <_svfiprintf_r+0xfa>
 80023ee:	4654      	mov	r4, sl
 80023f0:	2000      	movs	r0, #0
 80023f2:	f04f 0c0a 	mov.w	ip, #10
 80023f6:	9a07      	ldr	r2, [sp, #28]
 80023f8:	4621      	mov	r1, r4
 80023fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80023fe:	3b30      	subs	r3, #48	@ 0x30
 8002400:	2b09      	cmp	r3, #9
 8002402:	d94b      	bls.n	800249c <_svfiprintf_r+0x17c>
 8002404:	b1b0      	cbz	r0, 8002434 <_svfiprintf_r+0x114>
 8002406:	9207      	str	r2, [sp, #28]
 8002408:	e014      	b.n	8002434 <_svfiprintf_r+0x114>
 800240a:	eba0 0308 	sub.w	r3, r0, r8
 800240e:	fa09 f303 	lsl.w	r3, r9, r3
 8002412:	4313      	orrs	r3, r2
 8002414:	46a2      	mov	sl, r4
 8002416:	9304      	str	r3, [sp, #16]
 8002418:	e7d2      	b.n	80023c0 <_svfiprintf_r+0xa0>
 800241a:	9b03      	ldr	r3, [sp, #12]
 800241c:	1d19      	adds	r1, r3, #4
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	9103      	str	r1, [sp, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	bfbb      	ittet	lt
 8002426:	425b      	neglt	r3, r3
 8002428:	f042 0202 	orrlt.w	r2, r2, #2
 800242c:	9307      	strge	r3, [sp, #28]
 800242e:	9307      	strlt	r3, [sp, #28]
 8002430:	bfb8      	it	lt
 8002432:	9204      	strlt	r2, [sp, #16]
 8002434:	7823      	ldrb	r3, [r4, #0]
 8002436:	2b2e      	cmp	r3, #46	@ 0x2e
 8002438:	d10a      	bne.n	8002450 <_svfiprintf_r+0x130>
 800243a:	7863      	ldrb	r3, [r4, #1]
 800243c:	2b2a      	cmp	r3, #42	@ 0x2a
 800243e:	d132      	bne.n	80024a6 <_svfiprintf_r+0x186>
 8002440:	9b03      	ldr	r3, [sp, #12]
 8002442:	3402      	adds	r4, #2
 8002444:	1d1a      	adds	r2, r3, #4
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	9203      	str	r2, [sp, #12]
 800244a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800244e:	9305      	str	r3, [sp, #20]
 8002450:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002508 <_svfiprintf_r+0x1e8>
 8002454:	2203      	movs	r2, #3
 8002456:	4650      	mov	r0, sl
 8002458:	7821      	ldrb	r1, [r4, #0]
 800245a:	f000 fa19 	bl	8002890 <memchr>
 800245e:	b138      	cbz	r0, 8002470 <_svfiprintf_r+0x150>
 8002460:	2240      	movs	r2, #64	@ 0x40
 8002462:	9b04      	ldr	r3, [sp, #16]
 8002464:	eba0 000a 	sub.w	r0, r0, sl
 8002468:	4082      	lsls	r2, r0
 800246a:	4313      	orrs	r3, r2
 800246c:	3401      	adds	r4, #1
 800246e:	9304      	str	r3, [sp, #16]
 8002470:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002474:	2206      	movs	r2, #6
 8002476:	4825      	ldr	r0, [pc, #148]	@ (800250c <_svfiprintf_r+0x1ec>)
 8002478:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800247c:	f000 fa08 	bl	8002890 <memchr>
 8002480:	2800      	cmp	r0, #0
 8002482:	d036      	beq.n	80024f2 <_svfiprintf_r+0x1d2>
 8002484:	4b22      	ldr	r3, [pc, #136]	@ (8002510 <_svfiprintf_r+0x1f0>)
 8002486:	bb1b      	cbnz	r3, 80024d0 <_svfiprintf_r+0x1b0>
 8002488:	9b03      	ldr	r3, [sp, #12]
 800248a:	3307      	adds	r3, #7
 800248c:	f023 0307 	bic.w	r3, r3, #7
 8002490:	3308      	adds	r3, #8
 8002492:	9303      	str	r3, [sp, #12]
 8002494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002496:	4433      	add	r3, r6
 8002498:	9309      	str	r3, [sp, #36]	@ 0x24
 800249a:	e76a      	b.n	8002372 <_svfiprintf_r+0x52>
 800249c:	460c      	mov	r4, r1
 800249e:	2001      	movs	r0, #1
 80024a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80024a4:	e7a8      	b.n	80023f8 <_svfiprintf_r+0xd8>
 80024a6:	2300      	movs	r3, #0
 80024a8:	f04f 0c0a 	mov.w	ip, #10
 80024ac:	4619      	mov	r1, r3
 80024ae:	3401      	adds	r4, #1
 80024b0:	9305      	str	r3, [sp, #20]
 80024b2:	4620      	mov	r0, r4
 80024b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80024b8:	3a30      	subs	r2, #48	@ 0x30
 80024ba:	2a09      	cmp	r2, #9
 80024bc:	d903      	bls.n	80024c6 <_svfiprintf_r+0x1a6>
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0c6      	beq.n	8002450 <_svfiprintf_r+0x130>
 80024c2:	9105      	str	r1, [sp, #20]
 80024c4:	e7c4      	b.n	8002450 <_svfiprintf_r+0x130>
 80024c6:	4604      	mov	r4, r0
 80024c8:	2301      	movs	r3, #1
 80024ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80024ce:	e7f0      	b.n	80024b2 <_svfiprintf_r+0x192>
 80024d0:	ab03      	add	r3, sp, #12
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	462a      	mov	r2, r5
 80024d6:	4638      	mov	r0, r7
 80024d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002514 <_svfiprintf_r+0x1f4>)
 80024da:	a904      	add	r1, sp, #16
 80024dc:	f3af 8000 	nop.w
 80024e0:	1c42      	adds	r2, r0, #1
 80024e2:	4606      	mov	r6, r0
 80024e4:	d1d6      	bne.n	8002494 <_svfiprintf_r+0x174>
 80024e6:	89ab      	ldrh	r3, [r5, #12]
 80024e8:	065b      	lsls	r3, r3, #25
 80024ea:	f53f af2d 	bmi.w	8002348 <_svfiprintf_r+0x28>
 80024ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80024f0:	e72c      	b.n	800234c <_svfiprintf_r+0x2c>
 80024f2:	ab03      	add	r3, sp, #12
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	462a      	mov	r2, r5
 80024f8:	4638      	mov	r0, r7
 80024fa:	4b06      	ldr	r3, [pc, #24]	@ (8002514 <_svfiprintf_r+0x1f4>)
 80024fc:	a904      	add	r1, sp, #16
 80024fe:	f000 f87d 	bl	80025fc <_printf_i>
 8002502:	e7ed      	b.n	80024e0 <_svfiprintf_r+0x1c0>
 8002504:	08002999 	.word	0x08002999
 8002508:	0800299f 	.word	0x0800299f
 800250c:	080029a3 	.word	0x080029a3
 8002510:	00000000 	.word	0x00000000
 8002514:	08002269 	.word	0x08002269

08002518 <_printf_common>:
 8002518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800251c:	4616      	mov	r6, r2
 800251e:	4698      	mov	r8, r3
 8002520:	688a      	ldr	r2, [r1, #8]
 8002522:	690b      	ldr	r3, [r1, #16]
 8002524:	4607      	mov	r7, r0
 8002526:	4293      	cmp	r3, r2
 8002528:	bfb8      	it	lt
 800252a:	4613      	movlt	r3, r2
 800252c:	6033      	str	r3, [r6, #0]
 800252e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002532:	460c      	mov	r4, r1
 8002534:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002538:	b10a      	cbz	r2, 800253e <_printf_common+0x26>
 800253a:	3301      	adds	r3, #1
 800253c:	6033      	str	r3, [r6, #0]
 800253e:	6823      	ldr	r3, [r4, #0]
 8002540:	0699      	lsls	r1, r3, #26
 8002542:	bf42      	ittt	mi
 8002544:	6833      	ldrmi	r3, [r6, #0]
 8002546:	3302      	addmi	r3, #2
 8002548:	6033      	strmi	r3, [r6, #0]
 800254a:	6825      	ldr	r5, [r4, #0]
 800254c:	f015 0506 	ands.w	r5, r5, #6
 8002550:	d106      	bne.n	8002560 <_printf_common+0x48>
 8002552:	f104 0a19 	add.w	sl, r4, #25
 8002556:	68e3      	ldr	r3, [r4, #12]
 8002558:	6832      	ldr	r2, [r6, #0]
 800255a:	1a9b      	subs	r3, r3, r2
 800255c:	42ab      	cmp	r3, r5
 800255e:	dc2b      	bgt.n	80025b8 <_printf_common+0xa0>
 8002560:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002564:	6822      	ldr	r2, [r4, #0]
 8002566:	3b00      	subs	r3, #0
 8002568:	bf18      	it	ne
 800256a:	2301      	movne	r3, #1
 800256c:	0692      	lsls	r2, r2, #26
 800256e:	d430      	bmi.n	80025d2 <_printf_common+0xba>
 8002570:	4641      	mov	r1, r8
 8002572:	4638      	mov	r0, r7
 8002574:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002578:	47c8      	blx	r9
 800257a:	3001      	adds	r0, #1
 800257c:	d023      	beq.n	80025c6 <_printf_common+0xae>
 800257e:	6823      	ldr	r3, [r4, #0]
 8002580:	6922      	ldr	r2, [r4, #16]
 8002582:	f003 0306 	and.w	r3, r3, #6
 8002586:	2b04      	cmp	r3, #4
 8002588:	bf14      	ite	ne
 800258a:	2500      	movne	r5, #0
 800258c:	6833      	ldreq	r3, [r6, #0]
 800258e:	f04f 0600 	mov.w	r6, #0
 8002592:	bf08      	it	eq
 8002594:	68e5      	ldreq	r5, [r4, #12]
 8002596:	f104 041a 	add.w	r4, r4, #26
 800259a:	bf08      	it	eq
 800259c:	1aed      	subeq	r5, r5, r3
 800259e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80025a2:	bf08      	it	eq
 80025a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80025a8:	4293      	cmp	r3, r2
 80025aa:	bfc4      	itt	gt
 80025ac:	1a9b      	subgt	r3, r3, r2
 80025ae:	18ed      	addgt	r5, r5, r3
 80025b0:	42b5      	cmp	r5, r6
 80025b2:	d11a      	bne.n	80025ea <_printf_common+0xd2>
 80025b4:	2000      	movs	r0, #0
 80025b6:	e008      	b.n	80025ca <_printf_common+0xb2>
 80025b8:	2301      	movs	r3, #1
 80025ba:	4652      	mov	r2, sl
 80025bc:	4641      	mov	r1, r8
 80025be:	4638      	mov	r0, r7
 80025c0:	47c8      	blx	r9
 80025c2:	3001      	adds	r0, #1
 80025c4:	d103      	bne.n	80025ce <_printf_common+0xb6>
 80025c6:	f04f 30ff 	mov.w	r0, #4294967295
 80025ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025ce:	3501      	adds	r5, #1
 80025d0:	e7c1      	b.n	8002556 <_printf_common+0x3e>
 80025d2:	2030      	movs	r0, #48	@ 0x30
 80025d4:	18e1      	adds	r1, r4, r3
 80025d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80025e0:	4422      	add	r2, r4
 80025e2:	3302      	adds	r3, #2
 80025e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80025e8:	e7c2      	b.n	8002570 <_printf_common+0x58>
 80025ea:	2301      	movs	r3, #1
 80025ec:	4622      	mov	r2, r4
 80025ee:	4641      	mov	r1, r8
 80025f0:	4638      	mov	r0, r7
 80025f2:	47c8      	blx	r9
 80025f4:	3001      	adds	r0, #1
 80025f6:	d0e6      	beq.n	80025c6 <_printf_common+0xae>
 80025f8:	3601      	adds	r6, #1
 80025fa:	e7d9      	b.n	80025b0 <_printf_common+0x98>

080025fc <_printf_i>:
 80025fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002600:	7e0f      	ldrb	r7, [r1, #24]
 8002602:	4691      	mov	r9, r2
 8002604:	2f78      	cmp	r7, #120	@ 0x78
 8002606:	4680      	mov	r8, r0
 8002608:	460c      	mov	r4, r1
 800260a:	469a      	mov	sl, r3
 800260c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800260e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002612:	d807      	bhi.n	8002624 <_printf_i+0x28>
 8002614:	2f62      	cmp	r7, #98	@ 0x62
 8002616:	d80a      	bhi.n	800262e <_printf_i+0x32>
 8002618:	2f00      	cmp	r7, #0
 800261a:	f000 80d3 	beq.w	80027c4 <_printf_i+0x1c8>
 800261e:	2f58      	cmp	r7, #88	@ 0x58
 8002620:	f000 80ba 	beq.w	8002798 <_printf_i+0x19c>
 8002624:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002628:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800262c:	e03a      	b.n	80026a4 <_printf_i+0xa8>
 800262e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002632:	2b15      	cmp	r3, #21
 8002634:	d8f6      	bhi.n	8002624 <_printf_i+0x28>
 8002636:	a101      	add	r1, pc, #4	@ (adr r1, 800263c <_printf_i+0x40>)
 8002638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800263c:	08002695 	.word	0x08002695
 8002640:	080026a9 	.word	0x080026a9
 8002644:	08002625 	.word	0x08002625
 8002648:	08002625 	.word	0x08002625
 800264c:	08002625 	.word	0x08002625
 8002650:	08002625 	.word	0x08002625
 8002654:	080026a9 	.word	0x080026a9
 8002658:	08002625 	.word	0x08002625
 800265c:	08002625 	.word	0x08002625
 8002660:	08002625 	.word	0x08002625
 8002664:	08002625 	.word	0x08002625
 8002668:	080027ab 	.word	0x080027ab
 800266c:	080026d3 	.word	0x080026d3
 8002670:	08002765 	.word	0x08002765
 8002674:	08002625 	.word	0x08002625
 8002678:	08002625 	.word	0x08002625
 800267c:	080027cd 	.word	0x080027cd
 8002680:	08002625 	.word	0x08002625
 8002684:	080026d3 	.word	0x080026d3
 8002688:	08002625 	.word	0x08002625
 800268c:	08002625 	.word	0x08002625
 8002690:	0800276d 	.word	0x0800276d
 8002694:	6833      	ldr	r3, [r6, #0]
 8002696:	1d1a      	adds	r2, r3, #4
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6032      	str	r2, [r6, #0]
 800269c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80026a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80026a4:	2301      	movs	r3, #1
 80026a6:	e09e      	b.n	80027e6 <_printf_i+0x1ea>
 80026a8:	6833      	ldr	r3, [r6, #0]
 80026aa:	6820      	ldr	r0, [r4, #0]
 80026ac:	1d19      	adds	r1, r3, #4
 80026ae:	6031      	str	r1, [r6, #0]
 80026b0:	0606      	lsls	r6, r0, #24
 80026b2:	d501      	bpl.n	80026b8 <_printf_i+0xbc>
 80026b4:	681d      	ldr	r5, [r3, #0]
 80026b6:	e003      	b.n	80026c0 <_printf_i+0xc4>
 80026b8:	0645      	lsls	r5, r0, #25
 80026ba:	d5fb      	bpl.n	80026b4 <_printf_i+0xb8>
 80026bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80026c0:	2d00      	cmp	r5, #0
 80026c2:	da03      	bge.n	80026cc <_printf_i+0xd0>
 80026c4:	232d      	movs	r3, #45	@ 0x2d
 80026c6:	426d      	negs	r5, r5
 80026c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80026cc:	230a      	movs	r3, #10
 80026ce:	4859      	ldr	r0, [pc, #356]	@ (8002834 <_printf_i+0x238>)
 80026d0:	e011      	b.n	80026f6 <_printf_i+0xfa>
 80026d2:	6821      	ldr	r1, [r4, #0]
 80026d4:	6833      	ldr	r3, [r6, #0]
 80026d6:	0608      	lsls	r0, r1, #24
 80026d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80026dc:	d402      	bmi.n	80026e4 <_printf_i+0xe8>
 80026de:	0649      	lsls	r1, r1, #25
 80026e0:	bf48      	it	mi
 80026e2:	b2ad      	uxthmi	r5, r5
 80026e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80026e6:	6033      	str	r3, [r6, #0]
 80026e8:	bf14      	ite	ne
 80026ea:	230a      	movne	r3, #10
 80026ec:	2308      	moveq	r3, #8
 80026ee:	4851      	ldr	r0, [pc, #324]	@ (8002834 <_printf_i+0x238>)
 80026f0:	2100      	movs	r1, #0
 80026f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80026f6:	6866      	ldr	r6, [r4, #4]
 80026f8:	2e00      	cmp	r6, #0
 80026fa:	bfa8      	it	ge
 80026fc:	6821      	ldrge	r1, [r4, #0]
 80026fe:	60a6      	str	r6, [r4, #8]
 8002700:	bfa4      	itt	ge
 8002702:	f021 0104 	bicge.w	r1, r1, #4
 8002706:	6021      	strge	r1, [r4, #0]
 8002708:	b90d      	cbnz	r5, 800270e <_printf_i+0x112>
 800270a:	2e00      	cmp	r6, #0
 800270c:	d04b      	beq.n	80027a6 <_printf_i+0x1aa>
 800270e:	4616      	mov	r6, r2
 8002710:	fbb5 f1f3 	udiv	r1, r5, r3
 8002714:	fb03 5711 	mls	r7, r3, r1, r5
 8002718:	5dc7      	ldrb	r7, [r0, r7]
 800271a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800271e:	462f      	mov	r7, r5
 8002720:	42bb      	cmp	r3, r7
 8002722:	460d      	mov	r5, r1
 8002724:	d9f4      	bls.n	8002710 <_printf_i+0x114>
 8002726:	2b08      	cmp	r3, #8
 8002728:	d10b      	bne.n	8002742 <_printf_i+0x146>
 800272a:	6823      	ldr	r3, [r4, #0]
 800272c:	07df      	lsls	r7, r3, #31
 800272e:	d508      	bpl.n	8002742 <_printf_i+0x146>
 8002730:	6923      	ldr	r3, [r4, #16]
 8002732:	6861      	ldr	r1, [r4, #4]
 8002734:	4299      	cmp	r1, r3
 8002736:	bfde      	ittt	le
 8002738:	2330      	movle	r3, #48	@ 0x30
 800273a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800273e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002742:	1b92      	subs	r2, r2, r6
 8002744:	6122      	str	r2, [r4, #16]
 8002746:	464b      	mov	r3, r9
 8002748:	4621      	mov	r1, r4
 800274a:	4640      	mov	r0, r8
 800274c:	f8cd a000 	str.w	sl, [sp]
 8002750:	aa03      	add	r2, sp, #12
 8002752:	f7ff fee1 	bl	8002518 <_printf_common>
 8002756:	3001      	adds	r0, #1
 8002758:	d14a      	bne.n	80027f0 <_printf_i+0x1f4>
 800275a:	f04f 30ff 	mov.w	r0, #4294967295
 800275e:	b004      	add	sp, #16
 8002760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002764:	6823      	ldr	r3, [r4, #0]
 8002766:	f043 0320 	orr.w	r3, r3, #32
 800276a:	6023      	str	r3, [r4, #0]
 800276c:	2778      	movs	r7, #120	@ 0x78
 800276e:	4832      	ldr	r0, [pc, #200]	@ (8002838 <_printf_i+0x23c>)
 8002770:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002774:	6823      	ldr	r3, [r4, #0]
 8002776:	6831      	ldr	r1, [r6, #0]
 8002778:	061f      	lsls	r7, r3, #24
 800277a:	f851 5b04 	ldr.w	r5, [r1], #4
 800277e:	d402      	bmi.n	8002786 <_printf_i+0x18a>
 8002780:	065f      	lsls	r7, r3, #25
 8002782:	bf48      	it	mi
 8002784:	b2ad      	uxthmi	r5, r5
 8002786:	6031      	str	r1, [r6, #0]
 8002788:	07d9      	lsls	r1, r3, #31
 800278a:	bf44      	itt	mi
 800278c:	f043 0320 	orrmi.w	r3, r3, #32
 8002790:	6023      	strmi	r3, [r4, #0]
 8002792:	b11d      	cbz	r5, 800279c <_printf_i+0x1a0>
 8002794:	2310      	movs	r3, #16
 8002796:	e7ab      	b.n	80026f0 <_printf_i+0xf4>
 8002798:	4826      	ldr	r0, [pc, #152]	@ (8002834 <_printf_i+0x238>)
 800279a:	e7e9      	b.n	8002770 <_printf_i+0x174>
 800279c:	6823      	ldr	r3, [r4, #0]
 800279e:	f023 0320 	bic.w	r3, r3, #32
 80027a2:	6023      	str	r3, [r4, #0]
 80027a4:	e7f6      	b.n	8002794 <_printf_i+0x198>
 80027a6:	4616      	mov	r6, r2
 80027a8:	e7bd      	b.n	8002726 <_printf_i+0x12a>
 80027aa:	6833      	ldr	r3, [r6, #0]
 80027ac:	6825      	ldr	r5, [r4, #0]
 80027ae:	1d18      	adds	r0, r3, #4
 80027b0:	6961      	ldr	r1, [r4, #20]
 80027b2:	6030      	str	r0, [r6, #0]
 80027b4:	062e      	lsls	r6, r5, #24
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	d501      	bpl.n	80027be <_printf_i+0x1c2>
 80027ba:	6019      	str	r1, [r3, #0]
 80027bc:	e002      	b.n	80027c4 <_printf_i+0x1c8>
 80027be:	0668      	lsls	r0, r5, #25
 80027c0:	d5fb      	bpl.n	80027ba <_printf_i+0x1be>
 80027c2:	8019      	strh	r1, [r3, #0]
 80027c4:	2300      	movs	r3, #0
 80027c6:	4616      	mov	r6, r2
 80027c8:	6123      	str	r3, [r4, #16]
 80027ca:	e7bc      	b.n	8002746 <_printf_i+0x14a>
 80027cc:	6833      	ldr	r3, [r6, #0]
 80027ce:	2100      	movs	r1, #0
 80027d0:	1d1a      	adds	r2, r3, #4
 80027d2:	6032      	str	r2, [r6, #0]
 80027d4:	681e      	ldr	r6, [r3, #0]
 80027d6:	6862      	ldr	r2, [r4, #4]
 80027d8:	4630      	mov	r0, r6
 80027da:	f000 f859 	bl	8002890 <memchr>
 80027de:	b108      	cbz	r0, 80027e4 <_printf_i+0x1e8>
 80027e0:	1b80      	subs	r0, r0, r6
 80027e2:	6060      	str	r0, [r4, #4]
 80027e4:	6863      	ldr	r3, [r4, #4]
 80027e6:	6123      	str	r3, [r4, #16]
 80027e8:	2300      	movs	r3, #0
 80027ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80027ee:	e7aa      	b.n	8002746 <_printf_i+0x14a>
 80027f0:	4632      	mov	r2, r6
 80027f2:	4649      	mov	r1, r9
 80027f4:	4640      	mov	r0, r8
 80027f6:	6923      	ldr	r3, [r4, #16]
 80027f8:	47d0      	blx	sl
 80027fa:	3001      	adds	r0, #1
 80027fc:	d0ad      	beq.n	800275a <_printf_i+0x15e>
 80027fe:	6823      	ldr	r3, [r4, #0]
 8002800:	079b      	lsls	r3, r3, #30
 8002802:	d413      	bmi.n	800282c <_printf_i+0x230>
 8002804:	68e0      	ldr	r0, [r4, #12]
 8002806:	9b03      	ldr	r3, [sp, #12]
 8002808:	4298      	cmp	r0, r3
 800280a:	bfb8      	it	lt
 800280c:	4618      	movlt	r0, r3
 800280e:	e7a6      	b.n	800275e <_printf_i+0x162>
 8002810:	2301      	movs	r3, #1
 8002812:	4632      	mov	r2, r6
 8002814:	4649      	mov	r1, r9
 8002816:	4640      	mov	r0, r8
 8002818:	47d0      	blx	sl
 800281a:	3001      	adds	r0, #1
 800281c:	d09d      	beq.n	800275a <_printf_i+0x15e>
 800281e:	3501      	adds	r5, #1
 8002820:	68e3      	ldr	r3, [r4, #12]
 8002822:	9903      	ldr	r1, [sp, #12]
 8002824:	1a5b      	subs	r3, r3, r1
 8002826:	42ab      	cmp	r3, r5
 8002828:	dcf2      	bgt.n	8002810 <_printf_i+0x214>
 800282a:	e7eb      	b.n	8002804 <_printf_i+0x208>
 800282c:	2500      	movs	r5, #0
 800282e:	f104 0619 	add.w	r6, r4, #25
 8002832:	e7f5      	b.n	8002820 <_printf_i+0x224>
 8002834:	080029aa 	.word	0x080029aa
 8002838:	080029bb 	.word	0x080029bb

0800283c <memmove>:
 800283c:	4288      	cmp	r0, r1
 800283e:	b510      	push	{r4, lr}
 8002840:	eb01 0402 	add.w	r4, r1, r2
 8002844:	d902      	bls.n	800284c <memmove+0x10>
 8002846:	4284      	cmp	r4, r0
 8002848:	4623      	mov	r3, r4
 800284a:	d807      	bhi.n	800285c <memmove+0x20>
 800284c:	1e43      	subs	r3, r0, #1
 800284e:	42a1      	cmp	r1, r4
 8002850:	d008      	beq.n	8002864 <memmove+0x28>
 8002852:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002856:	f803 2f01 	strb.w	r2, [r3, #1]!
 800285a:	e7f8      	b.n	800284e <memmove+0x12>
 800285c:	4601      	mov	r1, r0
 800285e:	4402      	add	r2, r0
 8002860:	428a      	cmp	r2, r1
 8002862:	d100      	bne.n	8002866 <memmove+0x2a>
 8002864:	bd10      	pop	{r4, pc}
 8002866:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800286a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800286e:	e7f7      	b.n	8002860 <memmove+0x24>

08002870 <_sbrk_r>:
 8002870:	b538      	push	{r3, r4, r5, lr}
 8002872:	2300      	movs	r3, #0
 8002874:	4d05      	ldr	r5, [pc, #20]	@ (800288c <_sbrk_r+0x1c>)
 8002876:	4604      	mov	r4, r0
 8002878:	4608      	mov	r0, r1
 800287a:	602b      	str	r3, [r5, #0]
 800287c:	f7ff fb52 	bl	8001f24 <_sbrk>
 8002880:	1c43      	adds	r3, r0, #1
 8002882:	d102      	bne.n	800288a <_sbrk_r+0x1a>
 8002884:	682b      	ldr	r3, [r5, #0]
 8002886:	b103      	cbz	r3, 800288a <_sbrk_r+0x1a>
 8002888:	6023      	str	r3, [r4, #0]
 800288a:	bd38      	pop	{r3, r4, r5, pc}
 800288c:	20000408 	.word	0x20000408

08002890 <memchr>:
 8002890:	4603      	mov	r3, r0
 8002892:	b510      	push	{r4, lr}
 8002894:	b2c9      	uxtb	r1, r1
 8002896:	4402      	add	r2, r0
 8002898:	4293      	cmp	r3, r2
 800289a:	4618      	mov	r0, r3
 800289c:	d101      	bne.n	80028a2 <memchr+0x12>
 800289e:	2000      	movs	r0, #0
 80028a0:	e003      	b.n	80028aa <memchr+0x1a>
 80028a2:	7804      	ldrb	r4, [r0, #0]
 80028a4:	3301      	adds	r3, #1
 80028a6:	428c      	cmp	r4, r1
 80028a8:	d1f6      	bne.n	8002898 <memchr+0x8>
 80028aa:	bd10      	pop	{r4, pc}

080028ac <memcpy>:
 80028ac:	440a      	add	r2, r1
 80028ae:	4291      	cmp	r1, r2
 80028b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80028b4:	d100      	bne.n	80028b8 <memcpy+0xc>
 80028b6:	4770      	bx	lr
 80028b8:	b510      	push	{r4, lr}
 80028ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028be:	4291      	cmp	r1, r2
 80028c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80028c4:	d1f9      	bne.n	80028ba <memcpy+0xe>
 80028c6:	bd10      	pop	{r4, pc}

080028c8 <_realloc_r>:
 80028c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028cc:	4680      	mov	r8, r0
 80028ce:	4615      	mov	r5, r2
 80028d0:	460c      	mov	r4, r1
 80028d2:	b921      	cbnz	r1, 80028de <_realloc_r+0x16>
 80028d4:	4611      	mov	r1, r2
 80028d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80028da:	f7ff bc39 	b.w	8002150 <_malloc_r>
 80028de:	b92a      	cbnz	r2, 80028ec <_realloc_r+0x24>
 80028e0:	f7ff fbcc 	bl	800207c <_free_r>
 80028e4:	2400      	movs	r4, #0
 80028e6:	4620      	mov	r0, r4
 80028e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028ec:	f000 f81a 	bl	8002924 <_malloc_usable_size_r>
 80028f0:	4285      	cmp	r5, r0
 80028f2:	4606      	mov	r6, r0
 80028f4:	d802      	bhi.n	80028fc <_realloc_r+0x34>
 80028f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80028fa:	d8f4      	bhi.n	80028e6 <_realloc_r+0x1e>
 80028fc:	4629      	mov	r1, r5
 80028fe:	4640      	mov	r0, r8
 8002900:	f7ff fc26 	bl	8002150 <_malloc_r>
 8002904:	4607      	mov	r7, r0
 8002906:	2800      	cmp	r0, #0
 8002908:	d0ec      	beq.n	80028e4 <_realloc_r+0x1c>
 800290a:	42b5      	cmp	r5, r6
 800290c:	462a      	mov	r2, r5
 800290e:	4621      	mov	r1, r4
 8002910:	bf28      	it	cs
 8002912:	4632      	movcs	r2, r6
 8002914:	f7ff ffca 	bl	80028ac <memcpy>
 8002918:	4621      	mov	r1, r4
 800291a:	4640      	mov	r0, r8
 800291c:	f7ff fbae 	bl	800207c <_free_r>
 8002920:	463c      	mov	r4, r7
 8002922:	e7e0      	b.n	80028e6 <_realloc_r+0x1e>

08002924 <_malloc_usable_size_r>:
 8002924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002928:	1f18      	subs	r0, r3, #4
 800292a:	2b00      	cmp	r3, #0
 800292c:	bfbc      	itt	lt
 800292e:	580b      	ldrlt	r3, [r1, r0]
 8002930:	18c0      	addlt	r0, r0, r3
 8002932:	4770      	bx	lr

08002934 <_init>:
 8002934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002936:	bf00      	nop
 8002938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293a:	bc08      	pop	{r3}
 800293c:	469e      	mov	lr, r3
 800293e:	4770      	bx	lr

08002940 <_fini>:
 8002940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002942:	bf00      	nop
 8002944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002946:	bc08      	pop	{r3}
 8002948:	469e      	mov	lr, r3
 800294a:	4770      	bx	lr
