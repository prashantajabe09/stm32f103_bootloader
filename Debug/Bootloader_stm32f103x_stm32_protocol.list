
Bootloader_stm32f103x_stm32_protocol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a04  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08002b34  08002b34  000040cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08002b34  08002b34  000040cc  2**0
                  CONTENTS
  4 .ARM          00000000  08002b34  08002b34  000040cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b34  08002b34  000040cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b34  08002b34  00003b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b38  08002b38  00003b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  08002b3c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  200000cc  08002c08  000040cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  08002c08  00004360  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000040cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003cd7  00000000  00000000  000040f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000106c  00000000  00000000  00007dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003d8  00000000  00000000  00008e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002c8  00000000  00000000  00009210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000214d  00000000  00000000  000094d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003c03  00000000  00000000  0000b625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000781a  00000000  00000000  0000f228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00016a42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010d8  00000000  00000000  00016a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00017b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000cc 	.word	0x200000cc
 800014c:	00000000 	.word	0x00000000
 8000150:	08002b1c 	.word	0x08002b1c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000d0 	.word	0x200000d0
 800016c:	08002b1c 	.word	0x08002b1c

08000170 <__aeabi_fmul>:
 8000170:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000174:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000178:	bf1e      	ittt	ne
 800017a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800017e:	ea92 0f0c 	teqne	r2, ip
 8000182:	ea93 0f0c 	teqne	r3, ip
 8000186:	d06f      	beq.n	8000268 <__aeabi_fmul+0xf8>
 8000188:	441a      	add	r2, r3
 800018a:	ea80 0c01 	eor.w	ip, r0, r1
 800018e:	0240      	lsls	r0, r0, #9
 8000190:	bf18      	it	ne
 8000192:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000196:	d01e      	beq.n	80001d6 <__aeabi_fmul+0x66>
 8000198:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800019c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001a0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001a4:	fba0 3101 	umull	r3, r1, r0, r1
 80001a8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80001ac:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001b0:	bf3e      	ittt	cc
 80001b2:	0049      	lslcc	r1, r1, #1
 80001b4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001b8:	005b      	lslcc	r3, r3, #1
 80001ba:	ea40 0001 	orr.w	r0, r0, r1
 80001be:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001c2:	2afd      	cmp	r2, #253	@ 0xfd
 80001c4:	d81d      	bhi.n	8000202 <__aeabi_fmul+0x92>
 80001c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ce:	bf08      	it	eq
 80001d0:	f020 0001 	biceq.w	r0, r0, #1
 80001d4:	4770      	bx	lr
 80001d6:	f090 0f00 	teq	r0, #0
 80001da:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001de:	bf08      	it	eq
 80001e0:	0249      	lsleq	r1, r1, #9
 80001e2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001e6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ea:	3a7f      	subs	r2, #127	@ 0x7f
 80001ec:	bfc2      	ittt	gt
 80001ee:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001f2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001f6:	4770      	bxgt	lr
 80001f8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001fc:	f04f 0300 	mov.w	r3, #0
 8000200:	3a01      	subs	r2, #1
 8000202:	dc5d      	bgt.n	80002c0 <__aeabi_fmul+0x150>
 8000204:	f112 0f19 	cmn.w	r2, #25
 8000208:	bfdc      	itt	le
 800020a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800020e:	4770      	bxle	lr
 8000210:	f1c2 0200 	rsb	r2, r2, #0
 8000214:	0041      	lsls	r1, r0, #1
 8000216:	fa21 f102 	lsr.w	r1, r1, r2
 800021a:	f1c2 0220 	rsb	r2, r2, #32
 800021e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000222:	ea5f 0031 	movs.w	r0, r1, rrx
 8000226:	f140 0000 	adc.w	r0, r0, #0
 800022a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800022e:	bf08      	it	eq
 8000230:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000234:	4770      	bx	lr
 8000236:	f092 0f00 	teq	r2, #0
 800023a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800023e:	bf02      	ittt	eq
 8000240:	0040      	lsleq	r0, r0, #1
 8000242:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000246:	3a01      	subeq	r2, #1
 8000248:	d0f9      	beq.n	800023e <__aeabi_fmul+0xce>
 800024a:	ea40 000c 	orr.w	r0, r0, ip
 800024e:	f093 0f00 	teq	r3, #0
 8000252:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000256:	bf02      	ittt	eq
 8000258:	0049      	lsleq	r1, r1, #1
 800025a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800025e:	3b01      	subeq	r3, #1
 8000260:	d0f9      	beq.n	8000256 <__aeabi_fmul+0xe6>
 8000262:	ea41 010c 	orr.w	r1, r1, ip
 8000266:	e78f      	b.n	8000188 <__aeabi_fmul+0x18>
 8000268:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800026c:	ea92 0f0c 	teq	r2, ip
 8000270:	bf18      	it	ne
 8000272:	ea93 0f0c 	teqne	r3, ip
 8000276:	d00a      	beq.n	800028e <__aeabi_fmul+0x11e>
 8000278:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800027c:	bf18      	it	ne
 800027e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000282:	d1d8      	bne.n	8000236 <__aeabi_fmul+0xc6>
 8000284:	ea80 0001 	eor.w	r0, r0, r1
 8000288:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f090 0f00 	teq	r0, #0
 8000292:	bf17      	itett	ne
 8000294:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000298:	4608      	moveq	r0, r1
 800029a:	f091 0f00 	teqne	r1, #0
 800029e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80002a2:	d014      	beq.n	80002ce <__aeabi_fmul+0x15e>
 80002a4:	ea92 0f0c 	teq	r2, ip
 80002a8:	d101      	bne.n	80002ae <__aeabi_fmul+0x13e>
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	d10f      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002ae:	ea93 0f0c 	teq	r3, ip
 80002b2:	d103      	bne.n	80002bc <__aeabi_fmul+0x14c>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	bf18      	it	ne
 80002b8:	4608      	movne	r0, r1
 80002ba:	d108      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002bc:	ea80 0001 	eor.w	r0, r0, r1
 80002c0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002c4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002cc:	4770      	bx	lr
 80002ce:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002d2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002d6:	4770      	bx	lr

080002d8 <__aeabi_drsub>:
 80002d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002dc:	e002      	b.n	80002e4 <__adddf3>
 80002de:	bf00      	nop

080002e0 <__aeabi_dsub>:
 80002e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002e4 <__adddf3>:
 80002e4:	b530      	push	{r4, r5, lr}
 80002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ee:	ea94 0f05 	teq	r4, r5
 80002f2:	bf08      	it	eq
 80002f4:	ea90 0f02 	teqeq	r0, r2
 80002f8:	bf1f      	itttt	ne
 80002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030a:	f000 80e2 	beq.w	80004d2 <__adddf3+0x1ee>
 800030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000316:	bfb8      	it	lt
 8000318:	426d      	neglt	r5, r5
 800031a:	dd0c      	ble.n	8000336 <__adddf3+0x52>
 800031c:	442c      	add	r4, r5
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	ea82 0000 	eor.w	r0, r2, r0
 800032a:	ea83 0101 	eor.w	r1, r3, r1
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	2d36      	cmp	r5, #54	@ 0x36
 8000338:	bf88      	it	hi
 800033a:	bd30      	pophi	{r4, r5, pc}
 800033c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000344:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800034c:	d002      	beq.n	8000354 <__adddf3+0x70>
 800034e:	4240      	negs	r0, r0
 8000350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000354:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000360:	d002      	beq.n	8000368 <__adddf3+0x84>
 8000362:	4252      	negs	r2, r2
 8000364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000368:	ea94 0f05 	teq	r4, r5
 800036c:	f000 80a7 	beq.w	80004be <__adddf3+0x1da>
 8000370:	f1a4 0401 	sub.w	r4, r4, #1
 8000374:	f1d5 0e20 	rsbs	lr, r5, #32
 8000378:	db0d      	blt.n	8000396 <__adddf3+0xb2>
 800037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037e:	fa22 f205 	lsr.w	r2, r2, r5
 8000382:	1880      	adds	r0, r0, r2
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	fa03 f20e 	lsl.w	r2, r3, lr
 800038c:	1880      	adds	r0, r0, r2
 800038e:	fa43 f305 	asr.w	r3, r3, r5
 8000392:	4159      	adcs	r1, r3
 8000394:	e00e      	b.n	80003b4 <__adddf3+0xd0>
 8000396:	f1a5 0520 	sub.w	r5, r5, #32
 800039a:	f10e 0e20 	add.w	lr, lr, #32
 800039e:	2a01      	cmp	r2, #1
 80003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a4:	bf28      	it	cs
 80003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003aa:	fa43 f305 	asr.w	r3, r3, r5
 80003ae:	18c0      	adds	r0, r0, r3
 80003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b8:	d507      	bpl.n	80003ca <__adddf3+0xe6>
 80003ba:	f04f 0e00 	mov.w	lr, #0
 80003be:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ce:	d31b      	bcc.n	8000408 <__adddf3+0x124>
 80003d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003d4:	d30c      	bcc.n	80003f0 <__adddf3+0x10c>
 80003d6:	0849      	lsrs	r1, r1, #1
 80003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e0:	f104 0401 	add.w	r4, r4, #1
 80003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003ec:	f080 809a 	bcs.w	8000524 <__adddf3+0x240>
 80003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003f4:	bf08      	it	eq
 80003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fa:	f150 0000 	adcs.w	r0, r0, #0
 80003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000402:	ea41 0105 	orr.w	r1, r1, r5
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800040c:	4140      	adcs	r0, r0
 800040e:	eb41 0101 	adc.w	r1, r1, r1
 8000412:	3c01      	subs	r4, #1
 8000414:	bf28      	it	cs
 8000416:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800041a:	d2e9      	bcs.n	80003f0 <__adddf3+0x10c>
 800041c:	f091 0f00 	teq	r1, #0
 8000420:	bf04      	itt	eq
 8000422:	4601      	moveq	r1, r0
 8000424:	2000      	moveq	r0, #0
 8000426:	fab1 f381 	clz	r3, r1
 800042a:	bf08      	it	eq
 800042c:	3320      	addeq	r3, #32
 800042e:	f1a3 030b 	sub.w	r3, r3, #11
 8000432:	f1b3 0220 	subs.w	r2, r3, #32
 8000436:	da0c      	bge.n	8000452 <__adddf3+0x16e>
 8000438:	320c      	adds	r2, #12
 800043a:	dd08      	ble.n	800044e <__adddf3+0x16a>
 800043c:	f102 0c14 	add.w	ip, r2, #20
 8000440:	f1c2 020c 	rsb	r2, r2, #12
 8000444:	fa01 f00c 	lsl.w	r0, r1, ip
 8000448:	fa21 f102 	lsr.w	r1, r1, r2
 800044c:	e00c      	b.n	8000468 <__adddf3+0x184>
 800044e:	f102 0214 	add.w	r2, r2, #20
 8000452:	bfd8      	it	le
 8000454:	f1c2 0c20 	rsble	ip, r2, #32
 8000458:	fa01 f102 	lsl.w	r1, r1, r2
 800045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000460:	bfdc      	itt	le
 8000462:	ea41 010c 	orrle.w	r1, r1, ip
 8000466:	4090      	lslle	r0, r2
 8000468:	1ae4      	subs	r4, r4, r3
 800046a:	bfa2      	ittt	ge
 800046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000470:	4329      	orrge	r1, r5
 8000472:	bd30      	popge	{r4, r5, pc}
 8000474:	ea6f 0404 	mvn.w	r4, r4
 8000478:	3c1f      	subs	r4, #31
 800047a:	da1c      	bge.n	80004b6 <__adddf3+0x1d2>
 800047c:	340c      	adds	r4, #12
 800047e:	dc0e      	bgt.n	800049e <__adddf3+0x1ba>
 8000480:	f104 0414 	add.w	r4, r4, #20
 8000484:	f1c4 0220 	rsb	r2, r4, #32
 8000488:	fa20 f004 	lsr.w	r0, r0, r4
 800048c:	fa01 f302 	lsl.w	r3, r1, r2
 8000490:	ea40 0003 	orr.w	r0, r0, r3
 8000494:	fa21 f304 	lsr.w	r3, r1, r4
 8000498:	ea45 0103 	orr.w	r1, r5, r3
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f1c4 040c 	rsb	r4, r4, #12
 80004a2:	f1c4 0220 	rsb	r2, r4, #32
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 f304 	lsl.w	r3, r1, r4
 80004ae:	ea40 0003 	orr.w	r0, r0, r3
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	f094 0f00 	teq	r4, #0
 80004c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004c6:	bf06      	itte	eq
 80004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004cc:	3401      	addeq	r4, #1
 80004ce:	3d01      	subne	r5, #1
 80004d0:	e74e      	b.n	8000370 <__adddf3+0x8c>
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf18      	it	ne
 80004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004dc:	d029      	beq.n	8000532 <__adddf3+0x24e>
 80004de:	ea94 0f05 	teq	r4, r5
 80004e2:	bf08      	it	eq
 80004e4:	ea90 0f02 	teqeq	r0, r2
 80004e8:	d005      	beq.n	80004f6 <__adddf3+0x212>
 80004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ee:	bf04      	itt	eq
 80004f0:	4619      	moveq	r1, r3
 80004f2:	4610      	moveq	r0, r2
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	ea91 0f03 	teq	r1, r3
 80004fa:	bf1e      	ittt	ne
 80004fc:	2100      	movne	r1, #0
 80004fe:	2000      	movne	r0, #0
 8000500:	bd30      	popne	{r4, r5, pc}
 8000502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000506:	d105      	bne.n	8000514 <__adddf3+0x230>
 8000508:	0040      	lsls	r0, r0, #1
 800050a:	4149      	adcs	r1, r1
 800050c:	bf28      	it	cs
 800050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000512:	bd30      	pop	{r4, r5, pc}
 8000514:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000518:	bf3c      	itt	cc
 800051a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800051e:	bd30      	popcc	{r4, r5, pc}
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000524:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000528:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800052c:	f04f 0000 	mov.w	r0, #0
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000536:	bf1a      	itte	ne
 8000538:	4619      	movne	r1, r3
 800053a:	4610      	movne	r0, r2
 800053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000540:	bf1c      	itt	ne
 8000542:	460b      	movne	r3, r1
 8000544:	4602      	movne	r2, r0
 8000546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054a:	bf06      	itte	eq
 800054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000550:	ea91 0f03 	teqeq	r1, r3
 8000554:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	bf00      	nop

0800055c <__aeabi_ui2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000570:	f04f 0500 	mov.w	r5, #0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e750      	b.n	800041c <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_i2d>:
 800057c:	f090 0f00 	teq	r0, #0
 8000580:	bf04      	itt	eq
 8000582:	2100      	moveq	r1, #0
 8000584:	4770      	bxeq	lr
 8000586:	b530      	push	{r4, r5, lr}
 8000588:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800058c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000590:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000594:	bf48      	it	mi
 8000596:	4240      	negmi	r0, r0
 8000598:	f04f 0100 	mov.w	r1, #0
 800059c:	e73e      	b.n	800041c <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_f2d>:
 80005a0:	0042      	lsls	r2, r0, #1
 80005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ae:	bf1f      	itttt	ne
 80005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005bc:	4770      	bxne	lr
 80005be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005c2:	bf08      	it	eq
 80005c4:	4770      	bxeq	lr
 80005c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ca:	bf04      	itt	eq
 80005cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d0:	4770      	bxeq	lr
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	e71c      	b.n	800041c <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_ul2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	e00a      	b.n	800060a <__aeabi_l2d+0x16>

080005f4 <__aeabi_l2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000602:	d502      	bpl.n	800060a <__aeabi_l2d+0x16>
 8000604:	4240      	negs	r0, r0
 8000606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800060e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000616:	f43f aed8 	beq.w	80003ca <__adddf3+0xe6>
 800061a:	f04f 0203 	mov.w	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	fa00 fc03 	lsl.w	ip, r0, r3
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000642:	ea40 000e 	orr.w	r0, r0, lr
 8000646:	fa21 f102 	lsr.w	r1, r1, r2
 800064a:	4414      	add	r4, r2
 800064c:	e6bd      	b.n	80003ca <__adddf3+0xe6>
 800064e:	bf00      	nop

08000650 <__aeabi_dmul>:
 8000650:	b570      	push	{r4, r5, r6, lr}
 8000652:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000656:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065e:	bf1d      	ittte	ne
 8000660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000664:	ea94 0f0c 	teqne	r4, ip
 8000668:	ea95 0f0c 	teqne	r5, ip
 800066c:	f000 f8de 	bleq	800082c <__aeabi_dmul+0x1dc>
 8000670:	442c      	add	r4, r5
 8000672:	ea81 0603 	eor.w	r6, r1, r3
 8000676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000682:	bf18      	it	ne
 8000684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000688:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800068c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000690:	d038      	beq.n	8000704 <__aeabi_dmul+0xb4>
 8000692:	fba0 ce02 	umull	ip, lr, r0, r2
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a6:	f04f 0600 	mov.w	r6, #0
 80006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ae:	f09c 0f00 	teq	ip, #0
 80006b2:	bf18      	it	ne
 80006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006c4:	d204      	bcs.n	80006d0 <__aeabi_dmul+0x80>
 80006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ca:	416d      	adcs	r5, r5
 80006cc:	eb46 0606 	adc.w	r6, r6, r6
 80006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e8:	bf88      	it	hi
 80006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006ee:	d81e      	bhi.n	800072e <__aeabi_dmul+0xde>
 80006f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006f4:	bf08      	it	eq
 80006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006fa:	f150 0000 	adcs.w	r0, r0, #0
 80006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000708:	ea46 0101 	orr.w	r1, r6, r1
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000718:	bfc2      	ittt	gt
 800071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000722:	bd70      	popgt	{r4, r5, r6, pc}
 8000724:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000728:	f04f 0e00 	mov.w	lr, #0
 800072c:	3c01      	subs	r4, #1
 800072e:	f300 80ab 	bgt.w	8000888 <__aeabi_dmul+0x238>
 8000732:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000736:	bfde      	ittt	le
 8000738:	2000      	movle	r0, #0
 800073a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800073e:	bd70      	pople	{r4, r5, r6, pc}
 8000740:	f1c4 0400 	rsb	r4, r4, #0
 8000744:	3c20      	subs	r4, #32
 8000746:	da35      	bge.n	80007b4 <__aeabi_dmul+0x164>
 8000748:	340c      	adds	r4, #12
 800074a:	dc1b      	bgt.n	8000784 <__aeabi_dmul+0x134>
 800074c:	f104 0414 	add.w	r4, r4, #20
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f305 	lsl.w	r3, r0, r5
 8000758:	fa20 f004 	lsr.w	r0, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000768:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000770:	fa21 f604 	lsr.w	r6, r1, r4
 8000774:	eb42 0106 	adc.w	r1, r2, r6
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 040c 	rsb	r4, r4, #12
 8000788:	f1c4 0520 	rsb	r5, r4, #32
 800078c:	fa00 f304 	lsl.w	r3, r0, r4
 8000790:	fa20 f005 	lsr.w	r0, r0, r5
 8000794:	fa01 f204 	lsl.w	r2, r1, r4
 8000798:	ea40 0002 	orr.w	r0, r0, r2
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a4:	f141 0100 	adc.w	r1, r1, #0
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f1c4 0520 	rsb	r5, r4, #32
 80007b8:	fa00 f205 	lsl.w	r2, r0, r5
 80007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c0:	fa20 f304 	lsr.w	r3, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea43 0302 	orr.w	r3, r3, r2
 80007cc:	fa21 f004 	lsr.w	r0, r1, r4
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007d4:	fa21 f204 	lsr.w	r2, r1, r4
 80007d8:	ea20 0002 	bic.w	r0, r0, r2
 80007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f094 0f00 	teq	r4, #0
 80007f0:	d10f      	bne.n	8000812 <__aeabi_dmul+0x1c2>
 80007f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007f6:	0040      	lsls	r0, r0, #1
 80007f8:	eb41 0101 	adc.w	r1, r1, r1
 80007fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000800:	bf08      	it	eq
 8000802:	3c01      	subeq	r4, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1a6>
 8000806:	ea41 0106 	orr.w	r1, r1, r6
 800080a:	f095 0f00 	teq	r5, #0
 800080e:	bf18      	it	ne
 8000810:	4770      	bxne	lr
 8000812:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000816:	0052      	lsls	r2, r2, #1
 8000818:	eb43 0303 	adc.w	r3, r3, r3
 800081c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000820:	bf08      	it	eq
 8000822:	3d01      	subeq	r5, #1
 8000824:	d0f7      	beq.n	8000816 <__aeabi_dmul+0x1c6>
 8000826:	ea43 0306 	orr.w	r3, r3, r6
 800082a:	4770      	bx	lr
 800082c:	ea94 0f0c 	teq	r4, ip
 8000830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000834:	bf18      	it	ne
 8000836:	ea95 0f0c 	teqne	r5, ip
 800083a:	d00c      	beq.n	8000856 <__aeabi_dmul+0x206>
 800083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000840:	bf18      	it	ne
 8000842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000846:	d1d1      	bne.n	80007ec <__aeabi_dmul+0x19c>
 8000848:	ea81 0103 	eor.w	r1, r1, r3
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085a:	bf06      	itte	eq
 800085c:	4610      	moveq	r0, r2
 800085e:	4619      	moveq	r1, r3
 8000860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000864:	d019      	beq.n	800089a <__aeabi_dmul+0x24a>
 8000866:	ea94 0f0c 	teq	r4, ip
 800086a:	d102      	bne.n	8000872 <__aeabi_dmul+0x222>
 800086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000870:	d113      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000872:	ea95 0f0c 	teq	r5, ip
 8000876:	d105      	bne.n	8000884 <__aeabi_dmul+0x234>
 8000878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800087c:	bf1c      	itt	ne
 800087e:	4610      	movne	r0, r2
 8000880:	4619      	movne	r1, r3
 8000882:	d10a      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000884:	ea81 0103 	eor.w	r1, r1, r3
 8000888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800088c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000890:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	bd70      	pop	{r4, r5, r6, pc}
 800089a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800089e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008a2:	bd70      	pop	{r4, r5, r6, pc}

080008a4 <__aeabi_ddiv>:
 80008a4:	b570      	push	{r4, r5, r6, lr}
 80008a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b2:	bf1d      	ittte	ne
 80008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b8:	ea94 0f0c 	teqne	r4, ip
 80008bc:	ea95 0f0c 	teqne	r5, ip
 80008c0:	f000 f8a7 	bleq	8000a12 <__aeabi_ddiv+0x16e>
 80008c4:	eba4 0405 	sub.w	r4, r4, r5
 80008c8:	ea81 0e03 	eor.w	lr, r1, r3
 80008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d4:	f000 8088 	beq.w	80009e8 <__aeabi_ddiv+0x144>
 80008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008fc:	429d      	cmp	r5, r3
 80008fe:	bf08      	it	eq
 8000900:	4296      	cmpeq	r6, r2
 8000902:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000906:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800090a:	d202      	bcs.n	8000912 <__aeabi_ddiv+0x6e>
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	1ab6      	subs	r6, r6, r2
 8000914:	eb65 0503 	sbc.w	r5, r5, r3
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000922:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 000c 	orrcs.w	r0, r0, ip
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000980:	ea55 0e06 	orrs.w	lr, r5, r6
 8000984:	d018      	beq.n	80009b8 <__aeabi_ddiv+0x114>
 8000986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009a2:	d1c0      	bne.n	8000926 <__aeabi_ddiv+0x82>
 80009a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a8:	d10b      	bne.n	80009c2 <__aeabi_ddiv+0x11e>
 80009aa:	ea41 0100 	orr.w	r1, r1, r0
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009b6:	e7b6      	b.n	8000926 <__aeabi_ddiv+0x82>
 80009b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009bc:	bf04      	itt	eq
 80009be:	4301      	orreq	r1, r0
 80009c0:	2000      	moveq	r0, #0
 80009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009c6:	bf88      	it	hi
 80009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009cc:	f63f aeaf 	bhi.w	800072e <__aeabi_dmul+0xde>
 80009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d4:	bf04      	itt	eq
 80009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009de:	f150 0000 	adcs.w	r0, r0, #0
 80009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	pop	{r4, r5, r6, pc}
 80009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f4:	bfc2      	ittt	gt
 80009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000a00:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a04:	f04f 0e00 	mov.w	lr, #0
 8000a08:	3c01      	subs	r4, #1
 8000a0a:	e690      	b.n	800072e <__aeabi_dmul+0xde>
 8000a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a10:	e68d      	b.n	800072e <__aeabi_dmul+0xde>
 8000a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a16:	ea94 0f0c 	teq	r4, ip
 8000a1a:	bf08      	it	eq
 8000a1c:	ea95 0f0c 	teqeq	r5, ip
 8000a20:	f43f af3b 	beq.w	800089a <__aeabi_dmul+0x24a>
 8000a24:	ea94 0f0c 	teq	r4, ip
 8000a28:	d10a      	bne.n	8000a40 <__aeabi_ddiv+0x19c>
 8000a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2e:	f47f af34 	bne.w	800089a <__aeabi_dmul+0x24a>
 8000a32:	ea95 0f0c 	teq	r5, ip
 8000a36:	f47f af25 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	e72c      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a40:	ea95 0f0c 	teq	r5, ip
 8000a44:	d106      	bne.n	8000a54 <__aeabi_ddiv+0x1b0>
 8000a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a4a:	f43f aefd 	beq.w	8000848 <__aeabi_dmul+0x1f8>
 8000a4e:	4610      	mov	r0, r2
 8000a50:	4619      	mov	r1, r3
 8000a52:	e722      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5e:	f47f aec5 	bne.w	80007ec <__aeabi_dmul+0x19c>
 8000a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a66:	f47f af0d 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6e:	f47f aeeb 	bne.w	8000848 <__aeabi_dmul+0x1f8>
 8000a72:	e712      	b.n	800089a <__aeabi_dmul+0x24a>

08000a74 <__aeabi_d2f>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a7c:	bf24      	itt	cs
 8000a7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a86:	d90d      	bls.n	8000aa4 <__aeabi_d2f+0x30>
 8000a88:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a94:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a9c:	bf08      	it	eq
 8000a9e:	f020 0001 	biceq.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aa8:	d121      	bne.n	8000aee <__aeabi_d2f+0x7a>
 8000aaa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aae:	bfbc      	itt	lt
 8000ab0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	4770      	bxlt	lr
 8000ab6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000abe:	f1c2 0218 	rsb	r2, r2, #24
 8000ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aca:	fa20 f002 	lsr.w	r0, r0, r2
 8000ace:	bf18      	it	ne
 8000ad0:	f040 0001 	orrne.w	r0, r0, #1
 8000ad4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000adc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae0:	ea40 000c 	orr.w	r0, r0, ip
 8000ae4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aec:	e7cc      	b.n	8000a88 <__aeabi_d2f+0x14>
 8000aee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af2:	d107      	bne.n	8000b04 <__aeabi_d2f+0x90>
 8000af4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af8:	bf1e      	ittt	ne
 8000afa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000afe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b02:	4770      	bxne	lr
 8000b04:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_frsub>:
 8000b14:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b18:	e002      	b.n	8000b20 <__addsf3>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_fsub>:
 8000b1c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b20 <__addsf3>:
 8000b20:	0042      	lsls	r2, r0, #1
 8000b22:	bf1f      	itttt	ne
 8000b24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b28:	ea92 0f03 	teqne	r2, r3
 8000b2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b34:	d06a      	beq.n	8000c0c <__addsf3+0xec>
 8000b36:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b3e:	bfc1      	itttt	gt
 8000b40:	18d2      	addgt	r2, r2, r3
 8000b42:	4041      	eorgt	r1, r0
 8000b44:	4048      	eorgt	r0, r1
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	bfb8      	it	lt
 8000b4a:	425b      	neglt	r3, r3
 8000b4c:	2b19      	cmp	r3, #25
 8000b4e:	bf88      	it	hi
 8000b50:	4770      	bxhi	lr
 8000b52:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b56:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b5a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b5e:	bf18      	it	ne
 8000b60:	4240      	negne	r0, r0
 8000b62:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b66:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b6a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4249      	negne	r1, r1
 8000b72:	ea92 0f03 	teq	r2, r3
 8000b76:	d03f      	beq.n	8000bf8 <__addsf3+0xd8>
 8000b78:	f1a2 0201 	sub.w	r2, r2, #1
 8000b7c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b80:	eb10 000c 	adds.w	r0, r0, ip
 8000b84:	f1c3 0320 	rsb	r3, r3, #32
 8000b88:	fa01 f103 	lsl.w	r1, r1, r3
 8000b8c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b90:	d502      	bpl.n	8000b98 <__addsf3+0x78>
 8000b92:	4249      	negs	r1, r1
 8000b94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b98:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b9c:	d313      	bcc.n	8000bc6 <__addsf3+0xa6>
 8000b9e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ba2:	d306      	bcc.n	8000bb2 <__addsf3+0x92>
 8000ba4:	0840      	lsrs	r0, r0, #1
 8000ba6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000baa:	f102 0201 	add.w	r2, r2, #1
 8000bae:	2afe      	cmp	r2, #254	@ 0xfe
 8000bb0:	d251      	bcs.n	8000c56 <__addsf3+0x136>
 8000bb2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bba:	bf08      	it	eq
 8000bbc:	f020 0001 	biceq.w	r0, r0, #1
 8000bc0:	ea40 0003 	orr.w	r0, r0, r3
 8000bc4:	4770      	bx	lr
 8000bc6:	0049      	lsls	r1, r1, #1
 8000bc8:	eb40 0000 	adc.w	r0, r0, r0
 8000bcc:	3a01      	subs	r2, #1
 8000bce:	bf28      	it	cs
 8000bd0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bd4:	d2ed      	bcs.n	8000bb2 <__addsf3+0x92>
 8000bd6:	fab0 fc80 	clz	ip, r0
 8000bda:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bde:	ebb2 020c 	subs.w	r2, r2, ip
 8000be2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000be6:	bfaa      	itet	ge
 8000be8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bec:	4252      	neglt	r2, r2
 8000bee:	4318      	orrge	r0, r3
 8000bf0:	bfbc      	itt	lt
 8000bf2:	40d0      	lsrlt	r0, r2
 8000bf4:	4318      	orrlt	r0, r3
 8000bf6:	4770      	bx	lr
 8000bf8:	f092 0f00 	teq	r2, #0
 8000bfc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c00:	bf06      	itte	eq
 8000c02:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c06:	3201      	addeq	r2, #1
 8000c08:	3b01      	subne	r3, #1
 8000c0a:	e7b5      	b.n	8000b78 <__addsf3+0x58>
 8000c0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c14:	bf18      	it	ne
 8000c16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1a:	d021      	beq.n	8000c60 <__addsf3+0x140>
 8000c1c:	ea92 0f03 	teq	r2, r3
 8000c20:	d004      	beq.n	8000c2c <__addsf3+0x10c>
 8000c22:	f092 0f00 	teq	r2, #0
 8000c26:	bf08      	it	eq
 8000c28:	4608      	moveq	r0, r1
 8000c2a:	4770      	bx	lr
 8000c2c:	ea90 0f01 	teq	r0, r1
 8000c30:	bf1c      	itt	ne
 8000c32:	2000      	movne	r0, #0
 8000c34:	4770      	bxne	lr
 8000c36:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c3a:	d104      	bne.n	8000c46 <__addsf3+0x126>
 8000c3c:	0040      	lsls	r0, r0, #1
 8000c3e:	bf28      	it	cs
 8000c40:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c44:	4770      	bx	lr
 8000c46:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c4a:	bf3c      	itt	cc
 8000c4c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c50:	4770      	bxcc	lr
 8000c52:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c56:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c5e:	4770      	bx	lr
 8000c60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c64:	bf16      	itet	ne
 8000c66:	4608      	movne	r0, r1
 8000c68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c6c:	4601      	movne	r1, r0
 8000c6e:	0242      	lsls	r2, r0, #9
 8000c70:	bf06      	itte	eq
 8000c72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c76:	ea90 0f01 	teqeq	r0, r1
 8000c7a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_ui2f>:
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e004      	b.n	8000c90 <__aeabi_i2f+0x8>
 8000c86:	bf00      	nop

08000c88 <__aeabi_i2f>:
 8000c88:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c8c:	bf48      	it	mi
 8000c8e:	4240      	negmi	r0, r0
 8000c90:	ea5f 0c00 	movs.w	ip, r0
 8000c94:	bf08      	it	eq
 8000c96:	4770      	bxeq	lr
 8000c98:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c9c:	4601      	mov	r1, r0
 8000c9e:	f04f 0000 	mov.w	r0, #0
 8000ca2:	e01c      	b.n	8000cde <__aeabi_l2f+0x2a>

08000ca4 <__aeabi_ul2f>:
 8000ca4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f04f 0300 	mov.w	r3, #0
 8000cb0:	e00a      	b.n	8000cc8 <__aeabi_l2f+0x14>
 8000cb2:	bf00      	nop

08000cb4 <__aeabi_l2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cc0:	d502      	bpl.n	8000cc8 <__aeabi_l2f+0x14>
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	ea5f 0c01 	movs.w	ip, r1
 8000ccc:	bf02      	ittt	eq
 8000cce:	4684      	moveq	ip, r0
 8000cd0:	4601      	moveq	r1, r0
 8000cd2:	2000      	moveq	r0, #0
 8000cd4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cd8:	bf08      	it	eq
 8000cda:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cde:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ce2:	fabc f28c 	clz	r2, ip
 8000ce6:	3a08      	subs	r2, #8
 8000ce8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cec:	db10      	blt.n	8000d10 <__aeabi_l2f+0x5c>
 8000cee:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf2:	4463      	add	r3, ip
 8000cf4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cf8:	f1c2 0220 	rsb	r2, r2, #32
 8000cfc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d00:	fa20 f202 	lsr.w	r2, r0, r2
 8000d04:	eb43 0002 	adc.w	r0, r3, r2
 8000d08:	bf08      	it	eq
 8000d0a:	f020 0001 	biceq.w	r0, r0, #1
 8000d0e:	4770      	bx	lr
 8000d10:	f102 0220 	add.w	r2, r2, #32
 8000d14:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d18:	f1c2 0220 	rsb	r2, r2, #32
 8000d1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d20:	fa21 f202 	lsr.w	r2, r1, r2
 8000d24:	eb43 0002 	adc.w	r0, r3, r2
 8000d28:	bf08      	it	eq
 8000d2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d2e:	4770      	bx	lr

08000d30 <__gesf2>:
 8000d30:	f04f 3cff 	mov.w	ip, #4294967295
 8000d34:	e006      	b.n	8000d44 <__cmpsf2+0x4>
 8000d36:	bf00      	nop

08000d38 <__lesf2>:
 8000d38:	f04f 0c01 	mov.w	ip, #1
 8000d3c:	e002      	b.n	8000d44 <__cmpsf2+0x4>
 8000d3e:	bf00      	nop

08000d40 <__cmpsf2>:
 8000d40:	f04f 0c01 	mov.w	ip, #1
 8000d44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d48:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d54:	bf18      	it	ne
 8000d56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5a:	d011      	beq.n	8000d80 <__cmpsf2+0x40>
 8000d5c:	b001      	add	sp, #4
 8000d5e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d62:	bf18      	it	ne
 8000d64:	ea90 0f01 	teqne	r0, r1
 8000d68:	bf58      	it	pl
 8000d6a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d6e:	bf88      	it	hi
 8000d70:	17c8      	asrhi	r0, r1, #31
 8000d72:	bf38      	it	cc
 8000d74:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d78:	bf18      	it	ne
 8000d7a:	f040 0001 	orrne.w	r0, r0, #1
 8000d7e:	4770      	bx	lr
 8000d80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d84:	d102      	bne.n	8000d8c <__cmpsf2+0x4c>
 8000d86:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d8a:	d105      	bne.n	8000d98 <__cmpsf2+0x58>
 8000d8c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d90:	d1e4      	bne.n	8000d5c <__cmpsf2+0x1c>
 8000d92:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d96:	d0e1      	beq.n	8000d5c <__cmpsf2+0x1c>
 8000d98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop

08000da0 <__aeabi_cfrcmple>:
 8000da0:	4684      	mov	ip, r0
 8000da2:	4608      	mov	r0, r1
 8000da4:	4661      	mov	r1, ip
 8000da6:	e7ff      	b.n	8000da8 <__aeabi_cfcmpeq>

08000da8 <__aeabi_cfcmpeq>:
 8000da8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000daa:	f7ff ffc9 	bl	8000d40 <__cmpsf2>
 8000dae:	2800      	cmp	r0, #0
 8000db0:	bf48      	it	mi
 8000db2:	f110 0f00 	cmnmi.w	r0, #0
 8000db6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000db8 <__aeabi_fcmpeq>:
 8000db8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dbc:	f7ff fff4 	bl	8000da8 <__aeabi_cfcmpeq>
 8000dc0:	bf0c      	ite	eq
 8000dc2:	2001      	moveq	r0, #1
 8000dc4:	2000      	movne	r0, #0
 8000dc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dca:	bf00      	nop

08000dcc <__aeabi_fcmplt>:
 8000dcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd0:	f7ff ffea 	bl	8000da8 <__aeabi_cfcmpeq>
 8000dd4:	bf34      	ite	cc
 8000dd6:	2001      	movcc	r0, #1
 8000dd8:	2000      	movcs	r0, #0
 8000dda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dde:	bf00      	nop

08000de0 <__aeabi_fcmple>:
 8000de0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000de4:	f7ff ffe0 	bl	8000da8 <__aeabi_cfcmpeq>
 8000de8:	bf94      	ite	ls
 8000dea:	2001      	movls	r0, #1
 8000dec:	2000      	movhi	r0, #0
 8000dee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000df2:	bf00      	nop

08000df4 <__aeabi_fcmpge>:
 8000df4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000df8:	f7ff ffd2 	bl	8000da0 <__aeabi_cfrcmple>
 8000dfc:	bf94      	ite	ls
 8000dfe:	2001      	movls	r0, #1
 8000e00:	2000      	movhi	r0, #0
 8000e02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e06:	bf00      	nop

08000e08 <__aeabi_fcmpgt>:
 8000e08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e0c:	f7ff ffc8 	bl	8000da0 <__aeabi_cfrcmple>
 8000e10:	bf34      	ite	cc
 8000e12:	2001      	movcc	r0, #1
 8000e14:	2000      	movcs	r0, #0
 8000e16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e1a:	bf00      	nop

08000e1c <__aeabi_f2iz>:
 8000e1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e20:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e24:	d30f      	bcc.n	8000e46 <__aeabi_f2iz+0x2a>
 8000e26:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e2e:	d90d      	bls.n	8000e4c <__aeabi_f2iz+0x30>
 8000e30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e38:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000e3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000e40:	bf18      	it	ne
 8000e42:	4240      	negne	r0, r0
 8000e44:	4770      	bx	lr
 8000e46:	f04f 0000 	mov.w	r0, #0
 8000e4a:	4770      	bx	lr
 8000e4c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000e50:	d101      	bne.n	8000e56 <__aeabi_f2iz+0x3a>
 8000e52:	0242      	lsls	r2, r0, #9
 8000e54:	d105      	bne.n	8000e62 <__aeabi_f2iz+0x46>
 8000e56:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000e5a:	bf08      	it	eq
 8000e5c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f04f 0000 	mov.w	r0, #0
 8000e66:	4770      	bx	lr

08000e68 <__aeabi_f2uiz>:
 8000e68:	0042      	lsls	r2, r0, #1
 8000e6a:	d20e      	bcs.n	8000e8a <__aeabi_f2uiz+0x22>
 8000e6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e70:	d30b      	bcc.n	8000e8a <__aeabi_f2uiz+0x22>
 8000e72:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e7a:	d409      	bmi.n	8000e90 <__aeabi_f2uiz+0x28>
 8000e7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e84:	fa23 f002 	lsr.w	r0, r3, r2
 8000e88:	4770      	bx	lr
 8000e8a:	f04f 0000 	mov.w	r0, #0
 8000e8e:	4770      	bx	lr
 8000e90:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000e94:	d101      	bne.n	8000e9a <__aeabi_f2uiz+0x32>
 8000e96:	0242      	lsls	r2, r0, #9
 8000e98:	d102      	bne.n	8000ea0 <__aeabi_f2uiz+0x38>
 8000e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9e:	4770      	bx	lr
 8000ea0:	f04f 0000 	mov.w	r0, #0
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <clock_init>:
** Returned value:	Current Source of the system Clock
**
*****************************************************************************/

void clock_init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	ahb_clk_set(p->ahb_prescalar);
 8000eac:	4b17      	ldr	r3, [pc, #92]	@ (8000f0c <clock_init+0x64>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	78db      	ldrb	r3, [r3, #3]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f8c2 	bl	800103c <ahb_clk_set>

	apb1_clk_set(p->apb1_prescalar);
 8000eb8:	4b14      	ldr	r3, [pc, #80]	@ (8000f0c <clock_init+0x64>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	791b      	ldrb	r3, [r3, #4]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f8d6 	bl	8001070 <apb1_clk_set>

	apb2_clk_set(p->apb2_prescalar);
 8000ec4:	4b11      	ldr	r3, [pc, #68]	@ (8000f0c <clock_init+0x64>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	795b      	ldrb	r3, [r3, #5]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 f8ea 	bl	80010a4 <apb2_clk_set>

	pll_clk_config(p->pll_clock_source,p->pll_input_clock_multiplier);
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f0c <clock_init+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	789a      	ldrb	r2, [r3, #2]
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f0c <clock_init+0x64>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	785b      	ldrb	r3, [r3, #1]
 8000edc:	4619      	mov	r1, r3
 8000ede:	4610      	mov	r0, r2
 8000ee0:	f000 f882 	bl	8000fe8 <pll_clk_config>

	system_clock_set(p->system_clock_source);
 8000ee4:	4b09      	ldr	r3, [pc, #36]	@ (8000f0c <clock_init+0x64>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 f812 	bl	8000f14 <system_clock_set>

	ahb_peripheral_clock_en(AHB_PERIPHERAL_CLOCK_EN);
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f000 f915 	bl	8001120 <ahb_peripheral_clock_en>

	apb2_peripheral_clock_en(APB2_PERIPHERAL_CLOCK_EN);
 8000ef6:	f641 201d 	movw	r0, #6685	@ 0x1a1d
 8000efa:	f000 f8ed 	bl	80010d8 <apb2_peripheral_clock_en>

	apb1_peripheral_clock_en(APB1_PERIPHERAL_CLOCK_EN);
 8000efe:	4804      	ldr	r0, [pc, #16]	@ (8000f10 <clock_init+0x68>)
 8000f00:	f000 f8fc 	bl	80010fc <apb1_peripheral_clock_en>

	lsi_clock_en();
 8000f04:	f000 f9d4 	bl	80012b0 <lsi_clock_en>

}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	02420000 	.word	0x02420000

08000f14 <system_clock_set>:
** Returned value:	Current Source of the system Clock
**
*****************************************************************************/

uint8_t system_clock_set(clock_source_e source)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = HSI;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	73fb      	strb	r3, [r7, #15]
	if (source == HSE)
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d11f      	bne.n	8000f68 <system_clock_set+0x54>
	{
		RCC->CR |= HSE_ON;
 8000f28:	4b2e      	ldr	r3, [pc, #184]	@ (8000fe4 <system_clock_set+0xd0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a2d      	ldr	r2, [pc, #180]	@ (8000fe4 <system_clock_set+0xd0>)
 8000f2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f32:	6013      	str	r3, [r2, #0]
		while (!IS_HSE_READY())
 8000f34:	bf00      	nop
 8000f36:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe4 <system_clock_set+0xd0>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d0f9      	beq.n	8000f36 <system_clock_set+0x22>
		{
			;
		}
		RCC->CFGR &= ~(3 << 0);
 8000f42:	4b28      	ldr	r3, [pc, #160]	@ (8000fe4 <system_clock_set+0xd0>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	4a27      	ldr	r2, [pc, #156]	@ (8000fe4 <system_clock_set+0xd0>)
 8000f48:	f023 0303 	bic.w	r3, r3, #3
 8000f4c:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= HSE;
 8000f4e:	4b25      	ldr	r3, [pc, #148]	@ (8000fe4 <system_clock_set+0xd0>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	4a24      	ldr	r2, [pc, #144]	@ (8000fe4 <system_clock_set+0xd0>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6053      	str	r3, [r2, #4]
		RCC->CR &= ~(1 << 0);
 8000f5a:	4b22      	ldr	r3, [pc, #136]	@ (8000fe4 <system_clock_set+0xd0>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a21      	ldr	r2, [pc, #132]	@ (8000fe4 <system_clock_set+0xd0>)
 8000f60:	f023 0301 	bic.w	r3, r3, #1
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	e037      	b.n	8000fd8 <system_clock_set+0xc4>
	}
	else if (source == HSI)
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d117      	bne.n	8000f9e <system_clock_set+0x8a>
	{
		RCC->CR |= HSI_ON;
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe4 <system_clock_set+0xd0>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a1c      	ldr	r2, [pc, #112]	@ (8000fe4 <system_clock_set+0xd0>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6013      	str	r3, [r2, #0]
		while (!IS_HSI_READY())
 8000f7a:	bf00      	nop
 8000f7c:	4b19      	ldr	r3, [pc, #100]	@ (8000fe4 <system_clock_set+0xd0>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0f9      	beq.n	8000f7c <system_clock_set+0x68>
		{
			;
		}
		RCC->CFGR &= ~(3 << 0);
 8000f88:	4b16      	ldr	r3, [pc, #88]	@ (8000fe4 <system_clock_set+0xd0>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	4a15      	ldr	r2, [pc, #84]	@ (8000fe4 <system_clock_set+0xd0>)
 8000f8e:	f023 0303 	bic.w	r3, r3, #3
 8000f92:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= HSI;
 8000f94:	4b13      	ldr	r3, [pc, #76]	@ (8000fe4 <system_clock_set+0xd0>)
 8000f96:	4a13      	ldr	r2, [pc, #76]	@ (8000fe4 <system_clock_set+0xd0>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	6053      	str	r3, [r2, #4]
 8000f9c:	e01c      	b.n	8000fd8 <system_clock_set+0xc4>
	}
	else if (source == PLL)
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d119      	bne.n	8000fd8 <system_clock_set+0xc4>
	{
		RCC->CR |= PLL_ON;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe4 <system_clock_set+0xd0>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe4 <system_clock_set+0xd0>)
 8000faa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000fae:	6013      	str	r3, [r2, #0]
		while (!IS_PLL_READY())
 8000fb0:	bf00      	nop
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe4 <system_clock_set+0xd0>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d0f9      	beq.n	8000fb2 <system_clock_set+0x9e>
		{
			;
		}
		//RCC->CFGR &= ~(3 << 0);
		RCC->CFGR |= PLL;
 8000fbe:	4b09      	ldr	r3, [pc, #36]	@ (8000fe4 <system_clock_set+0xd0>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	4a08      	ldr	r2, [pc, #32]	@ (8000fe4 <system_clock_set+0xd0>)
 8000fc4:	f043 0302 	orr.w	r3, r3, #2
 8000fc8:	6053      	str	r3, [r2, #4]
		while ((RCC->CFGR & (3 << 2)) != 8);
 8000fca:	bf00      	nop
 8000fcc:	4b05      	ldr	r3, [pc, #20]	@ (8000fe4 <system_clock_set+0xd0>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 030c 	and.w	r3, r3, #12
 8000fd4:	2b08      	cmp	r3, #8
 8000fd6:	d1f9      	bne.n	8000fcc <system_clock_set+0xb8>
		//RCC->CR &= ~(1 << 0);

	}
	return temp;
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <pll_clk_config>:
**
** Returned value:		status of the function (healthy or error)
**
*****************************************************************************/
uint8_t pll_clk_config(pll_entry_clock_source_e source,pll_input_multiplier_e multiplication_factor)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	460a      	mov	r2, r1
 8000ff2:	71fb      	strb	r3, [r7, #7]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	71bb      	strb	r3, [r7, #6]
	 RCC->CFGR &= ~(0xF << 18);
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8001038 <pll_clk_config+0x50>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	4a0e      	ldr	r2, [pc, #56]	@ (8001038 <pll_clk_config+0x50>)
 8000ffe:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 8001002:	6053      	str	r3, [r2, #4]
	 RCC->CFGR |= (multiplication_factor << 18);
 8001004:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <pll_clk_config+0x50>)
 8001006:	685a      	ldr	r2, [r3, #4]
 8001008:	79bb      	ldrb	r3, [r7, #6]
 800100a:	049b      	lsls	r3, r3, #18
 800100c:	490a      	ldr	r1, [pc, #40]	@ (8001038 <pll_clk_config+0x50>)
 800100e:	4313      	orrs	r3, r2
 8001010:	604b      	str	r3, [r1, #4]
	 RCC->CFGR &= ~(1 << 16);
 8001012:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <pll_clk_config+0x50>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	4a08      	ldr	r2, [pc, #32]	@ (8001038 <pll_clk_config+0x50>)
 8001018:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800101c:	6053      	str	r3, [r2, #4]
	 RCC->CFGR |= source;
 800101e:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <pll_clk_config+0x50>)
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	4904      	ldr	r1, [pc, #16]	@ (8001038 <pll_clk_config+0x50>)
 8001026:	4313      	orrs	r3, r2
 8001028:	604b      	str	r3, [r1, #4]
     return 1;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000

0800103c <ahb_clk_set>:
**
*****************************************************************************/


void ahb_clk_set(ahb_prescalar_option_e factor)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0xF << AHB_CLOCK_PRESCALAR_OFFSET);
 8001046:	4b09      	ldr	r3, [pc, #36]	@ (800106c <ahb_clk_set+0x30>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	4a08      	ldr	r2, [pc, #32]	@ (800106c <ahb_clk_set+0x30>)
 800104c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001050:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (factor << AHB_CLOCK_PRESCALAR_OFFSET);
 8001052:	4b06      	ldr	r3, [pc, #24]	@ (800106c <ahb_clk_set+0x30>)
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	011b      	lsls	r3, r3, #4
 800105a:	4904      	ldr	r1, [pc, #16]	@ (800106c <ahb_clk_set+0x30>)
 800105c:	4313      	orrs	r3, r2
 800105e:	604b      	str	r3, [r1, #4]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40021000 	.word	0x40021000

08001070 <apb1_clk_set>:
**
** Returned value:		void
**
*****************************************************************************/
void apb1_clk_set(apbx_prescalar_options_e factor)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0x7 << APB1_CLOCK_PRESCALAR_OFFSET);
 800107a:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <apb1_clk_set+0x30>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	4a08      	ldr	r2, [pc, #32]	@ (80010a0 <apb1_clk_set+0x30>)
 8001080:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001084:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (factor << APB1_CLOCK_PRESCALAR_OFFSET);
 8001086:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <apb1_clk_set+0x30>)
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	021b      	lsls	r3, r3, #8
 800108e:	4904      	ldr	r1, [pc, #16]	@ (80010a0 <apb1_clk_set+0x30>)
 8001090:	4313      	orrs	r3, r2
 8001092:	604b      	str	r3, [r1, #4]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40021000 	.word	0x40021000

080010a4 <apb2_clk_set>:
**
** Returned value:		void
**
*****************************************************************************/
void apb2_clk_set(apbx_prescalar_options_e factor)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0xF << APB2_CLOCK_PRESCALAR_OFFSET);
 80010ae:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <apb2_clk_set+0x30>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	4a08      	ldr	r2, [pc, #32]	@ (80010d4 <apb2_clk_set+0x30>)
 80010b4:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 80010b8:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (factor << APB2_CLOCK_PRESCALAR_OFFSET);
 80010ba:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <apb2_clk_set+0x30>)
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	02db      	lsls	r3, r3, #11
 80010c2:	4904      	ldr	r1, [pc, #16]	@ (80010d4 <apb2_clk_set+0x30>)
 80010c4:	4313      	orrs	r3, r2
 80010c6:	604b      	str	r3, [r1, #4]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40021000 	.word	0x40021000

080010d8 <apb2_peripheral_clock_en>:
**
** Returned value:		void
**
*****************************************************************************/
void apb2_peripheral_clock_en(uint32_t clock_en_parameter)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR |= clock_en_parameter;
 80010e0:	4b05      	ldr	r3, [pc, #20]	@ (80010f8 <apb2_peripheral_clock_en+0x20>)
 80010e2:	699a      	ldr	r2, [r3, #24]
 80010e4:	4904      	ldr	r1, [pc, #16]	@ (80010f8 <apb2_peripheral_clock_en+0x20>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	618b      	str	r3, [r1, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40021000 	.word	0x40021000

080010fc <apb1_peripheral_clock_en>:
**
** Returned value:		void
**
*****************************************************************************/
void apb1_peripheral_clock_en(uint32_t clock_en_parameter)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	RCC->APB1ENR |= clock_en_parameter;
 8001104:	4b05      	ldr	r3, [pc, #20]	@ (800111c <apb1_peripheral_clock_en+0x20>)
 8001106:	69da      	ldr	r2, [r3, #28]
 8001108:	4904      	ldr	r1, [pc, #16]	@ (800111c <apb1_peripheral_clock_en+0x20>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4313      	orrs	r3, r2
 800110e:	61cb      	str	r3, [r1, #28]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000

08001120 <ahb_peripheral_clock_en>:


void ahb_peripheral_clock_en(uint32_t clock_en_parameter)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	RCC->AHBENR |= clock_en_parameter;
 8001128:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <ahb_peripheral_clock_en+0x20>)
 800112a:	695a      	ldr	r2, [r3, #20]
 800112c:	4904      	ldr	r1, [pc, #16]	@ (8001140 <ahb_peripheral_clock_en+0x20>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4313      	orrs	r3, r2
 8001132:	614b      	str	r3, [r1, #20]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	40021000 	.word	0x40021000

08001144 <apb_get_clock>:
**
** Returned value:		Clock Frequency
**
*****************************************************************************/
uint32_t apb_get_clock(uint8_t apb)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
	uint8_t clock_source;
	uint32_t sysclk, temp, ahbp, apbp;

	clock_source = ((RCC->CFGR >> 2) & 0x03);
 800114e:	4b33      	ldr	r3, [pc, #204]	@ (800121c <apb_get_clock+0xd8>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	089b      	lsrs	r3, r3, #2
 8001154:	b2db      	uxtb	r3, r3
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	74fb      	strb	r3, [r7, #19]
	if (clock_source == SYSCLK_SOURCE_HSI)
 800115c:	7cfb      	ldrb	r3, [r7, #19]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d102      	bne.n	8001168 <apb_get_clock+0x24>
	{
		sysclk = 8000000;
 8001162:	4b2f      	ldr	r3, [pc, #188]	@ (8001220 <apb_get_clock+0xdc>)
 8001164:	61fb      	str	r3, [r7, #28]
 8001166:	e011      	b.n	800118c <apb_get_clock+0x48>
	}
	else if (clock_source == SYSCLK_SOURCE_HSE)
 8001168:	7cfb      	ldrb	r3, [r7, #19]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d102      	bne.n	8001174 <apb_get_clock+0x30>
	{
		sysclk = 8000000;
 800116e:	4b2c      	ldr	r3, [pc, #176]	@ (8001220 <apb_get_clock+0xdc>)
 8001170:	61fb      	str	r3, [r7, #28]
 8001172:	e00b      	b.n	800118c <apb_get_clock+0x48>
	}
	else if (clock_source == SYSCLK_SOURCE_PLL)
 8001174:	7cfb      	ldrb	r3, [r7, #19]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d103      	bne.n	8001182 <apb_get_clock+0x3e>
	{
		sysclk = get_pll_clock();
 800117a:	f000 f857 	bl	800122c <get_pll_clock>
 800117e:	61f8      	str	r0, [r7, #28]
 8001180:	e004      	b.n	800118c <apb_get_clock+0x48>
	}
	else if (clock_source == SYSCLK_SOURCE_PLL_R)
 8001182:	7cfb      	ldrb	r3, [r7, #19]
 8001184:	2b03      	cmp	r3, #3
 8001186:	d101      	bne.n	800118c <apb_get_clock+0x48>
	{
		sysclk = 1; // study this and write the function for it.
 8001188:	2301      	movs	r3, #1
 800118a:	61fb      	str	r3, [r7, #28]
	}

	/*
	 * Get AHB Prescalar Value
	 */
	temp = (RCC->CFGR >> 4) & 0xF;
 800118c:	4b23      	ldr	r3, [pc, #140]	@ (800121c <apb_get_clock+0xd8>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	091b      	lsrs	r3, r3, #4
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	60fb      	str	r3, [r7, #12]
	if (temp < 8)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2b07      	cmp	r3, #7
 800119c:	d802      	bhi.n	80011a4 <apb_get_clock+0x60>
	{
		ahbp = 1;
 800119e:	2301      	movs	r3, #1
 80011a0:	61bb      	str	r3, [r7, #24]
 80011a2:	e005      	b.n	80011b0 <apb_get_clock+0x6c>
	}
	else
	{
		ahbp = ahb_prescaler_1[temp - 8];
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	3b08      	subs	r3, #8
 80011a8:	4a1e      	ldr	r2, [pc, #120]	@ (8001224 <apb_get_clock+0xe0>)
 80011aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011ae:	61bb      	str	r3, [r7, #24]
	}

	/*
	 * Get APB1 Prescalar Value
	 */
	if (apb == APB1)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d111      	bne.n	80011da <apb_get_clock+0x96>
	{
		temp = ( (RCC->CFGR >> 8) & 0x7);
 80011b6:	4b19      	ldr	r3, [pc, #100]	@ (800121c <apb_get_clock+0xd8>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	0a1b      	lsrs	r3, r3, #8
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	60fb      	str	r3, [r7, #12]
		if (temp < 4)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	d802      	bhi.n	80011ce <apb_get_clock+0x8a>
		{
			apbp = 1;
 80011c8:	2301      	movs	r3, #1
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	e005      	b.n	80011da <apb_get_clock+0x96>
		}
		else
		{
			apbp = apb_prescaler_1[temp-4];
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	3b04      	subs	r3, #4
 80011d2:	4a15      	ldr	r2, [pc, #84]	@ (8001228 <apb_get_clock+0xe4>)
 80011d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011d8:	617b      	str	r3, [r7, #20]
	}

	/*
	 * get APB2 Prescalar Value
	 */
	if (apb == APB2)
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d111      	bne.n	8001204 <apb_get_clock+0xc0>
	{
		temp = ((RCC->CFGR >> 11) & 0x7);
 80011e0:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <apb_get_clock+0xd8>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	0adb      	lsrs	r3, r3, #11
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	60fb      	str	r3, [r7, #12]
		if (temp < 4)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2b03      	cmp	r3, #3
 80011f0:	d802      	bhi.n	80011f8 <apb_get_clock+0xb4>
		{
			apbp = 1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	e005      	b.n	8001204 <apb_get_clock+0xc0>
		}
		else
		{
			apbp = apb_prescaler_1[temp-4];
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	3b04      	subs	r3, #4
 80011fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001228 <apb_get_clock+0xe4>)
 80011fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001202:	617b      	str	r3, [r7, #20]
		}
	}
	return (sysclk / ahbp / apbp);
 8001204:	69fa      	ldr	r2, [r7, #28]
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	fbb2 f2f3 	udiv	r2, r2, r3
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fbb2 f3f3 	udiv	r3, r2, r3

}
 8001212:	4618      	mov	r0, r3
 8001214:	3720      	adds	r7, #32
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40021000 	.word	0x40021000
 8001220:	007a1200 	.word	0x007a1200
 8001224:	2000000c 	.word	0x2000000c
 8001228:	2000001c 	.word	0x2000001c

0800122c <get_pll_clock>:




uint32_t get_pll_clock(void)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
	// PLL input Clock source
	// If PLL input clock source is HSE then check PLLXTRE in Register
	uint8_t clock_source = ( (RCC->CFGR >> 16) & 0x01);
 8001232:	4b1b      	ldr	r3, [pc, #108]	@ (80012a0 <get_pll_clock+0x74>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	0c1b      	lsrs	r3, r3, #16
 8001238:	b2db      	uxtb	r3, r3
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	72fb      	strb	r3, [r7, #11]
	uint32_t multipliation_factor = ( (RCC->CFGR >> 18) & 0x0F);
 8001240:	4b17      	ldr	r3, [pc, #92]	@ (80012a0 <get_pll_clock+0x74>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	0c9b      	lsrs	r3, r3, #18
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	607b      	str	r3, [r7, #4]
	uint32_t hse_pll_divider = ( (RCC->CFGR >> 17) & 0x01);
 800124c:	4b14      	ldr	r3, [pc, #80]	@ (80012a0 <get_pll_clock+0x74>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	0c5b      	lsrs	r3, r3, #17
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	603b      	str	r3, [r7, #0]
	uint32_t pll_out_clk = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
	if (clock_source == PLL_HSI_DIV_2)
 800125c:	7afb      	ldrb	r3, [r7, #11]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d109      	bne.n	8001276 <get_pll_clock+0x4a>
	{
		pll_out_clk =  ( (HSI_INPUT / 2) * pll_multiplier[multipliation_factor]);
 8001262:	4a10      	ldr	r2, [pc, #64]	@ (80012a4 <get_pll_clock+0x78>)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4413      	add	r3, r2
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	4b0e      	ldr	r3, [pc, #56]	@ (80012a8 <get_pll_clock+0x7c>)
 800126e:	fb02 f303 	mul.w	r3, r2, r3
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	e00e      	b.n	8001294 <get_pll_clock+0x68>
	}
	else if (clock_source == PLL_HSE)
 8001276:	7afb      	ldrb	r3, [r7, #11]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d10b      	bne.n	8001294 <get_pll_clock+0x68>
	{
		pll_out_clk =  ( ( (HSE_INPUT) / (hse_pll_divider + 1) ) * pll_multiplier[multipliation_factor]);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	3301      	adds	r3, #1
 8001280:	4a0a      	ldr	r2, [pc, #40]	@ (80012ac <get_pll_clock+0x80>)
 8001282:	fbb2 f3f3 	udiv	r3, r2, r3
 8001286:	4907      	ldr	r1, [pc, #28]	@ (80012a4 <get_pll_clock+0x78>)
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	440a      	add	r2, r1
 800128c:	7812      	ldrb	r2, [r2, #0]
 800128e:	fb02 f303 	mul.w	r3, r2, r3
 8001292:	60fb      	str	r3, [r7, #12]
	}
	return pll_out_clk;
 8001294:	68fb      	ldr	r3, [r7, #12]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	40021000 	.word	0x40021000
 80012a4:	20000024 	.word	0x20000024
 80012a8:	003d0900 	.word	0x003d0900
 80012ac:	007a1200 	.word	0x007a1200

080012b0 <lsi_clock_en>:

void lsi_clock_en(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
	RCC->CSR |= (1 << LSI_CLOCK_EN_BIT_POSITION_CSR);
 80012b4:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <lsi_clock_en+0x28>)
 80012b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b8:	4a07      	ldr	r2, [pc, #28]	@ (80012d8 <lsi_clock_en+0x28>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	6253      	str	r3, [r2, #36]	@ 0x24
	while(!(RCC->CSR & IS_LSI_CLOCK_READY)){;}
 80012c0:	bf00      	nop
 80012c2:	4b05      	ldr	r3, [pc, #20]	@ (80012d8 <lsi_clock_en+0x28>)
 80012c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f9      	beq.n	80012c2 <lsi_clock_en+0x12>
}
 80012ce:	bf00      	nop
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr
 80012d8:	40021000 	.word	0x40021000

080012dc <io_port>:

#define LED_ON() 			io_set_out(IO_TEST_LED, OUT_STATE_LOW);
#define LED_OFF() 			io_set_out(IO_TEST_LED, OUT_STATE_HIGH);

static uint8_t io_port(io_e io)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
    return (io & IO_PORT_MASK) >> IO_PORT_OFFSET;
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	091b      	lsrs	r3, r3, #4
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	b2db      	uxtb	r3, r3
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <io_pin_bit>:

static uint8_t io_pin_bit(gpio_pins io)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
    return io & IO_PIN_MASK;
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	f003 030f 	and.w	r3, r3, #15
 800130c:	b2db      	uxtb	r3, r3
}
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <io_init>:
	}
}


void io_init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
	for (io_e io = P0_2; io <= ARRAY_SIZE(io_initial_config);io++)
 800131e:	2302      	movs	r3, #2
 8001320:	71fb      	strb	r3, [r7, #7]
 8001322:	e00d      	b.n	8001340 <io_init+0x28>
	{
		io_config(io,&io_initial_config[io]);
 8001324:	79fa      	ldrb	r2, [r7, #7]
 8001326:	4613      	mov	r3, r2
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	4413      	add	r3, r2
 800132c:	4a08      	ldr	r2, [pc, #32]	@ (8001350 <io_init+0x38>)
 800132e:	441a      	add	r2, r3
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f000 f80d 	bl	8001354 <io_config>
	for (io_e io = P0_2; io <= ARRAY_SIZE(io_initial_config);io++)
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	3301      	adds	r3, #1
 800133e:	71fb      	strb	r3, [r7, #7]
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	2b30      	cmp	r3, #48	@ 0x30
 8001344:	d9ee      	bls.n	8001324 <io_init+0xc>
	}
}
 8001346:	bf00      	nop
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000034 	.word	0x20000034

08001354 <io_config>:

void io_config(io_e io, io_configuration *config)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	6039      	str	r1, [r7, #0]
 800135e:	71fb      	strb	r3, [r7, #7]
	io_set_io_mode(io,config->mode,config->config,config->pupd);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	7819      	ldrb	r1, [r3, #0]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	785a      	ldrb	r2, [r3, #1]
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	789b      	ldrb	r3, [r3, #2]
 800136c:	79f8      	ldrb	r0, [r7, #7]
 800136e:	f000 f805 	bl	800137c <io_set_io_mode>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <io_set_io_mode>:

void io_set_io_mode(io_e io, io_mode_e mode, io_config_e config,io_pull_up_down_e pupd)
{
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	4604      	mov	r4, r0
 8001384:	4608      	mov	r0, r1
 8001386:	4611      	mov	r1, r2
 8001388:	461a      	mov	r2, r3
 800138a:	4623      	mov	r3, r4
 800138c:	71fb      	strb	r3, [r7, #7]
 800138e:	4603      	mov	r3, r0
 8001390:	71bb      	strb	r3, [r7, #6]
 8001392:	460b      	mov	r3, r1
 8001394:	717b      	strb	r3, [r7, #5]
 8001396:	4613      	mov	r3, r2
 8001398:	713b      	strb	r3, [r7, #4]
	pin = io_pin_bit(io);
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ffad 	bl	80012fc <io_pin_bit>
 80013a2:	4603      	mov	r3, r0
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001498 <io_set_io_mode+0x11c>)
 80013a8:	701a      	strb	r2, [r3, #0]
	gpio_regdef_t *Port = (gpio_regdef_t*)(GPIO_BASEADDR + (io_port(io)*0x400));
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff95 	bl	80012dc <io_port>
 80013b2:	4603      	mov	r3, r0
 80013b4:	029b      	lsls	r3, r3, #10
 80013b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80013ba:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 80013be:	60fb      	str	r3, [r7, #12]
	if(config == CONFIG_INPUT_WITH_PULLUP_PULLDOWN)
 80013c0:	797b      	ldrb	r3, [r7, #5]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d11b      	bne.n	80013fe <io_set_io_mode+0x82>
	{
		if (pupd == PULL_UP)
 80013c6:	793b      	ldrb	r3, [r7, #4]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d10a      	bne.n	80013e2 <io_set_io_mode+0x66>
		{
			Port->ODR |= (1 << pin);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	4a31      	ldr	r2, [pc, #196]	@ (8001498 <io_set_io_mode+0x11c>)
 80013d2:	7812      	ldrb	r2, [r2, #0]
 80013d4:	4611      	mov	r1, r2
 80013d6:	2201      	movs	r2, #1
 80013d8:	408a      	lsls	r2, r1
 80013da:	431a      	orrs	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	e00d      	b.n	80013fe <io_set_io_mode+0x82>
		}
		else if (pupd == PULL_DOWN)
 80013e2:	793b      	ldrb	r3, [r7, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d10a      	bne.n	80013fe <io_set_io_mode+0x82>
		{
			Port->ODR &= ~(1 << pin);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	4a2a      	ldr	r2, [pc, #168]	@ (8001498 <io_set_io_mode+0x11c>)
 80013ee:	7812      	ldrb	r2, [r2, #0]
 80013f0:	4611      	mov	r1, r2
 80013f2:	2201      	movs	r2, #1
 80013f4:	408a      	lsls	r2, r1
 80013f6:	43d2      	mvns	r2, r2
 80013f8:	401a      	ands	r2, r3
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	60da      	str	r2, [r3, #12]
		}
	}
	if (pin < 8)
 80013fe:	4b26      	ldr	r3, [pc, #152]	@ (8001498 <io_set_io_mode+0x11c>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b07      	cmp	r3, #7
 8001404:	d81e      	bhi.n	8001444 <io_set_io_mode+0xc8>
	{
		Port->CRL &= ~(0xF << PIN_MODE_MASK);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a23      	ldr	r2, [pc, #140]	@ (8001498 <io_set_io_mode+0x11c>)
 800140c:	7812      	ldrb	r2, [r2, #0]
 800140e:	0092      	lsls	r2, r2, #2
 8001410:	210f      	movs	r1, #15
 8001412:	fa01 f202 	lsl.w	r2, r1, r2
 8001416:	43d2      	mvns	r2, r2
 8001418:	401a      	ands	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	601a      	str	r2, [r3, #0]
		Port->CRL |= (mode << PIN_MODE_MASK) | (config << (PIN_MODE_MASK + 2));
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	79b9      	ldrb	r1, [r7, #6]
 8001424:	4a1c      	ldr	r2, [pc, #112]	@ (8001498 <io_set_io_mode+0x11c>)
 8001426:	7812      	ldrb	r2, [r2, #0]
 8001428:	0092      	lsls	r2, r2, #2
 800142a:	4091      	lsls	r1, r2
 800142c:	7978      	ldrb	r0, [r7, #5]
 800142e:	4a1a      	ldr	r2, [pc, #104]	@ (8001498 <io_set_io_mode+0x11c>)
 8001430:	7812      	ldrb	r2, [r2, #0]
 8001432:	0092      	lsls	r2, r2, #2
 8001434:	3202      	adds	r2, #2
 8001436:	fa00 f202 	lsl.w	r2, r0, r2
 800143a:	430a      	orrs	r2, r1
 800143c:	431a      	orrs	r2, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	601a      	str	r2, [r3, #0]
	{
		pin %= 8;
		Port->CRH &= ~(0xF << PIN_MODE_MASK);
		Port->CRH |= (mode << PIN_MODE_MASK) | (config << (PIN_MODE_MASK+2));
	}
}
 8001442:	e024      	b.n	800148e <io_set_io_mode+0x112>
		pin %= 8;
 8001444:	4b14      	ldr	r3, [pc, #80]	@ (8001498 <io_set_io_mode+0x11c>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	f003 0307 	and.w	r3, r3, #7
 800144c:	b2da      	uxtb	r2, r3
 800144e:	4b12      	ldr	r3, [pc, #72]	@ (8001498 <io_set_io_mode+0x11c>)
 8001450:	701a      	strb	r2, [r3, #0]
		Port->CRH &= ~(0xF << PIN_MODE_MASK);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	4a10      	ldr	r2, [pc, #64]	@ (8001498 <io_set_io_mode+0x11c>)
 8001458:	7812      	ldrb	r2, [r2, #0]
 800145a:	0092      	lsls	r2, r2, #2
 800145c:	210f      	movs	r1, #15
 800145e:	fa01 f202 	lsl.w	r2, r1, r2
 8001462:	43d2      	mvns	r2, r2
 8001464:	401a      	ands	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	605a      	str	r2, [r3, #4]
		Port->CRH |= (mode << PIN_MODE_MASK) | (config << (PIN_MODE_MASK+2));
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	79b9      	ldrb	r1, [r7, #6]
 8001470:	4a09      	ldr	r2, [pc, #36]	@ (8001498 <io_set_io_mode+0x11c>)
 8001472:	7812      	ldrb	r2, [r2, #0]
 8001474:	0092      	lsls	r2, r2, #2
 8001476:	4091      	lsls	r1, r2
 8001478:	7978      	ldrb	r0, [r7, #5]
 800147a:	4a07      	ldr	r2, [pc, #28]	@ (8001498 <io_set_io_mode+0x11c>)
 800147c:	7812      	ldrb	r2, [r2, #0]
 800147e:	0092      	lsls	r2, r2, #2
 8001480:	3202      	adds	r2, #2
 8001482:	fa00 f202 	lsl.w	r2, r0, r2
 8001486:	430a      	orrs	r2, r1
 8001488:	431a      	orrs	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	605a      	str	r2, [r3, #4]
}
 800148e:	bf00      	nop
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	bd90      	pop	{r4, r7, pc}
 8001496:	bf00      	nop
 8001498:	200000e9 	.word	0x200000e9

0800149c <io_set_out>:



void io_set_out(io_e io, io_out_e out)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	460a      	mov	r2, r1
 80014a6:	71fb      	strb	r3, [r7, #7]
 80014a8:	4613      	mov	r3, r2
 80014aa:	71bb      	strb	r3, [r7, #6]
	gpio_regdef_t *Port = (gpio_regdef_t*)(GPIO_BASEADDR + ( io_port(io) *0x400));
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff14 	bl	80012dc <io_port>
 80014b4:	4603      	mov	r3, r0
 80014b6:	029b      	lsls	r3, r3, #10
 80014b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80014bc:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 80014c0:	60fb      	str	r3, [r7, #12]
	switch(out){
 80014c2:	79bb      	ldrb	r3, [r7, #6]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d010      	beq.n	80014ea <io_set_out+0x4e>
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d11d      	bne.n	8001508 <io_set_out+0x6c>
	case OUT_STATE_HIGH:
		Port->ODR &= ~(1 << io_pin_bit(io));
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ff14 	bl	80012fc <io_pin_bit>
 80014d4:	4603      	mov	r3, r0
 80014d6:	461a      	mov	r2, r3
 80014d8:	2301      	movs	r3, #1
 80014da:	4093      	lsls	r3, r2
 80014dc:	43da      	mvns	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	401a      	ands	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	60da      	str	r2, [r3, #12]
		break;
 80014e8:	e00e      	b.n	8001508 <io_set_out+0x6c>
	case OUT_STATE_LOW:
		Port->ODR |= (1 << io_pin_bit(io));
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff05 	bl	80012fc <io_pin_bit>
 80014f2:	4603      	mov	r3, r0
 80014f4:	461a      	mov	r2, r3
 80014f6:	2301      	movs	r3, #1
 80014f8:	fa03 f202 	lsl.w	r2, r3, r2
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	431a      	orrs	r2, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	60da      	str	r2, [r3, #12]
		break;
 8001506:	bf00      	nop
	}
}
 8001508:	bf00      	nop
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <io_get_in>:
	gpio_regdef_t *Port = (gpio_regdef_t*)(GPIO_BASEADDR + ( io_port(io) *0x400));
	Port->ODR ^= (1 << 13);
}

uint16_t io_get_in(io_e io)
{
 8001510:	b590      	push	{r4, r7, lr}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
	gpio_regdef_t *Port = (gpio_regdef_t*)(GPIO_BASEADDR + ( io_port(io) *0x400));
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fedd 	bl	80012dc <io_port>
 8001522:	4603      	mov	r3, r0
 8001524:	029b      	lsls	r3, r3, #10
 8001526:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800152a:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 800152e:	60fb      	str	r3, [r7, #12]
	return (Port->IDR & (1 << io_pin_bit(io)));
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	b29c      	uxth	r4, r3
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fedf 	bl	80012fc <io_pin_bit>
 800153e:	4603      	mov	r3, r0
 8001540:	461a      	mov	r2, r3
 8001542:	2301      	movs	r3, #1
 8001544:	4093      	lsls	r3, r2
 8001546:	b29b      	uxth	r3, r3
 8001548:	4023      	ands	r3, r4
 800154a:	b29b      	uxth	r3, r3
}
 800154c:	4618      	mov	r0, r3
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	bd90      	pop	{r4, r7, pc}

08001554 <EXTI4_IRQHandler>:


void EXTI4_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 4))
 8001558:	4b10      	ldr	r3, [pc, #64]	@ (800159c <EXTI4_IRQHandler+0x48>)
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	f003 0310 	and.w	r3, r3, #16
 8001560:	2b00      	cmp	r3, #0
 8001562:	d018      	beq.n	8001596 <EXTI4_IRQHandler+0x42>
	{
		EXTI->PR |= (1 << 4);
 8001564:	4b0d      	ldr	r3, [pc, #52]	@ (800159c <EXTI4_IRQHandler+0x48>)
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	4a0c      	ldr	r2, [pc, #48]	@ (800159c <EXTI4_IRQHandler+0x48>)
 800156a:	f043 0310 	orr.w	r3, r3, #16
 800156e:	6153      	str	r3, [r2, #20]
		if (!flag_led_on)
 8001570:	4b0b      	ldr	r3, [pc, #44]	@ (80015a0 <EXTI4_IRQHandler+0x4c>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d107      	bne.n	8001588 <EXTI4_IRQHandler+0x34>
		{
			LED_ON();
 8001578:	2100      	movs	r1, #0
 800157a:	202d      	movs	r0, #45	@ 0x2d
 800157c:	f7ff ff8e 	bl	800149c <io_set_out>
			flag_led_on = 1;
 8001580:	4b07      	ldr	r3, [pc, #28]	@ (80015a0 <EXTI4_IRQHandler+0x4c>)
 8001582:	2201      	movs	r2, #1
 8001584:	701a      	strb	r2, [r3, #0]
		{
			LED_OFF();
			flag_led_on = 0;
		}
	}
}
 8001586:	e006      	b.n	8001596 <EXTI4_IRQHandler+0x42>
			LED_OFF();
 8001588:	2101      	movs	r1, #1
 800158a:	202d      	movs	r0, #45	@ 0x2d
 800158c:	f7ff ff86 	bl	800149c <io_set_out>
			flag_led_on = 0;
 8001590:	4b03      	ldr	r3, [pc, #12]	@ (80015a0 <EXTI4_IRQHandler+0x4c>)
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40010400 	.word	0x40010400
 80015a0:	200000e8 	.word	0x200000e8

080015a4 <systick_init>:
	uint8_t irq_position = irqn % 32;
	NVIC->ISER[register_position] = (1 << irq_position);
}

void systick_init(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
	// Reload Value
	SYSTICK->RVR = 7999; //for 1 ms @ 8 Mhz
 80015a8:	4b08      	ldr	r3, [pc, #32]	@ (80015cc <systick_init+0x28>)
 80015aa:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80015ae:	605a      	str	r2, [r3, #4]
	// Clear the current count
	SYSTICK->CVR = 0;
 80015b0:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <systick_init+0x28>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]

	// Clock Selection
	SYSTICK->CSR |= (1 << 2) | (1 << 1) | ((1 << 0)); //AHB selected
 80015b6:	4b05      	ldr	r3, [pc, #20]	@ (80015cc <systick_init+0x28>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a04      	ldr	r2, [pc, #16]	@ (80015cc <systick_init+0x28>)
 80015bc:	f043 0307 	orr.w	r3, r3, #7
 80015c0:	6013      	str	r3, [r2, #0]

}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000e010 	.word	0xe000e010

080015d0 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
	counter_adc_sampling++;
 80015d4:	4b0d      	ldr	r3, [pc, #52]	@ (800160c <SysTick_Handler+0x3c>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	3301      	adds	r3, #1
 80015da:	b29a      	uxth	r2, r3
 80015dc:	4b0b      	ldr	r3, [pc, #44]	@ (800160c <SysTick_Handler+0x3c>)
 80015de:	801a      	strh	r2, [r3, #0]
	counter_data_transmit++;
 80015e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001610 <SysTick_Handler+0x40>)
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	3301      	adds	r3, #1
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <SysTick_Handler+0x40>)
 80015ea:	801a      	strh	r2, [r3, #0]
	counter_led_toggle++;
 80015ec:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <SysTick_Handler+0x44>)
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	3301      	adds	r3, #1
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	4b07      	ldr	r3, [pc, #28]	@ (8001614 <SysTick_Handler+0x44>)
 80015f6:	801a      	strh	r2, [r3, #0]
	counter_systick++; // 1 ms tick.
 80015f8:	4b07      	ldr	r3, [pc, #28]	@ (8001618 <SysTick_Handler+0x48>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	3301      	adds	r3, #1
 80015fe:	4a06      	ldr	r2, [pc, #24]	@ (8001618 <SysTick_Handler+0x48>)
 8001600:	6013      	str	r3, [r2, #0]
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	200000ea 	.word	0x200000ea
 8001610:	200000ec 	.word	0x200000ec
 8001614:	200000ee 	.word	0x200000ee
 8001618:	200000f0 	.word	0x200000f0

0800161c <get_systick>:

uint32_t get_systick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
	return counter_systick;
 8001620:	4b02      	ldr	r3, [pc, #8]	@ (800162c <get_systick+0x10>)
 8001622:	681b      	ldr	r3, [r3, #0]
}
 8001624:	4618      	mov	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	200000f0 	.word	0x200000f0

08001630 <system_reset>:

void system_reset(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
	SCB->AIRCR |= (0x5FA << 16) | (1 << 2);  // VECTKEY + SYSRESETREQ
 8001634:	4b03      	ldr	r3, [pc, #12]	@ (8001644 <system_reset+0x14>)
 8001636:	68da      	ldr	r2, [r3, #12]
 8001638:	4902      	ldr	r1, [pc, #8]	@ (8001644 <system_reset+0x14>)
 800163a:	4b03      	ldr	r3, [pc, #12]	@ (8001648 <system_reset+0x18>)
 800163c:	4313      	orrs	r3, r2
 800163e:	60cb      	str	r3, [r1, #12]
    while (1); // Wait for reset to happen
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <system_reset+0x10>
 8001644:	e000ed00 	.word	0xe000ed00
 8001648:	05fa0004 	.word	0x05fa0004

0800164c <uart_2_configure_parameter>:
uint16_t logic_counter5 = 0;

static uart_callback_t callback_rx_data = 0;

void uart_2_configure_parameter(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	usart_2_handle.add_of_usartx = USART2;
 8001650:	4b10      	ldr	r3, [pc, #64]	@ (8001694 <uart_2_configure_parameter+0x48>)
 8001652:	4a11      	ldr	r2, [pc, #68]	@ (8001698 <uart_2_configure_parameter+0x4c>)
 8001654:	601a      	str	r2, [r3, #0]
	usart_2_handle.usart_configuration.mode = USART_MODE_TXRX;
 8001656:	4b0f      	ldr	r3, [pc, #60]	@ (8001694 <uart_2_configure_parameter+0x48>)
 8001658:	2202      	movs	r2, #2
 800165a:	711a      	strb	r2, [r3, #4]
	usart_2_handle.usart_configuration.no_of_stop_bits = USART_STOPBITS_1;
 800165c:	4b0d      	ldr	r3, [pc, #52]	@ (8001694 <uart_2_configure_parameter+0x48>)
 800165e:	2200      	movs	r2, #0
 8001660:	719a      	strb	r2, [r3, #6]
	usart_2_handle.usart_configuration.data_word_length = USART_WORDLEN_8BITS;
 8001662:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <uart_2_configure_parameter+0x48>)
 8001664:	2200      	movs	r2, #0
 8001666:	715a      	strb	r2, [r3, #5]
	usart_2_handle.usart_configuration.baudrate = USART_STD_BAUD_115200;
 8001668:	4b0a      	ldr	r3, [pc, #40]	@ (8001694 <uart_2_configure_parameter+0x48>)
 800166a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800166e:	609a      	str	r2, [r3, #8]
	usart_2_handle.usart_configuration.parity_control = USART_PARITY_DISABLE;
 8001670:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <uart_2_configure_parameter+0x48>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
	//p_usart_handle->usart_configuration.dma_transmitter_en = USARTx_DMA_TRANSMITTER_EN;
	//p_usart_handle->usart_configuration.dma_receiver_en = USARTx_DMA_RECEIVER_EN;
	usart_2_handle.tx_buffer = &(tx_buffer_data[0]);
 8001676:	4b07      	ldr	r3, [pc, #28]	@ (8001694 <uart_2_configure_parameter+0x48>)
 8001678:	4a08      	ldr	r2, [pc, #32]	@ (800169c <uart_2_configure_parameter+0x50>)
 800167a:	615a      	str	r2, [r3, #20]
	usart_2_handle.rx_buffer = &(rx_buffer_data[0]);
 800167c:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <uart_2_configure_parameter+0x48>)
 800167e:	4a08      	ldr	r2, [pc, #32]	@ (80016a0 <uart_2_configure_parameter+0x54>)
 8001680:	619a      	str	r2, [r3, #24]
	usart_2_handle.rx_len = 8;
 8001682:	4b04      	ldr	r3, [pc, #16]	@ (8001694 <uart_2_configure_parameter+0x48>)
 8001684:	2208      	movs	r2, #8
 8001686:	775a      	strb	r2, [r3, #29]
	usart_init(&usart_2_handle);
 8001688:	4802      	ldr	r0, [pc, #8]	@ (8001694 <uart_2_configure_parameter+0x48>)
 800168a:	f000 f837 	bl	80016fc <usart_init>
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	2000023c 	.word	0x2000023c
 8001698:	40004400 	.word	0x40004400
 800169c:	200000f4 	.word	0x200000f4
 80016a0:	20000144 	.word	0x20000144

080016a4 <uart_3_configure_parameter>:

void uart_3_configure_parameter(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	usart_3_handle.add_of_usartx = USART3;
 80016a8:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <uart_3_configure_parameter+0x48>)
 80016aa:	4a11      	ldr	r2, [pc, #68]	@ (80016f0 <uart_3_configure_parameter+0x4c>)
 80016ac:	601a      	str	r2, [r3, #0]
	usart_3_handle.usart_configuration.mode = USART_MODE_TXRX;
 80016ae:	4b0f      	ldr	r3, [pc, #60]	@ (80016ec <uart_3_configure_parameter+0x48>)
 80016b0:	2202      	movs	r2, #2
 80016b2:	711a      	strb	r2, [r3, #4]
	usart_3_handle.usart_configuration.no_of_stop_bits = USART_STOPBITS_1;
 80016b4:	4b0d      	ldr	r3, [pc, #52]	@ (80016ec <uart_3_configure_parameter+0x48>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	719a      	strb	r2, [r3, #6]
	usart_3_handle.usart_configuration.data_word_length = USART_WORDLEN_8BITS;
 80016ba:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <uart_3_configure_parameter+0x48>)
 80016bc:	2200      	movs	r2, #0
 80016be:	715a      	strb	r2, [r3, #5]
	usart_3_handle.usart_configuration.baudrate = USART_STD_BAUD_115200;
 80016c0:	4b0a      	ldr	r3, [pc, #40]	@ (80016ec <uart_3_configure_parameter+0x48>)
 80016c2:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016c6:	609a      	str	r2, [r3, #8]
	usart_3_handle.usart_configuration.parity_control = USART_PARITY_DISABLE;
 80016c8:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <uart_3_configure_parameter+0x48>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
	//p_usart_handle->usart_configuration.dma_transmitter_en = USARTx_DMA_TRANSMITTER_EN;
	//p_usart_handle->usart_configuration.dma_receiver_en = USARTx_DMA_RECEIVER_EN;
	usart_3_handle.tx_buffer = &(tx_buffer_data[0]);
 80016ce:	4b07      	ldr	r3, [pc, #28]	@ (80016ec <uart_3_configure_parameter+0x48>)
 80016d0:	4a08      	ldr	r2, [pc, #32]	@ (80016f4 <uart_3_configure_parameter+0x50>)
 80016d2:	615a      	str	r2, [r3, #20]
	usart_3_handle.rx_buffer = &(rx_buffer_data[0]);
 80016d4:	4b05      	ldr	r3, [pc, #20]	@ (80016ec <uart_3_configure_parameter+0x48>)
 80016d6:	4a08      	ldr	r2, [pc, #32]	@ (80016f8 <uart_3_configure_parameter+0x54>)
 80016d8:	619a      	str	r2, [r3, #24]
	usart_3_handle.rx_len = 8;
 80016da:	4b04      	ldr	r3, [pc, #16]	@ (80016ec <uart_3_configure_parameter+0x48>)
 80016dc:	2208      	movs	r2, #8
 80016de:	775a      	strb	r2, [r3, #29]
	usart_init(&usart_3_handle);
 80016e0:	4802      	ldr	r0, [pc, #8]	@ (80016ec <uart_3_configure_parameter+0x48>)
 80016e2:	f000 f80b 	bl	80016fc <usart_init>
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	2000025c 	.word	0x2000025c
 80016f0:	40004800 	.word	0x40004800
 80016f4:	200000f4 	.word	0x200000f4
 80016f8:	20000144 	.word	0x20000144

080016fc <usart_init>:

void usart_init(usart_handle *p_usart_handle)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	config_stop_bit(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.no_of_stop_bits);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	799b      	ldrb	r3, [r3, #6]
 800170c:	4619      	mov	r1, r3
 800170e:	4610      	mov	r0, r2
 8001710:	f000 f98c 	bl	8001a2c <config_stop_bit>

	config_data_word_len(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.data_word_length);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	795b      	ldrb	r3, [r3, #5]
 800171c:	4619      	mov	r1, r3
 800171e:	4610      	mov	r0, r2
 8001720:	f000 f99c 	bl	8001a5c <config_data_word_len>

	config_parity(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.parity_control);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	4619      	mov	r1, r3
 8001730:	4610      	mov	r0, r2
 8001732:	f000 f9a5 	bl	8001a80 <config_parity>

	config_mode(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.mode);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	791b      	ldrb	r3, [r3, #4]
 800173e:	4619      	mov	r1, r3
 8001740:	4610      	mov	r0, r2
 8001742:	f000 f9bb 	bl	8001abc <config_mode>

	usart_set_baudrate(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.baudrate);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	4619      	mov	r1, r3
 8001750:	4610      	mov	r0, r2
 8001752:	f000 f81f 	bl	8001794 <usart_set_baudrate>

	usart_dma_mode_en_di(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.dma_transmitter_en);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	7c1b      	ldrb	r3, [r3, #16]
 800175e:	4619      	mov	r1, r3
 8001760:	4610      	mov	r0, r2
 8001762:	f000 fb15 	bl	8001d90 <usart_dma_mode_en_di>

	usart_dma_mode_en_di(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.dma_receiver_en);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	7c5b      	ldrb	r3, [r3, #17]
 800176e:	4619      	mov	r1, r3
 8001770:	4610      	mov	r0, r2
 8001772:	f000 fb0d 	bl	8001d90 <usart_dma_mode_en_di>

	usart_en(p_usart_handle->add_of_usartx);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f000 f947 	bl	8001a0e <usart_en>

	//usart_read_interrupt(p_usart_handle->add_of_usartx);

	usart_rx_en(p_usart_handle->add_of_usartx);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f000 faf3 	bl	8001d70 <usart_rx_en>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <usart_set_baudrate>:

void usart_set_baudrate(usartx_regdef_t *p_usartx,uint32_t baudrate)
{
 8001794:	b5b0      	push	{r4, r5, r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
	 * USARTDIV is an unsigned fixed point number that is coded on the USART_BRR register.
	 */
	float temp,fraction;
	uint32_t mantissa;
	// TO DO: ADD CONDITION FOR CHECKING WHICH UART IT IS BEFORE GETTING THE CLOCK OF THE PERIPHERAL.
	uint32_t pclk = apb_get_clock(APB1); // It gets the Clock source for mentioned APB.
 800179e:	2001      	movs	r0, #1
 80017a0:	f7ff fcd0 	bl	8001144 <apb_get_clock>
 80017a4:	6178      	str	r0, [r7, #20]
	uint32_t div_fraction;
	temp = pclk / (16.0 * baudrate);
 80017a6:	6978      	ldr	r0, [r7, #20]
 80017a8:	f7fe fed8 	bl	800055c <__aeabi_ui2d>
 80017ac:	4604      	mov	r4, r0
 80017ae:	460d      	mov	r5, r1
 80017b0:	6838      	ldr	r0, [r7, #0]
 80017b2:	f7fe fed3 	bl	800055c <__aeabi_ui2d>
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	4b26      	ldr	r3, [pc, #152]	@ (8001854 <usart_set_baudrate+0xc0>)
 80017bc:	f7fe ff48 	bl	8000650 <__aeabi_dmul>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4620      	mov	r0, r4
 80017c6:	4629      	mov	r1, r5
 80017c8:	f7ff f86c 	bl	80008a4 <__aeabi_ddiv>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	f7ff f94e 	bl	8000a74 <__aeabi_d2f>
 80017d8:	4603      	mov	r3, r0
 80017da:	613b      	str	r3, [r7, #16]
	fraction = temp - (int)temp;
 80017dc:	6938      	ldr	r0, [r7, #16]
 80017de:	f7ff fb1d 	bl	8000e1c <__aeabi_f2iz>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fa4f 	bl	8000c88 <__aeabi_i2f>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4619      	mov	r1, r3
 80017ee:	6938      	ldr	r0, [r7, #16]
 80017f0:	f7ff f994 	bl	8000b1c <__aeabi_fsub>
 80017f4:	4603      	mov	r3, r0
 80017f6:	60fb      	str	r3, [r7, #12]
	mantissa = temp - fraction;
 80017f8:	68f9      	ldr	r1, [r7, #12]
 80017fa:	6938      	ldr	r0, [r7, #16]
 80017fc:	f7ff f98e 	bl	8000b1c <__aeabi_fsub>
 8001800:	4603      	mov	r3, r0
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fb30 	bl	8000e68 <__aeabi_f2uiz>
 8001808:	4603      	mov	r3, r0
 800180a:	61fb      	str	r3, [r7, #28]

	div_fraction = round_off((16 * fraction)); // Function to round off the decimal number
 800180c:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f7fe fcad 	bl	8000170 <__aeabi_fmul>
 8001816:	4603      	mov	r3, r0
 8001818:	4618      	mov	r0, r3
 800181a:	f000 fb07 	bl	8001e2c <round_off>
 800181e:	61b8      	str	r0, [r7, #24]
	if (div_fraction > 15)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	2b0f      	cmp	r3, #15
 8001824:	d904      	bls.n	8001830 <usart_set_baudrate+0x9c>
	{
		div_fraction = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	61bb      	str	r3, [r7, #24]
		mantissa += 1;
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	3301      	adds	r3, #1
 800182e:	61fb      	str	r3, [r7, #28]
	}
	p_usartx->BRR |= (mantissa << 4);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	011b      	lsls	r3, r3, #4
 8001838:	431a      	orrs	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	609a      	str	r2, [r3, #8]
	p_usartx->BRR |= div_fraction;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	609a      	str	r2, [r3, #8]
}
 800184a:	bf00      	nop
 800184c:	3720      	adds	r7, #32
 800184e:	46bd      	mov	sp, r7
 8001850:	bdb0      	pop	{r4, r5, r7, pc}
 8001852:	bf00      	nop
 8001854:	40300000 	.word	0x40300000

08001858 <uart_transmit>:

void uart_transmit(usart_handle *p_usart_handle,uint8_t* p_data, uint8_t len)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	4613      	mov	r3, r2
 8001864:	71fb      	strb	r3, [r7, #7]
	p_usart_handle->tx_buffer = p_data;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	68ba      	ldr	r2, [r7, #8]
 800186a:	615a      	str	r2, [r3, #20]
	p_usart_handle->tx_len = len;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	79fa      	ldrb	r2, [r7, #7]
 8001870:	771a      	strb	r2, [r3, #28]
	usart_write_polling(p_usart_handle);
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f000 f804 	bl	8001880 <usart_write_polling>
}
 8001878:	bf00      	nop
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <usart_write_polling>:
{
	usart_2_handle.tx_buffer = (uint8_t*)&num;
	usart_write_polling(&usart_2_handle);
}
void usart_write_polling(usart_handle *p_usart_handle)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

	//p_usart_handle->tx_buffer = tx_buffer_data;
	//usart_tx_en(p_usart_handle->add_of_usartx);
	//while (*p_usart_handle->tx_buffer != '\0')
	while ((p_usart_handle->tx_len)--)
 8001888:	e03d      	b.n	8001906 <usart_write_polling+0x86>
	{
		// 8 bit data len
		// 9 bit data len
		while ( get_flag_status(p_usart_handle->add_of_usartx,USART_FLAG_TXE) == 0);
 800188a:	bf00      	nop
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2180      	movs	r1, #128	@ 0x80
 8001892:	4618      	mov	r0, r3
 8001894:	f000 f93c 	bl	8001b10 <get_flag_status>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f6      	beq.n	800188c <usart_write_polling+0xc>

		if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_9BITS)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	795b      	ldrb	r3, [r3, #5]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d120      	bne.n	80018e8 <usart_write_polling+0x68>
		{
			// IF Parity DISABLED
			if (p_usart_handle->usart_configuration.parity_control == USART_PARITY_DISABLE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d110      	bne.n	80018d0 <usart_write_polling+0x50>
			{
				//*pData = buffer;
				p_usart_handle->add_of_usartx->DR = (*p_usart_handle->tx_buffer & (uint16_t)0x1FF);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	781a      	ldrb	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
				p_usart_handle->tx_buffer++;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	615a      	str	r2, [r3, #20]
				p_usart_handle->tx_buffer++;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	615a      	str	r2, [r3, #20]
 80018ce:	e01a      	b.n	8001906 <usart_write_polling+0x86>
			}
			// IF Parity ENABLED
			else
			{
				p_usart_handle->add_of_usartx->DR = (*p_usart_handle->tx_buffer & (uint8_t)0xFF);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	781a      	ldrb	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
				p_usart_handle->tx_buffer++;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	1c5a      	adds	r2, r3, #1
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	615a      	str	r2, [r3, #20]
 80018e6:	e00e      	b.n	8001906 <usart_write_polling+0x86>
			}
		}
		else if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_8BITS)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	795b      	ldrb	r3, [r3, #5]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d10a      	bne.n	8001906 <usart_write_polling+0x86>
		{
			//p_usart_handle->add_of_usartx->DR = (*buffer & (uint8_t)0xFF);
			//temp_chara = (*buffer);
			// printable character anyhoe is 7-bits, So it doesnt matter if we handle the parity control.
			p_usart_handle->add_of_usartx->DR = *p_usart_handle->tx_buffer;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	781a      	ldrb	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
			p_usart_handle->tx_buffer++;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	1c5a      	adds	r2, r3, #1
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	615a      	str	r2, [r3, #20]
	while ((p_usart_handle->tx_len)--)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	7f1b      	ldrb	r3, [r3, #28]
 800190a:	1e5a      	subs	r2, r3, #1
 800190c:	b2d1      	uxtb	r1, r2
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	7711      	strb	r1, [r2, #28]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1b9      	bne.n	800188a <usart_write_polling+0xa>



	}
	// Wait till TC Got completed
	while (get_flag_status(p_usart_handle->add_of_usartx,USART_FLAG_TC) != 1);
 8001916:	bf00      	nop
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2140      	movs	r1, #64	@ 0x40
 800191e:	4618      	mov	r0, r3
 8001920:	f000 f8f6 	bl	8001b10 <get_flag_status>
 8001924:	4603      	mov	r3, r0
 8001926:	2b01      	cmp	r3, #1
 8001928:	d1f6      	bne.n	8001918 <usart_write_polling+0x98>
	//usart_tx_di(p_usart_handle->add_of_usartx);
}
 800192a:	bf00      	nop
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <usart_read>:

uint8_t usart_read(usart_handle *p_usart_handle, uint8_t *p_data, uint16_t length,uint32_t timeout)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	4613      	mov	r3, r2
 8001942:	80fb      	strh	r3, [r7, #6]
	uint32_t start = get_systick();
 8001944:	f7ff fe6a 	bl	800161c <get_systick>
 8001948:	6178      	str	r0, [r7, #20]
	while ( ((get_systick() - start) < timeout) && length > 0 )
 800194a:	e04a      	b.n	80019e2 <usart_read+0xae>
	{
		while((get_flag_status(p_usart_handle->add_of_usartx,USART_FLAG_RXNE)))
		{

			if (length-- > 0)
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	1e5a      	subs	r2, r3, #1
 8001950:	80fa      	strh	r2, [r7, #6]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d03c      	beq.n	80019d0 <usart_read+0x9c>
			{
				//print_msg("length:%d",length);
				if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_9BITS)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	795b      	ldrb	r3, [r3, #5]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d11d      	bne.n	800199a <usart_read+0x66>
				{
					if (p_usart_handle->usart_configuration.parity_control == USART_PARITY_DISABLE)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10f      	bne.n	8001986 <usart_read+0x52>
					{
						//*((uint16_t*)(p_usart_handle->rx_buffer)) = ((uint16_t*)(p_usart_handle->add_of_usartx->DR & 0x1FF));
						*((uint16_t*)(p_data)) = (p_usart_handle->add_of_usartx->DR & 0x1FF);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	b29b      	uxth	r3, r3
 800196e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001972:	b29a      	uxth	r2, r3
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	801a      	strh	r2, [r3, #0]
						p_data++;
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	3301      	adds	r3, #1
 800197c:	60bb      	str	r3, [r7, #8]
						p_data++;
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	3301      	adds	r3, #1
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	e024      	b.n	80019d0 <usart_read+0x9c>
					}
					else
					{
						//*(p_usart_handle->rx_buffer) = ((uint8_t*)(p_usart_handle->add_of_usartx->DR & 0xFF));
						*(p_data) = (p_usart_handle->add_of_usartx->DR & 0xFF);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	b2da      	uxtb	r2, r3
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	701a      	strb	r2, [r3, #0]
						p_data++;
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	3301      	adds	r3, #1
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	e01a      	b.n	80019d0 <usart_read+0x9c>
					}
				}
				else if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_8BITS)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	795b      	ldrb	r3, [r3, #5]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d116      	bne.n	80019d0 <usart_read+0x9c>
				{
					if (p_usart_handle->usart_configuration.parity_control == USART_PARITY_DISABLE)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d109      	bne.n	80019be <usart_read+0x8a>
					{
						//*(p_usart_handle->rx_buffer) = ((uint8_t*)(p_usart_handle->add_of_usartx->DR & 0xFF));
						*(p_data) = (p_usart_handle->add_of_usartx->DR & 0xFF);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	701a      	strb	r2, [r3, #0]
						p_data++;
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	3301      	adds	r3, #1
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	e008      	b.n	80019d0 <usart_read+0x9c>
					}
					else
					{
						//*(p_usart_handle->rx_buffer) = ((uint8_t*)(p_usart_handle->add_of_usartx->DR & 0xFF));
						*(p_data) = (p_usart_handle->add_of_usartx->DR & 0xFF);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	701a      	strb	r2, [r3, #0]
						p_data++;
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	3301      	adds	r3, #1
 80019ce:	60bb      	str	r3, [r7, #8]
		while((get_flag_status(p_usart_handle->add_of_usartx,USART_FLAG_RXNE)))
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2120      	movs	r1, #32
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 f89a 	bl	8001b10 <get_flag_status>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1b4      	bne.n	800194c <usart_read+0x18>
	while ( ((get_systick() - start) < timeout) && length > 0 )
 80019e2:	f7ff fe1b 	bl	800161c <get_systick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d902      	bls.n	80019f8 <usart_read+0xc4>
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1eb      	bne.n	80019d0 <usart_read+0x9c>
				}
			}

		}
	}
	if (length == 0)
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <usart_read+0xce>
	{
		return USART_READ_OK;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e001      	b.n	8001a06 <usart_read+0xd2>
	}
	return length;
 8001a02:	88fb      	ldrh	r3, [r7, #6]
 8001a04:	b2db      	uxtb	r3, r3
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <usart_en>:

void usart_en(usartx_regdef_t* p_usartx)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
	p_usartx->CR1 |= (1 << USART_CR1_EN);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	60da      	str	r2, [r3, #12]
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr

08001a2c <config_stop_bit>:

void config_stop_bit(usartx_regdef_t* p_usartx, uint8_t stop_bits)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	70fb      	strb	r3, [r7, #3]
	p_usartx->CR2 &=  ~(STOP_BIT_MASK());
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	611a      	str	r2, [r3, #16]
	p_usartx->CR2 |=  (stop_bits << USART_CR2_STOP_BIT);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691a      	ldr	r2, [r3, #16]
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	031b      	lsls	r3, r3, #12
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	611a      	str	r2, [r3, #16]
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr

08001a5c <config_data_word_len>:

void config_data_word_len(usartx_regdef_t* p_usartx, uint8_t data_word_len)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	70fb      	strb	r3, [r7, #3]
	p_usartx->CR1 |= (data_word_len << USART_CR1_DATA_WORD_LEN);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	78fb      	ldrb	r3, [r7, #3]
 8001a6e:	031b      	lsls	r3, r3, #12
 8001a70:	431a      	orrs	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	60da      	str	r2, [r3, #12]
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <config_parity>:

void config_parity(usartx_regdef_t* p_usartx, uint8_t parity_type)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	70fb      	strb	r3, [r7, #3]
	if (parity_type == USART_PARITY_EN_EVEN)
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d106      	bne.n	8001aa0 <config_parity+0x20>
	{
		p_usartx->CR1 |= (1 << USART_CR1_PARITY_CONTROL_EN); // Enabled the Parity Control, Even Parity Bydefault Selected.
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	60da      	str	r2, [r3, #12]
	}
	else if(parity_type == USART_PARITY_EN_ODD)
	{
		p_usartx->CR1 |= ( (1 << USART_CR1_PARITY_CONTROL_EN) | (1 << USART_CR1_PARITY_SELECT) );
	}
}
 8001a9e:	e008      	b.n	8001ab2 <config_parity+0x32>
	else if(parity_type == USART_PARITY_EN_ODD)
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d105      	bne.n	8001ab2 <config_parity+0x32>
		p_usartx->CR1 |= ( (1 << USART_CR1_PARITY_CONTROL_EN) | (1 << USART_CR1_PARITY_SELECT) );
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	f443 62c0 	orr.w	r2, r3, #1536	@ 0x600
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	60da      	str	r2, [r3, #12]
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <config_mode>:

void config_mode(usartx_regdef_t* p_usartx, uint8_t mode)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	70fb      	strb	r3, [r7, #3]
	switch (mode)
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d014      	beq.n	8001af8 <config_mode+0x3c>
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	dc19      	bgt.n	8001b06 <config_mode+0x4a>
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d002      	beq.n	8001adc <config_mode+0x20>
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d007      	beq.n	8001aea <config_mode+0x2e>
		p_usartx->CR1 |= (1 << USART_CR1_RX_EN);
		break;
	case USART_MODE_TXRX:
		p_usartx->CR1 |= ( (1 << USART_CR1_TX_EN) | (1 << USART_CR1_RX_EN) );
	}
}
 8001ada:	e014      	b.n	8001b06 <config_mode+0x4a>
		p_usartx->CR1 |= (1 << USART_CR1_TX_EN);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	f043 0208 	orr.w	r2, r3, #8
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	60da      	str	r2, [r3, #12]
		break;
 8001ae8:	e00d      	b.n	8001b06 <config_mode+0x4a>
		p_usartx->CR1 |= (1 << USART_CR1_RX_EN);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	f043 0204 	orr.w	r2, r3, #4
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	60da      	str	r2, [r3, #12]
		break;
 8001af6:	e006      	b.n	8001b06 <config_mode+0x4a>
		p_usartx->CR1 |= ( (1 << USART_CR1_TX_EN) | (1 << USART_CR1_RX_EN) );
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	f043 020c 	orr.w	r2, r3, #12
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	60da      	str	r2, [r3, #12]
}
 8001b04:	e7ff      	b.n	8001b06 <config_mode+0x4a>
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr

08001b10 <get_flag_status>:

uint8_t get_flag_status(usartx_regdef_t *p_usartx, uint8_t flag)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	70fb      	strb	r3, [r7, #3]
	if (p_usartx->SR & flag)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	78fb      	ldrb	r3, [r7, #3]
 8001b22:	4013      	ands	r3, r2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <get_flag_status+0x1c>
	{
		return 1;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e000      	b.n	8001b2e <get_flag_status+0x1e>
	}
	else
	{
		return 0;
 8001b2c:	2300      	movs	r3, #0
	}
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <usart_interrupt_handling>:
{
	callback_rx_data = callback;
}

void usart_interrupt_handling(usart_handle *p_usart_handle)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	if (get_flag_status(p_usart_handle->add_of_usartx,USART_FLAG_TC) == 1)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2140      	movs	r1, #64	@ 0x40
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff ffe2 	bl	8001b10 <get_flag_status>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d128      	bne.n	8001ba4 <usart_interrupt_handling+0x6c>
	{
		tc_buffer[tc_buffer_index++] = *(p_usart_handle->tx_buffer);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	695a      	ldr	r2, [r3, #20]
 8001b56:	4b7e      	ldr	r3, [pc, #504]	@ (8001d50 <usart_interrupt_handling+0x218>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	1c59      	adds	r1, r3, #1
 8001b5c:	b2c8      	uxtb	r0, r1
 8001b5e:	497c      	ldr	r1, [pc, #496]	@ (8001d50 <usart_interrupt_handling+0x218>)
 8001b60:	7008      	strb	r0, [r1, #0]
 8001b62:	4619      	mov	r1, r3
 8001b64:	7812      	ldrb	r2, [r2, #0]
 8001b66:	4b7b      	ldr	r3, [pc, #492]	@ (8001d54 <usart_interrupt_handling+0x21c>)
 8001b68:	545a      	strb	r2, [r3, r1]
		if (*(p_usart_handle->tx_buffer) == '\0')
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d117      	bne.n	8001ba4 <usart_interrupt_handling+0x6c>
		{
			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_TXE_INTEERUPT_EN);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b82:	60da      	str	r2, [r3, #12]
			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_TC_INTERRUPT_EN);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b92:	60da      	str	r2, [r3, #12]
			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_TX_EN);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0208 	bic.w	r2, r2, #8
 8001ba2:	60da      	str	r2, [r3, #12]
		}
	}
	if (get_flag_status(p_usart_handle->add_of_usartx,USART_FLAG_TXE) == 1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2180      	movs	r1, #128	@ 0x80
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff ffb0 	bl	8001b10 <get_flag_status>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d158      	bne.n	8001c68 <usart_interrupt_handling+0x130>
	{
		txe_counter++;
 8001bb6:	4b68      	ldr	r3, [pc, #416]	@ (8001d58 <usart_interrupt_handling+0x220>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4b66      	ldr	r3, [pc, #408]	@ (8001d58 <usart_interrupt_handling+0x220>)
 8001bc0:	701a      	strb	r2, [r3, #0]
		txe_buffer[txe_buffer_index++] = *(p_usart_handle->tx_buffer);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	695a      	ldr	r2, [r3, #20]
 8001bc6:	4b65      	ldr	r3, [pc, #404]	@ (8001d5c <usart_interrupt_handling+0x224>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	1c59      	adds	r1, r3, #1
 8001bcc:	b2c8      	uxtb	r0, r1
 8001bce:	4963      	ldr	r1, [pc, #396]	@ (8001d5c <usart_interrupt_handling+0x224>)
 8001bd0:	7008      	strb	r0, [r1, #0]
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	7812      	ldrb	r2, [r2, #0]
 8001bd6:	4b62      	ldr	r3, [pc, #392]	@ (8001d60 <usart_interrupt_handling+0x228>)
 8001bd8:	545a      	strb	r2, [r3, r1]
		if (*(p_usart_handle->tx_buffer) != '\0')
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d039      	beq.n	8001c58 <usart_interrupt_handling+0x120>
		{
			if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_9BITS)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	795b      	ldrb	r3, [r3, #5]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d125      	bne.n	8001c38 <usart_interrupt_handling+0x100>
			{
				// IF Parity DISABLED
				if (p_usart_handle->usart_configuration.parity_control == USART_PARITY_DISABLE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d115      	bne.n	8001c20 <usart_interrupt_handling+0xe8>
				{
					uint16_t *p_data = (uint16_t*)p_usart_handle->tx_buffer;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	60fb      	str	r3, [r7, #12]
					p_usart_handle->add_of_usartx->DR = (*(p_data) & (uint16_t)0x1FF);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c08:	605a      	str	r2, [r3, #4]
					p_usart_handle->tx_buffer++;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	615a      	str	r2, [r3, #20]
					p_usart_handle->tx_buffer++;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	615a      	str	r2, [r3, #20]
 8001c1e:	e023      	b.n	8001c68 <usart_interrupt_handling+0x130>
				}
				// IF Parity ENABLED
				else
				{
					p_usart_handle->add_of_usartx->DR = (*(p_usart_handle->tx_buffer) & (uint8_t)0xFF);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	781a      	ldrb	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
					p_usart_handle->tx_buffer++;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	615a      	str	r2, [r3, #20]
 8001c36:	e017      	b.n	8001c68 <usart_interrupt_handling+0x130>
				}
			}
			else if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_8BITS)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	795b      	ldrb	r3, [r3, #5]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d113      	bne.n	8001c68 <usart_interrupt_handling+0x130>
			{
				p_usart_handle->add_of_usartx->DR = (*p_usart_handle->tx_buffer);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	781a      	ldrb	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
				p_usart_handle->tx_buffer++;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	1c5a      	adds	r2, r3, #1
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	615a      	str	r2, [r3, #20]
 8001c56:	e007      	b.n	8001c68 <usart_interrupt_handling+0x130>
			}
		}
		else
		{
			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_TXE_INTEERUPT_EN);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c66:	60da      	str	r2, [r3, #12]
		}
	}
	if (get_flag_status(p_usart_handle->add_of_usartx,USART_FLAG_RXNE) == 1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2120      	movs	r1, #32
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff ff4e 	bl	8001b10 <get_flag_status>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d166      	bne.n	8001d48 <usart_interrupt_handling+0x210>
	{
		count_interrupt_enterred = count_interrupt_enterred + 1;
 8001c7a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d64 <usart_interrupt_handling+0x22c>)
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	4b38      	ldr	r3, [pc, #224]	@ (8001d64 <usart_interrupt_handling+0x22c>)
 8001c84:	801a      	strh	r2, [r3, #0]

			if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_9BITS)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	795b      	ldrb	r3, [r3, #5]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d125      	bne.n	8001cda <usart_interrupt_handling+0x1a2>
			{
				if (p_usart_handle->usart_configuration.parity_control == USART_PARITY_DISABLE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d114      	bne.n	8001cc0 <usart_interrupt_handling+0x188>
				{
					//*((uint16_t*)(p_usart_handle->rx_buffer)) = ((uint16_t*)(p_usart_handle->add_of_usartx->DR & 0x1FF));
					*((uint16_t*)(p_usart_handle->rx_buffer)) = (p_usart_handle->add_of_usartx->DR & 0x1FF);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ca6:	b292      	uxth	r2, r2
 8001ca8:	801a      	strh	r2, [r3, #0]
					p_usart_handle->rx_buffer++;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	619a      	str	r2, [r3, #24]
					p_usart_handle->rx_buffer++;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	619a      	str	r2, [r3, #24]
 8001cbe:	e033      	b.n	8001d28 <usart_interrupt_handling+0x1f0>
				}
				else
				{
					//*(p_usart_handle->rx_buffer) = ((uint8_t*)(p_usart_handle->add_of_usartx->DR & 0xFF));
					*(p_usart_handle->rx_buffer) = (p_usart_handle->add_of_usartx->DR & 0xFF);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	701a      	strb	r2, [r3, #0]
					p_usart_handle->rx_buffer++;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	619a      	str	r2, [r3, #24]
 8001cd8:	e026      	b.n	8001d28 <usart_interrupt_handling+0x1f0>
				}
			}
			else if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_8BITS)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	795b      	ldrb	r3, [r3, #5]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d122      	bne.n	8001d28 <usart_interrupt_handling+0x1f0>
			{
				if (p_usart_handle->usart_configuration.parity_control == USART_PARITY_DISABLE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d112      	bne.n	8001d10 <usart_interrupt_handling+0x1d8>
				{
					//*(p_usart_handle->rx_buffer) = ((uint8_t*)(p_usart_handle->add_of_usartx->DR & 0xFF));
					*(p_usart_handle->rx_buffer) = (p_usart_handle->add_of_usartx->DR & 0xFF);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	701a      	strb	r2, [r3, #0]
					p_usart_handle->rx_buffer++;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	1c5a      	adds	r2, r3, #1
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	619a      	str	r2, [r3, #24]
					p_usart_handle->rx_len--;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	7f5b      	ldrb	r3, [r3, #29]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	775a      	strb	r2, [r3, #29]
 8001d0e:	e00b      	b.n	8001d28 <usart_interrupt_handling+0x1f0>
				}
				else
				{
					//*(p_usart_handle->rx_buffer) = ((uint8_t*)(p_usart_handle->add_of_usartx->DR & 0xFF));
					*(p_usart_handle->rx_buffer) = (p_usart_handle->add_of_usartx->DR & 0xFF);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	701a      	strb	r2, [r3, #0]
					p_usart_handle->rx_buffer++;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	1c5a      	adds	r2, r3, #1
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	619a      	str	r2, [r3, #24]
				}
			}

			if (p_usart_handle->rx_len == 0)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	7f5b      	ldrb	r3, [r3, #29]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10b      	bne.n	8001d48 <usart_interrupt_handling+0x210>
			{
				p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_RXNE_INTERRUPT_EN);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 0220 	bic.w	r2, r2, #32
 8001d3e:	60da      	str	r2, [r3, #12]
				callback_rx_data(rx_buffer_data);
 8001d40:	4b09      	ldr	r3, [pc, #36]	@ (8001d68 <usart_interrupt_handling+0x230>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4809      	ldr	r0, [pc, #36]	@ (8001d6c <usart_interrupt_handling+0x234>)
 8001d46:	4798      	blx	r3
//		{
//			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_RXNE_INTERRUPT_EN);
//			callback_rx_data(rx_buffer_data);
//		}

}
 8001d48:	bf00      	nop
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	200001e4 	.word	0x200001e4
 8001d54:	20000194 	.word	0x20000194
 8001d58:	2000027e 	.word	0x2000027e
 8001d5c:	20000238 	.word	0x20000238
 8001d60:	200001e8 	.word	0x200001e8
 8001d64:	2000027c 	.word	0x2000027c
 8001d68:	20000280 	.word	0x20000280
 8001d6c:	20000144 	.word	0x20000144

08001d70 <usart_rx_en>:
{
	p_usartx->CR1 |= (1 << USART_CR1_TX_EN);
}

void usart_rx_en(usartx_regdef_t *p_usartx)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	p_usartx->CR1 |= (1 << USART_CR1_RX_EN);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f043 0204 	orr.w	r2, r3, #4
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	60da      	str	r2, [r3, #12]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr
	...

08001d90 <usart_dma_mode_en_di>:
{
	p_usartx->CR1 &= ~(1 << USART_CR1_RX_EN);
}

void usart_dma_mode_en_di(usartx_regdef_t *p_usartx,uint8_t en_di)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	70fb      	strb	r3, [r7, #3]
	switch(en_di){
 8001d9c:	78fb      	ldrb	r3, [r7, #3]
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	d826      	bhi.n	8001df0 <usart_dma_mode_en_di+0x60>
 8001da2:	a201      	add	r2, pc, #4	@ (adr r2, 8001da8 <usart_dma_mode_en_di+0x18>)
 8001da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da8:	08001db9 	.word	0x08001db9
 8001dac:	08001dc7 	.word	0x08001dc7
 8001db0:	08001dd5 	.word	0x08001dd5
 8001db4:	08001de3 	.word	0x08001de3
	case USARTx_DMA_TRANSMITTER_EN:
		p_usartx->CR3 |= USARTx_DMA_TRANSMITTER_EN_POS;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	615a      	str	r2, [r3, #20]
		break;
 8001dc4:	e014      	b.n	8001df0 <usart_dma_mode_en_di+0x60>
	case USARTx_DMA_TRANSMITTER_DI:
		p_usartx->CR3 &= USARTx_DMA_TRANSMITTER_DI_POS;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	615a      	str	r2, [r3, #20]
		break;
 8001dd2:	e00d      	b.n	8001df0 <usart_dma_mode_en_di+0x60>
	case USARTx_DMA_RECEIVER_EN:
		p_usartx->CR3 |= USARTx_DMA_RECEIVER_EN_POS;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	615a      	str	r2, [r3, #20]
		break;
 8001de0:	e006      	b.n	8001df0 <usart_dma_mode_en_di+0x60>
	case USARTx_DMA_RECEIVER_DI:
		p_usartx->CR3 &= USARTx_DMA_RECEIVER_DI_POS;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	615a      	str	r2, [r3, #20]
		break;
 8001dee:	bf00      	nop
	}
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop

08001dfc <USART2_IRQHandler>:
	dma_channel_en(DMA1,7,1);


}
void USART2_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
	usart_interrupt_handling(&usart_2_handle);
 8001e00:	4802      	ldr	r0, [pc, #8]	@ (8001e0c <USART2_IRQHandler+0x10>)
 8001e02:	f7ff fe99 	bl	8001b38 <usart_interrupt_handling>
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2000023c 	.word	0x2000023c

08001e10 <mcu_init>:
 *      Author: Prashant Ajabe
 */
#include "common.h"

void mcu_init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
	clock_init();
 8001e14:	f7ff f848 	bl	8000ea8 <clock_init>
	io_init();
 8001e18:	f7ff fa7e 	bl	8001318 <io_init>

	uart_2_configure_parameter();
 8001e1c:	f7ff fc16 	bl	800164c <uart_2_configure_parameter>
	uart_3_configure_parameter();
 8001e20:	f7ff fc40 	bl	80016a4 <uart_3_configure_parameter>

	systick_init();
 8001e24:	f7ff fbbe 	bl	80015a4 <systick_init>

}
 8001e28:	bf00      	nop
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <round_off>:

uint32_t round_off(float number)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
	float fraction;
	uint8_t carry;
	uint32_t realPart = (int)number;
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7fe fff1 	bl	8000e1c <__aeabi_f2iz>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	613b      	str	r3, [r7, #16]
	fraction = number - (int)number;
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7fe ffec 	bl	8000e1c <__aeabi_f2iz>
 8001e44:	4603      	mov	r3, r0
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe ff1e 	bl	8000c88 <__aeabi_i2f>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	4619      	mov	r1, r3
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7fe fe63 	bl	8000b1c <__aeabi_fsub>
 8001e56:	4603      	mov	r3, r0
 8001e58:	60fb      	str	r3, [r7, #12]
	if (fraction < 0.50)
 8001e5a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f7fe ffb4 	bl	8000dcc <__aeabi_fcmplt>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d002      	beq.n	8001e70 <round_off+0x44>
	{
		carry = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	75fb      	strb	r3, [r7, #23]
 8001e6e:	e009      	b.n	8001e84 <round_off+0x58>
	}
	else if (fraction >= 0.50)
 8001e70:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f7fe ffbd 	bl	8000df4 <__aeabi_fcmpge>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <round_off+0x58>
	{
		carry = 1;
 8001e80:	2301      	movs	r3, #1
 8001e82:	75fb      	strb	r3, [r7, #23]
	}

	return (realPart + (uint32_t)carry);
 8001e84:	7dfa      	ldrb	r2, [r7, #23]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4413      	add	r3, r2
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <delay>:

void delay(uint32_t time_in_ms)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b084      	sub	sp, #16
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
	uint32_t start_tick = get_systick();
 8001e9a:	f7ff fbbf 	bl	800161c <get_systick>
 8001e9e:	60f8      	str	r0, [r7, #12]
	while ((get_systick() - start_tick) <= time_in_ms);
 8001ea0:	bf00      	nop
 8001ea2:	f7ff fbbb 	bl	800161c <get_systick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d2f7      	bcs.n	8001ea2 <delay+0x10>
}
 8001eb2:	bf00      	nop
 8001eb4:	bf00      	nop
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <memory_set>:
	uart_transmit(&usart_3_handle,&str,length);

}

void memory_set(void* ptr,int value, int num)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
	unsigned char* p = (unsigned char*)ptr;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	617b      	str	r3, [r7, #20]
	while(num--)
 8001ecc:	e005      	b.n	8001eda <memory_set+0x1e>
	{
		*p++ = (unsigned int)value;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	617a      	str	r2, [r7, #20]
 8001ed4:	68ba      	ldr	r2, [r7, #8]
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	701a      	strb	r2, [r3, #0]
	while(num--)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	1e5a      	subs	r2, r3, #1
 8001ede:	607a      	str	r2, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1f4      	bne.n	8001ece <memory_set+0x12>
	}

}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	371c      	adds	r7, #28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr

08001ef0 <word_to_byte>:
}

//Converts uint32t_t value to series of bytes.
//if "lowerfirst" is 1 , then LSB is returned first (not used)
uint8_t word_to_byte(uint32_t addr, uint8_t index, uint8_t lowerfirst)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	70fb      	strb	r3, [r7, #3]
 8001efc:	4613      	mov	r3, r2
 8001efe:	70bb      	strb	r3, [r7, #2]
      uint8_t value = (addr >> ( 8 * ( index -1)) & 0x000000FF );
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0c:	73fb      	strb	r3, [r7, #15]
      return value;
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr
	...

08001f1c <flash_sector_erase>:
 * @note  	   from the sector number, base address calculated and then that sector is erased.
 *
 */

uint8_t flash_sector_erase(sector_e sector_no)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	71fb      	strb	r3, [r7, #7]
	uint32_t sector_addr = FLASH_BASEADDR + FLASH_PAGE_SIZE * sector_no;
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8001f2c:	029b      	lsls	r3, r3, #10
 8001f2e:	60fb      	str	r3, [r7, #12]
	if (FLASH->SR & 0x01)
 8001f30:	4b19      	ldr	r3, [pc, #100]	@ (8001f98 <flash_sector_erase+0x7c>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <flash_sector_erase+0x24>
	{
		return FLASH_BUSY;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e027      	b.n	8001f90 <flash_sector_erase+0x74>
	}
	else
	{
		flash_unlock();
 8001f40:	f000 f82c 	bl	8001f9c <flash_unlock>
		FLASH->CR |= (1 << 1); /* Page erase chosen. */
 8001f44:	4b14      	ldr	r3, [pc, #80]	@ (8001f98 <flash_sector_erase+0x7c>)
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	4a13      	ldr	r2, [pc, #76]	@ (8001f98 <flash_sector_erase+0x7c>)
 8001f4a:	f043 0302 	orr.w	r3, r3, #2
 8001f4e:	6113      	str	r3, [r2, #16]
		FLASH->AR = sector_addr; /* address of sector to be erase. */
 8001f50:	4a11      	ldr	r2, [pc, #68]	@ (8001f98 <flash_sector_erase+0x7c>)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6153      	str	r3, [r2, #20]
		FLASH->CR |= (1 << 6); /* start page erase */
 8001f56:	4b10      	ldr	r3, [pc, #64]	@ (8001f98 <flash_sector_erase+0x7c>)
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	4a0f      	ldr	r2, [pc, #60]	@ (8001f98 <flash_sector_erase+0x7c>)
 8001f5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f60:	6113      	str	r3, [r2, #16]
		while (FLASH->SR & 0x01);
 8001f62:	bf00      	nop
 8001f64:	4b0c      	ldr	r3, [pc, #48]	@ (8001f98 <flash_sector_erase+0x7c>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1f9      	bne.n	8001f64 <flash_sector_erase+0x48>
		while(!(FLASH->SR & 0x20));
 8001f70:	bf00      	nop
 8001f72:	4b09      	ldr	r3, [pc, #36]	@ (8001f98 <flash_sector_erase+0x7c>)
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	f003 0320 	and.w	r3, r3, #32
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0f9      	beq.n	8001f72 <flash_sector_erase+0x56>
		FLASH->CR &= ~(1 << 1);
 8001f7e:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <flash_sector_erase+0x7c>)
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	4a05      	ldr	r2, [pc, #20]	@ (8001f98 <flash_sector_erase+0x7c>)
 8001f84:	f023 0302 	bic.w	r3, r3, #2
 8001f88:	6113      	str	r3, [r2, #16]
		flash_lock();
 8001f8a:	f000 f83b 	bl	8002004 <flash_lock>
		return FLASH_ERASE_SUCCESS;
 8001f8e:	2302      	movs	r3, #2
	}
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40022000 	.word	0x40022000

08001f9c <flash_unlock>:
 *
 * @note  	   none
 *
 */
void flash_unlock(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
	FLASH->KEYR = KEY_1;
 8001fa0:	4b04      	ldr	r3, [pc, #16]	@ (8001fb4 <flash_unlock+0x18>)
 8001fa2:	4a05      	ldr	r2, [pc, #20]	@ (8001fb8 <flash_unlock+0x1c>)
 8001fa4:	605a      	str	r2, [r3, #4]
	FLASH->KEYR = KEY_2;
 8001fa6:	4b03      	ldr	r3, [pc, #12]	@ (8001fb4 <flash_unlock+0x18>)
 8001fa8:	4a04      	ldr	r2, [pc, #16]	@ (8001fbc <flash_unlock+0x20>)
 8001faa:	605a      	str	r2, [r3, #4]
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr
 8001fb4:	40022000 	.word	0x40022000
 8001fb8:	45670123 	.word	0x45670123
 8001fbc:	cdef89ab 	.word	0xcdef89ab

08001fc0 <op_byte_unlock>:
 *
 * @note  	   none
 *
 */
void op_byte_unlock(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
	FLASH->OPTKEYR = KEY_1;
 8001fc4:	4b04      	ldr	r3, [pc, #16]	@ (8001fd8 <op_byte_unlock+0x18>)
 8001fc6:	4a05      	ldr	r2, [pc, #20]	@ (8001fdc <op_byte_unlock+0x1c>)
 8001fc8:	609a      	str	r2, [r3, #8]
	FLASH->OPTKEYR = KEY_2;
 8001fca:	4b03      	ldr	r3, [pc, #12]	@ (8001fd8 <op_byte_unlock+0x18>)
 8001fcc:	4a04      	ldr	r2, [pc, #16]	@ (8001fe0 <op_byte_unlock+0x20>)
 8001fce:	609a      	str	r2, [r3, #8]
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr
 8001fd8:	40022000 	.word	0x40022000
 8001fdc:	45670123 	.word	0x45670123
 8001fe0:	cdef89ab 	.word	0xcdef89ab

08001fe4 <is_flash_memory_write_protected>:
 *
 * @note  	   Check for Write Protection register value.
 *
 */
uint8_t is_flash_memory_write_protected(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
	if (FLASH->WRPR == 0)
 8001fe8:	4b05      	ldr	r3, [pc, #20]	@ (8002000 <is_flash_memory_write_protected+0x1c>)
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <is_flash_memory_write_protected+0x10>
		return FLASH_MEMORY_WRITE_PROTECTED;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e000      	b.n	8001ff6 <is_flash_memory_write_protected+0x12>
	else
		return FLASH_MEMORY_NOT_WRITE_PROTECTED;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40022000 	.word	0x40022000

08002004 <flash_lock>:
 *
 * @note  	   none
 *
 */
void flash_lock(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
	FLASH->CR |= (1 << 7);
 8002008:	4b04      	ldr	r3, [pc, #16]	@ (800201c <flash_lock+0x18>)
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	4a03      	ldr	r2, [pc, #12]	@ (800201c <flash_lock+0x18>)
 800200e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002012:	6113      	str	r3, [r2, #16]
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	40022000 	.word	0x40022000

08002020 <flash_mass_erase>:
 *
 * @note  	   none
 *
 */
uint8_t flash_mass_erase(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
	if (FLASH->SR & 0x01)
 8002024:	4b17      	ldr	r3, [pc, #92]	@ (8002084 <flash_mass_erase+0x64>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <flash_mass_erase+0x14>
	{
		return FLASH_BUSY;
 8002030:	2301      	movs	r3, #1
 8002032:	e024      	b.n	800207e <flash_mass_erase+0x5e>
	}
	else
	{
		flash_unlock();
 8002034:	f7ff ffb2 	bl	8001f9c <flash_unlock>
		FLASH->CR |= (1 << 2); /* start page erase */
 8002038:	4b12      	ldr	r3, [pc, #72]	@ (8002084 <flash_mass_erase+0x64>)
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	4a11      	ldr	r2, [pc, #68]	@ (8002084 <flash_mass_erase+0x64>)
 800203e:	f043 0304 	orr.w	r3, r3, #4
 8002042:	6113      	str	r3, [r2, #16]
		FLASH->CR |= (1 << 6); /* start page erase */
 8002044:	4b0f      	ldr	r3, [pc, #60]	@ (8002084 <flash_mass_erase+0x64>)
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	4a0e      	ldr	r2, [pc, #56]	@ (8002084 <flash_mass_erase+0x64>)
 800204a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800204e:	6113      	str	r3, [r2, #16]
		while (FLASH->SR & 0x01);
 8002050:	bf00      	nop
 8002052:	4b0c      	ldr	r3, [pc, #48]	@ (8002084 <flash_mass_erase+0x64>)
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f9      	bne.n	8002052 <flash_mass_erase+0x32>
		while(!(FLASH->SR & 0x20));
 800205e:	bf00      	nop
 8002060:	4b08      	ldr	r3, [pc, #32]	@ (8002084 <flash_mass_erase+0x64>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f003 0320 	and.w	r3, r3, #32
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0f9      	beq.n	8002060 <flash_mass_erase+0x40>
		FLASH->CR &= ~(1 << 1);
 800206c:	4b05      	ldr	r3, [pc, #20]	@ (8002084 <flash_mass_erase+0x64>)
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	4a04      	ldr	r2, [pc, #16]	@ (8002084 <flash_mass_erase+0x64>)
 8002072:	f023 0302 	bic.w	r3, r3, #2
 8002076:	6113      	str	r3, [r2, #16]
		flash_lock();
 8002078:	f7ff ffc4 	bl	8002004 <flash_lock>
		return FLASH_ERASE_SUCCESS;
 800207c:	2302      	movs	r3, #2

	}
}
 800207e:	4618      	mov	r0, r3
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40022000 	.word	0x40022000

08002088 <flash_mem_write>:
 *
 * @note  	   none
 *
 */
uint8_t flash_mem_write(uint16_t data, uint32_t address)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	6039      	str	r1, [r7, #0]
 8002092:	80fb      	strh	r3, [r7, #6]
	uint16_t* temp_addr = (uint16_t*)address; // Forced for 16-bit address
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	60fb      	str	r3, [r7, #12]
	uint16_t temp_var = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	817b      	strh	r3, [r7, #10]
	if (FLASH->SR & 0x01) // check of busy
 800209c:	4b1c      	ldr	r3, [pc, #112]	@ (8002110 <flash_mem_write+0x88>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <flash_mem_write+0x24>
	{
		return FLASH_BUSY;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e02d      	b.n	8002108 <flash_mem_write+0x80>
	}
	else
	{
		flash_unlock();
 80020ac:	f7ff ff76 	bl	8001f9c <flash_unlock>
		FLASH->CR |= (1 << 0); // Set PG bit
 80020b0:	4b17      	ldr	r3, [pc, #92]	@ (8002110 <flash_mem_write+0x88>)
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	4a16      	ldr	r2, [pc, #88]	@ (8002110 <flash_mem_write+0x88>)
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	6113      	str	r3, [r2, #16]
		*temp_addr = data; // write data to address.
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	88fa      	ldrh	r2, [r7, #6]
 80020c0:	801a      	strh	r2, [r3, #0]
		while (FLASH->SR & 0x01); // waite for busy flag to get clear.
 80020c2:	bf00      	nop
 80020c4:	4b12      	ldr	r3, [pc, #72]	@ (8002110 <flash_mem_write+0x88>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1f9      	bne.n	80020c4 <flash_mem_write+0x3c>
		if (FLASH->SR & (1 << 5)) // check for EOP.
 80020d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002110 <flash_mem_write+0x88>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f003 0320 	and.w	r3, r3, #32
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d005      	beq.n	80020e8 <flash_mem_write+0x60>
		{
			FLASH->SR |= (1 << 5);
 80020dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002110 <flash_mem_write+0x88>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002110 <flash_mem_write+0x88>)
 80020e2:	f043 0320 	orr.w	r3, r3, #32
 80020e6:	60d3      	str	r3, [r2, #12]
		}
		FLASH->CR &= ~(1 << 0); // Reset PG bit.
 80020e8:	4b09      	ldr	r3, [pc, #36]	@ (8002110 <flash_mem_write+0x88>)
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	4a08      	ldr	r2, [pc, #32]	@ (8002110 <flash_mem_write+0x88>)
 80020ee:	f023 0301 	bic.w	r3, r3, #1
 80020f2:	6113      	str	r3, [r2, #16]
		flash_lock();
 80020f4:	f7ff ff86 	bl	8002004 <flash_lock>
		if (data == *temp_addr)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	88fa      	ldrh	r2, [r7, #6]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d101      	bne.n	8002106 <flash_mem_write+0x7e>
		{
			return WRITE_SUCCESS;
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <flash_mem_write+0x80>
		}
		else
		{
			return WRITE_FAILED;
 8002106:	2300      	movs	r3, #0
		}
	}
}
 8002108:	4618      	mov	r0, r3
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40022000 	.word	0x40022000

08002114 <option_byte_read>:
 *
 * @note  	   read the information at option byte address.
 *
 */
void option_byte_read(void)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
	uint32_t* op_byte_base_addr = (uint32_t*)OP_BYTE_BASE_ADDR;
 800211a:	4b0c      	ldr	r3, [pc, #48]	@ (800214c <option_byte_read+0x38>)
 800211c:	607b      	str	r3, [r7, #4]
	for (uint8_t i = 0; i < 4;i++)
 800211e:	2300      	movs	r3, #0
 8002120:	70fb      	strb	r3, [r7, #3]
 8002122:	e00a      	b.n	800213a <option_byte_read+0x26>
	{
		option_byte_info[i] = *op_byte_base_addr++;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	1d1a      	adds	r2, r3, #4
 8002128:	607a      	str	r2, [r7, #4]
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4908      	ldr	r1, [pc, #32]	@ (8002150 <option_byte_read+0x3c>)
 8002130:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	for (uint8_t i = 0; i < 4;i++)
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	3301      	adds	r3, #1
 8002138:	70fb      	strb	r3, [r7, #3]
 800213a:	78fb      	ldrb	r3, [r7, #3]
 800213c:	2b03      	cmp	r3, #3
 800213e:	d9f1      	bls.n	8002124 <option_byte_read+0x10>
	}
}
 8002140:	bf00      	nop
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr
 800214c:	1ffff800 	.word	0x1ffff800
 8002150:	20000284 	.word	0x20000284

08002154 <option_byte_erase>:
 *
 * @note  	   none.
 *
 */
uint8_t option_byte_erase(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
	uint32_t* op_addr = OP_BYTE_BASE_ADDR;
 800215a:	4b26      	ldr	r3, [pc, #152]	@ (80021f4 <option_byte_erase+0xa0>)
 800215c:	607b      	str	r3, [r7, #4]
	if (FLASH->SR & 0x01) // check of busy
 800215e:	4b26      	ldr	r3, [pc, #152]	@ (80021f8 <option_byte_erase+0xa4>)
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <option_byte_erase+0x1a>
	{
		return FLASH_BUSY;
 800216a:	2301      	movs	r3, #1
 800216c:	e03d      	b.n	80021ea <option_byte_erase+0x96>
	}
	else
	{
		flash_unlock();
 800216e:	f7ff ff15 	bl	8001f9c <flash_unlock>
		op_byte_unlock();
 8002172:	f7ff ff25 	bl	8001fc0 <op_byte_unlock>
		FLASH->CR |= (1 << 5); // set OPTER
 8002176:	4b20      	ldr	r3, [pc, #128]	@ (80021f8 <option_byte_erase+0xa4>)
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	4a1f      	ldr	r2, [pc, #124]	@ (80021f8 <option_byte_erase+0xa4>)
 800217c:	f043 0320 	orr.w	r3, r3, #32
 8002180:	6113      	str	r3, [r2, #16]
		FLASH->CR |= (1 << 6); // start erase
 8002182:	4b1d      	ldr	r3, [pc, #116]	@ (80021f8 <option_byte_erase+0xa4>)
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	4a1c      	ldr	r2, [pc, #112]	@ (80021f8 <option_byte_erase+0xa4>)
 8002188:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800218c:	6113      	str	r3, [r2, #16]
		while (FLASH->SR & 0x01); // waite for busy flag to get clear.
 800218e:	bf00      	nop
 8002190:	4b19      	ldr	r3, [pc, #100]	@ (80021f8 <option_byte_erase+0xa4>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1f9      	bne.n	8002190 <option_byte_erase+0x3c>
		FLASH->CR &= ~(1 << 5);
 800219c:	4b16      	ldr	r3, [pc, #88]	@ (80021f8 <option_byte_erase+0xa4>)
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	4a15      	ldr	r2, [pc, #84]	@ (80021f8 <option_byte_erase+0xa4>)
 80021a2:	f023 0320 	bic.w	r3, r3, #32
 80021a6:	6113      	str	r3, [r2, #16]
		if (FLASH->SR & 0x20)
 80021a8:	4b13      	ldr	r3, [pc, #76]	@ (80021f8 <option_byte_erase+0xa4>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f003 0320 	and.w	r3, r3, #32
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <option_byte_erase+0x6c>
		{
			FLASH->SR |= (1 << 5);
 80021b4:	4b10      	ldr	r3, [pc, #64]	@ (80021f8 <option_byte_erase+0xa4>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	4a0f      	ldr	r2, [pc, #60]	@ (80021f8 <option_byte_erase+0xa4>)
 80021ba:	f043 0320 	orr.w	r3, r3, #32
 80021be:	60d3      	str	r3, [r2, #12]
		}
		flash_lock();
 80021c0:	f7ff ff20 	bl	8002004 <flash_lock>
		for (uint8_t i = 0; i < 4;i++)
 80021c4:	2300      	movs	r3, #0
 80021c6:	70fb      	strb	r3, [r7, #3]
 80021c8:	e00b      	b.n	80021e2 <option_byte_erase+0x8e>
		{
			if (*op_addr++ != 0xFFFFFFFF)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	1d1a      	adds	r2, r3, #4
 80021ce:	607a      	str	r2, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d6:	d001      	beq.n	80021dc <option_byte_erase+0x88>
			{

				return OP_BYTE_ERASE_FAILED;
 80021d8:	2301      	movs	r3, #1
 80021da:	e006      	b.n	80021ea <option_byte_erase+0x96>
		for (uint8_t i = 0; i < 4;i++)
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	3301      	adds	r3, #1
 80021e0:	70fb      	strb	r3, [r7, #3]
 80021e2:	78fb      	ldrb	r3, [r7, #3]
 80021e4:	2b03      	cmp	r3, #3
 80021e6:	d9f0      	bls.n	80021ca <option_byte_erase+0x76>
			}
		}
		return OP_BYTE_ERASE_SUCCESS;
 80021e8:	2300      	movs	r3, #0
	}
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	1ffff800 	.word	0x1ffff800
 80021f8:	40022000 	.word	0x40022000

080021fc <option_byte_write>:
 *
 * @note  	   all the information filled in option byte address along with the desired address.
 *
 */
void option_byte_write(uint32_t base_addr,uint8_t* p_data)
{
 80021fc:	b590      	push	{r4, r7, lr}
 80021fe:	b087      	sub	sp, #28
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
	uint16_t* op_addr = (uint16_t*)OP_BYTE_BASE_ADDR;
 8002206:	4b51      	ldr	r3, [pc, #324]	@ (800234c <option_byte_write+0x150>)
 8002208:	617b      	str	r3, [r7, #20]
	uint32_t* p_data_temp = (uint32_t*)p_data;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	60fb      	str	r3, [r7, #12]
	uint16_t temp_16_bit_storage = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	817b      	strh	r3, [r7, #10]
	uint8_t address_index = (base_addr & 0xFF) / 4;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	b2db      	uxtb	r3, r3
 8002216:	089b      	lsrs	r3, r3, #2
 8002218:	727b      	strb	r3, [r7, #9]

	if (FLASH->SR & 0x01) // check of busy
 800221a:	4b4d      	ldr	r3, [pc, #308]	@ (8002350 <option_byte_write+0x154>)
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	f040 808d 	bne.w	8002342 <option_byte_write+0x146>
	{
		return FLASH_BUSY;
	}
	else
	{
		flash_unlock();
 8002228:	f7ff feb8 	bl	8001f9c <flash_unlock>
		op_byte_unlock();
 800222c:	f7ff fec8 	bl	8001fc0 <op_byte_unlock>
		FLASH->CR |= (1 << 4); // set OPTPG
 8002230:	4b47      	ldr	r3, [pc, #284]	@ (8002350 <option_byte_write+0x154>)
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	4a46      	ldr	r2, [pc, #280]	@ (8002350 <option_byte_write+0x154>)
 8002236:	f043 0310 	orr.w	r3, r3, #16
 800223a:	6113      	str	r3, [r2, #16]
		for (uint8_t i = 0; i < 4; i++)
 800223c:	2300      	movs	r3, #0
 800223e:	74fb      	strb	r3, [r7, #19]
 8002240:	e07b      	b.n	800233a <option_byte_write+0x13e>
		{
			if (address_index != i)
 8002242:	7a7a      	ldrb	r2, [r7, #9]
 8002244:	7cfb      	ldrb	r3, [r7, #19]
 8002246:	429a      	cmp	r2, r3
 8002248:	d03e      	beq.n	80022c8 <option_byte_write+0xcc>
			{
				temp_16_bit_storage = (word_to_byte(option_byte_info[i],2,1) << 8) | (word_to_byte(option_byte_info[i],1,1));
 800224a:	7cfb      	ldrb	r3, [r7, #19]
 800224c:	4a41      	ldr	r2, [pc, #260]	@ (8002354 <option_byte_write+0x158>)
 800224e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002252:	2201      	movs	r2, #1
 8002254:	2102      	movs	r1, #2
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff fe4a 	bl	8001ef0 <word_to_byte>
 800225c:	4603      	mov	r3, r0
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	b21c      	sxth	r4, r3
 8002262:	7cfb      	ldrb	r3, [r7, #19]
 8002264:	4a3b      	ldr	r2, [pc, #236]	@ (8002354 <option_byte_write+0x158>)
 8002266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800226a:	2201      	movs	r2, #1
 800226c:	2101      	movs	r1, #1
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fe3e 	bl	8001ef0 <word_to_byte>
 8002274:	4603      	mov	r3, r0
 8002276:	b21b      	sxth	r3, r3
 8002278:	4323      	orrs	r3, r4
 800227a:	b21b      	sxth	r3, r3
 800227c:	817b      	strh	r3, [r7, #10]
				*op_addr++ = temp_16_bit_storage;
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	1c9a      	adds	r2, r3, #2
 8002282:	617a      	str	r2, [r7, #20]
 8002284:	897a      	ldrh	r2, [r7, #10]
 8002286:	801a      	strh	r2, [r3, #0]
				temp_16_bit_storage = (word_to_byte(option_byte_info[i],4,1) << 8) | (word_to_byte(option_byte_info[i],3,1));
 8002288:	7cfb      	ldrb	r3, [r7, #19]
 800228a:	4a32      	ldr	r2, [pc, #200]	@ (8002354 <option_byte_write+0x158>)
 800228c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002290:	2201      	movs	r2, #1
 8002292:	2104      	movs	r1, #4
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff fe2b 	bl	8001ef0 <word_to_byte>
 800229a:	4603      	mov	r3, r0
 800229c:	021b      	lsls	r3, r3, #8
 800229e:	b21c      	sxth	r4, r3
 80022a0:	7cfb      	ldrb	r3, [r7, #19]
 80022a2:	4a2c      	ldr	r2, [pc, #176]	@ (8002354 <option_byte_write+0x158>)
 80022a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a8:	2201      	movs	r2, #1
 80022aa:	2103      	movs	r1, #3
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff fe1f 	bl	8001ef0 <word_to_byte>
 80022b2:	4603      	mov	r3, r0
 80022b4:	b21b      	sxth	r3, r3
 80022b6:	4323      	orrs	r3, r4
 80022b8:	b21b      	sxth	r3, r3
 80022ba:	817b      	strh	r3, [r7, #10]
				*op_addr++ = temp_16_bit_storage;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	1c9a      	adds	r2, r3, #2
 80022c0:	617a      	str	r2, [r7, #20]
 80022c2:	897a      	ldrh	r2, [r7, #10]
 80022c4:	801a      	strh	r2, [r3, #0]
 80022c6:	e035      	b.n	8002334 <option_byte_write+0x138>
			}
			else
			{
				temp_16_bit_storage = (word_to_byte(*p_data_temp,2,1) << 8) | (word_to_byte(*p_data_temp,1,1));
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2201      	movs	r2, #1
 80022ce:	2102      	movs	r1, #2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fe0d 	bl	8001ef0 <word_to_byte>
 80022d6:	4603      	mov	r3, r0
 80022d8:	021b      	lsls	r3, r3, #8
 80022da:	b21c      	sxth	r4, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2201      	movs	r2, #1
 80022e2:	2101      	movs	r1, #1
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff fe03 	bl	8001ef0 <word_to_byte>
 80022ea:	4603      	mov	r3, r0
 80022ec:	b21b      	sxth	r3, r3
 80022ee:	4323      	orrs	r3, r4
 80022f0:	b21b      	sxth	r3, r3
 80022f2:	817b      	strh	r3, [r7, #10]
				*op_addr++ = temp_16_bit_storage;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	1c9a      	adds	r2, r3, #2
 80022f8:	617a      	str	r2, [r7, #20]
 80022fa:	897a      	ldrh	r2, [r7, #10]
 80022fc:	801a      	strh	r2, [r3, #0]
				temp_16_bit_storage = (word_to_byte(*p_data_temp,4,1) << 8) | (word_to_byte(*p_data_temp,3,1));
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2201      	movs	r2, #1
 8002304:	2104      	movs	r1, #4
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fdf2 	bl	8001ef0 <word_to_byte>
 800230c:	4603      	mov	r3, r0
 800230e:	021b      	lsls	r3, r3, #8
 8002310:	b21c      	sxth	r4, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2201      	movs	r2, #1
 8002318:	2103      	movs	r1, #3
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fde8 	bl	8001ef0 <word_to_byte>
 8002320:	4603      	mov	r3, r0
 8002322:	b21b      	sxth	r3, r3
 8002324:	4323      	orrs	r3, r4
 8002326:	b21b      	sxth	r3, r3
 8002328:	817b      	strh	r3, [r7, #10]
				*op_addr++ = temp_16_bit_storage;
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	1c9a      	adds	r2, r3, #2
 800232e:	617a      	str	r2, [r7, #20]
 8002330:	897a      	ldrh	r2, [r7, #10]
 8002332:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 0; i < 4; i++)
 8002334:	7cfb      	ldrb	r3, [r7, #19]
 8002336:	3301      	adds	r3, #1
 8002338:	74fb      	strb	r3, [r7, #19]
 800233a:	7cfb      	ldrb	r3, [r7, #19]
 800233c:	2b03      	cmp	r3, #3
 800233e:	d980      	bls.n	8002242 <option_byte_write+0x46>
 8002340:	e000      	b.n	8002344 <option_byte_write+0x148>
		return FLASH_BUSY;
 8002342:	bf00      	nop
			}
		}
	}
}
 8002344:	371c      	adds	r7, #28
 8002346:	46bd      	mov	sp, r7
 8002348:	bd90      	pop	{r4, r7, pc}
 800234a:	bf00      	nop
 800234c:	1ffff800 	.word	0x1ffff800
 8002350:	40022000 	.word	0x40022000
 8002354:	20000284 	.word	0x20000284

08002358 <jump_to_user_app>:
 * @note  None
 *
 */

void jump_to_user_app(uint32_t user_app_base_address)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
	uint32_t msp_value;

	// function pointer for Reset handler.
	void(*app_reset_handler)(void);

	msp_value = *(volatile uint32_t*)user_app_base_address;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	617b      	str	r3, [r7, #20]

	set_msp(msp_value);
 8002366:	6978      	ldr	r0, [r7, #20]
 8002368:	f000 f812 	bl	8002390 <set_msp>

	reset_handler_addr = *(volatile uint32_t*)(user_app_base_address + 4);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3304      	adds	r3, #4
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	613b      	str	r3, [r7, #16]

	// Assign the reset handler address to function pointer.
	app_reset_handler = (void(*)(void))reset_handler_addr;
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	60fb      	str	r3, [r7, #12]

	// assign vector table base address.
	SCB->VTOR = user_app_base_address;
 8002378:	4a04      	ldr	r2, [pc, #16]	@ (800238c <jump_to_user_app+0x34>)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6093      	str	r3, [r2, #8]

	// call reset handler.
	app_reset_handler();
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	4798      	blx	r3
}
 8002382:	bf00      	nop
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <set_msp>:
 *
 * @note  none
 *
 */
void set_msp(uint32_t msp_value)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	__asm volatile("MSR msp,%0"::"r"(msp_value));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f383 8808 	msr	MSP, r3
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr

080023a8 <bl_read_uart_data>:
 *
 * @note  none
 *
 */
void bl_read_uart_data(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
	while(1)
	{
		// clear buffer.
		memory_set(buffer,0,BUFF_SIZE);
 80023ac:	22c8      	movs	r2, #200	@ 0xc8
 80023ae:	2100      	movs	r1, #0
 80023b0:	481c      	ldr	r0, [pc, #112]	@ (8002424 <bl_read_uart_data+0x7c>)
 80023b2:	f7ff fd83 	bl	8001ebc <memory_set>

		// Read for command.
		usart_read(&usart_2_handle,&buffer[0],2,1000);
 80023b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023ba:	2202      	movs	r2, #2
 80023bc:	4919      	ldr	r1, [pc, #100]	@ (8002424 <bl_read_uart_data+0x7c>)
 80023be:	481a      	ldr	r0, [pc, #104]	@ (8002428 <bl_read_uart_data+0x80>)
 80023c0:	f7ff fab8 	bl	8001934 <usart_read>

		switch(buffer[0])
 80023c4:	4b17      	ldr	r3, [pc, #92]	@ (8002424 <bl_read_uart_data+0x7c>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b43      	cmp	r3, #67	@ 0x43
 80023ca:	d022      	beq.n	8002412 <bl_read_uart_data+0x6a>
 80023cc:	2b43      	cmp	r3, #67	@ 0x43
 80023ce:	dced      	bgt.n	80023ac <bl_read_uart_data+0x4>
 80023d0:	2b31      	cmp	r3, #49	@ 0x31
 80023d2:	d022      	beq.n	800241a <bl_read_uart_data+0x72>
 80023d4:	2b31      	cmp	r3, #49	@ 0x31
 80023d6:	dce9      	bgt.n	80023ac <bl_read_uart_data+0x4>
 80023d8:	2b21      	cmp	r3, #33	@ 0x21
 80023da:	d016      	beq.n	800240a <bl_read_uart_data+0x62>
 80023dc:	2b21      	cmp	r3, #33	@ 0x21
 80023de:	dce5      	bgt.n	80023ac <bl_read_uart_data+0x4>
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d00e      	beq.n	8002402 <bl_read_uart_data+0x5a>
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	dce1      	bgt.n	80023ac <bl_read_uart_data+0x4>
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d002      	beq.n	80023f2 <bl_read_uart_data+0x4a>
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d004      	beq.n	80023fa <bl_read_uart_data+0x52>
 80023f0:	e017      	b.n	8002422 <bl_read_uart_data+0x7a>
		{
			case BL_GET:
				bl_get(buffer);
 80023f2:	480c      	ldr	r0, [pc, #48]	@ (8002424 <bl_read_uart_data+0x7c>)
 80023f4:	f000 f9f6 	bl	80027e4 <bl_get>
				break;
 80023f8:	e013      	b.n	8002422 <bl_read_uart_data+0x7a>
			case BL_GET_VER:
				bl_get_ver_cmd(buffer);
 80023fa:	480a      	ldr	r0, [pc, #40]	@ (8002424 <bl_read_uart_data+0x7c>)
 80023fc:	f000 f9cc 	bl	8002798 <bl_get_ver_cmd>
				break;
 8002400:	e00f      	b.n	8002422 <bl_read_uart_data+0x7a>
			case BL_GET_CID:
				bl_get_cid_cmd(buffer);
 8002402:	4808      	ldr	r0, [pc, #32]	@ (8002424 <bl_read_uart_data+0x7c>)
 8002404:	f000 fa24 	bl	8002850 <bl_get_cid_cmd>
				break;
 8002408:	e00b      	b.n	8002422 <bl_read_uart_data+0x7a>
			case BL_GO_TO_ADDR:
				bl_go_to_addr(buffer);
 800240a:	4806      	ldr	r0, [pc, #24]	@ (8002424 <bl_read_uart_data+0x7c>)
 800240c:	f000 fa56 	bl	80028bc <bl_go_to_addr>
				break;
 8002410:	e007      	b.n	8002422 <bl_read_uart_data+0x7a>
			case BL_FLASH_ERASE:
				bl_flash_erase(buffer);
 8002412:	4804      	ldr	r0, [pc, #16]	@ (8002424 <bl_read_uart_data+0x7c>)
 8002414:	f000 fa9a 	bl	800294c <bl_flash_erase>
				break;
 8002418:	e003      	b.n	8002422 <bl_read_uart_data+0x7a>
			case BL_FLASH_MEM_WRITE:
				bl_mem_write(buffer);
 800241a:	4802      	ldr	r0, [pc, #8]	@ (8002424 <bl_read_uart_data+0x7c>)
 800241c:	f000 f8de 	bl	80025dc <bl_mem_write>
				break;
 8002420:	bf00      	nop
		memory_set(buffer,0,BUFF_SIZE);
 8002422:	e7c3      	b.n	80023ac <bl_read_uart_data+0x4>
 8002424:	20000298 	.word	0x20000298
 8002428:	2000023c 	.word	0x2000023c

0800242c <execute_flash_mem_write>:
 *
 * @note  	status of the flash write.
 *
 */
uint8_t execute_flash_mem_write(uint8_t* buffer,uint32_t base_addr,uint32_t payload_len)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
	uint16_t temp_var = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	82fb      	strh	r3, [r7, #22]
	uint8_t return_value = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	757b      	strb	r3, [r7, #21]

	// logic to extract 2 bytes of payload as flash write is of half-word size.
	for(uint32_t i = 0; i < payload_len; i += 2)
 8002440:	2300      	movs	r3, #0
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	e02a      	b.n	800249c <execute_flash_mem_write+0x70>
	{
		if (i + 1 < payload_len)
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	3301      	adds	r3, #1
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	429a      	cmp	r2, r3
 800244e:	d90f      	bls.n	8002470 <execute_flash_mem_write+0x44>
		{
			temp_var = buffer[i] | (buffer[i + 1] << 8);
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	4413      	add	r3, r2
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	b21a      	sxth	r2, r3
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	3301      	adds	r3, #1
 800245e:	68f9      	ldr	r1, [r7, #12]
 8002460:	440b      	add	r3, r1
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	021b      	lsls	r3, r3, #8
 8002466:	b21b      	sxth	r3, r3
 8002468:	4313      	orrs	r3, r2
 800246a:	b21b      	sxth	r3, r3
 800246c:	82fb      	strh	r3, [r7, #22]
 800246e:	e008      	b.n	8002482 <execute_flash_mem_write+0x56>
		}
		else
		{
			temp_var = buffer[i] | (0xFF << 8);
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4413      	add	r3, r2
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	b21b      	sxth	r3, r3
 800247a:	f063 03ff 	orn	r3, r3, #255	@ 0xff
 800247e:	b21b      	sxth	r3, r3
 8002480:	82fb      	strh	r3, [r7, #22]
		}

		// write to flash
		return_value = flash_mem_write(temp_var,base_addr + i);
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	441a      	add	r2, r3
 8002488:	8afb      	ldrh	r3, [r7, #22]
 800248a:	4611      	mov	r1, r2
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fdfb 	bl	8002088 <flash_mem_write>
 8002492:	4603      	mov	r3, r0
 8002494:	757b      	strb	r3, [r7, #21]
	for(uint32_t i = 0; i < payload_len; i += 2)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	3302      	adds	r3, #2
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d3d0      	bcc.n	8002446 <execute_flash_mem_write+0x1a>
	}
	return return_value;
 80024a4:	7d7b      	ldrb	r3, [r7, #21]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <execute_ram_mem_write>:
 *
 * @note  	status of the write.
 *
 */
uint8_t execute_ram_mem_write(uint8_t* buffer,uint32_t base_addr,uint32_t payload_len)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b087      	sub	sp, #28
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	60f8      	str	r0, [r7, #12]
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	607a      	str	r2, [r7, #4]
	uint32_t* p_base_addr = (uint32_t*)base_addr;
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	617b      	str	r3, [r7, #20]

	// write to the base address
	*p_base_addr = *(uint32_t*)buffer;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	601a      	str	r2, [r3, #0]

	// read and cross check write
	if (*p_base_addr == *(uint32_t*)buffer)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d101      	bne.n	80024d6 <execute_ram_mem_write+0x28>
	{
		return WRITE_SUCCESS;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <execute_ram_mem_write+0x2a>
	}
	else
	{
		return WRITE_FAILED;
 80024d6:	2300      	movs	r3, #0
	}
}
 80024d8:	4618      	mov	r0, r3
 80024da:	371c      	adds	r7, #28
 80024dc:	46bd      	mov	sp, r7
 80024de:	bc80      	pop	{r7}
 80024e0:	4770      	bx	lr

080024e2 <execute_option_byte_write>:
 * @note  	none
 *
 */

void execute_option_byte_write(uint8_t* buffer,uint32_t base_addr)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	6039      	str	r1, [r7, #0]
	// store the current option byte data.
	option_byte_read();
 80024ec:	f7ff fe12 	bl	8002114 <option_byte_read>

	//Erase the option byte.
	option_byte_erase();
 80024f0:	f7ff fe30 	bl	8002154 <option_byte_erase>

	// write the option byte
	option_byte_write(base_addr,buffer);
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	6838      	ldr	r0, [r7, #0]
 80024f8:	f7ff fe80 	bl	80021fc <option_byte_write>

	// reset the system to take effect of the new option byte
	system_reset();
 80024fc:	f7ff f898 	bl	8001630 <system_reset>
}
 8002500:	bf00      	nop
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <is_valid_cmd>:
 *
 * @note  	none
 *
 */
uint8_t is_valid_cmd(uint8_t* rec_cmd)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	if (rec_cmd == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <is_valid_cmd+0x12>
		return INVALID_CMD;
 8002516:	2300      	movs	r3, #0
 8002518:	e00b      	b.n	8002532 <is_valid_cmd+0x2a>

	if( (rec_cmd[0] ^ rec_cmd[1]) == 0xFF)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	781a      	ldrb	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3301      	adds	r3, #1
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	4053      	eors	r3, r2
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2bff      	cmp	r3, #255	@ 0xff
 800252a:	d101      	bne.n	8002530 <is_valid_cmd+0x28>
	{
		return VALID_CMD;
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <is_valid_cmd+0x2a>
	}

	return INVALID_CMD;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <is_protection_active>:
 *
 * @note  	none
 *
 */
uint8_t is_protection_active(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
	return is_flash_memory_write_protected();
 8002540:	f7ff fd50 	bl	8001fe4 <is_flash_memory_write_protected>
 8002544:	4603      	mov	r3, r0
}
 8002546:	4618      	mov	r0, r3
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <is_supported_memory>:
 *
 * @note  	Memory will be supported only if input memory address is in the range
 *
 */
uint8_t is_supported_memory(uint32_t base_addr)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
	if (base_addr >= USER_APP_FLASH_BASE_ADDR && base_addr <= FLASH_END_ADDR)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a0f      	ldr	r2, [pc, #60]	@ (8002594 <is_supported_memory+0x48>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d308      	bcc.n	800256e <is_supported_memory+0x22>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a0e      	ldr	r2, [pc, #56]	@ (8002598 <is_supported_memory+0x4c>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d804      	bhi.n	800256e <is_supported_memory+0x22>
	{
		flag_flash_memory = 1;
 8002564:	4b0d      	ldr	r3, [pc, #52]	@ (800259c <is_supported_memory+0x50>)
 8002566:	2201      	movs	r2, #1
 8002568:	701a      	strb	r2, [r3, #0]
		return MEMORY_SUPPORTED;
 800256a:	2301      	movs	r3, #1
 800256c:	e00d      	b.n	800258a <is_supported_memory+0x3e>
	}
	else if (base_addr >= USER_APP_RAM_BASE_ADDR && base_addr <= RAM_END_ADDRESS)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a0b      	ldr	r2, [pc, #44]	@ (80025a0 <is_supported_memory+0x54>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d308      	bcc.n	8002588 <is_supported_memory+0x3c>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a0a      	ldr	r2, [pc, #40]	@ (80025a4 <is_supported_memory+0x58>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d804      	bhi.n	8002588 <is_supported_memory+0x3c>
	{
		flag_ram_memory = 1;
 800257e:	4b0a      	ldr	r3, [pc, #40]	@ (80025a8 <is_supported_memory+0x5c>)
 8002580:	2201      	movs	r2, #1
 8002582:	701a      	strb	r2, [r3, #0]
		return MEMORY_SUPPORTED;
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <is_supported_memory+0x3e>
	}
	else
	{
		return MEMORY_NOT_SUPPORTED;
 8002588:	2300      	movs	r3, #0
	}
}
 800258a:	4618      	mov	r0, r3
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr
 8002594:	08004000 	.word	0x08004000
 8002598:	0801ffff 	.word	0x0801ffff
 800259c:	20000294 	.word	0x20000294
 80025a0:	20001400 	.word	0x20001400
 80025a4:	20005000 	.word	0x20005000
 80025a8:	20000295 	.word	0x20000295

080025ac <is_option_byte_address>:
 * @note  	NONE
 *
 */

uint8_t is_option_byte_address(uint32_t base_addr)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
	if (base_addr >= OP_BYTE_BASE_ADDR && base_addr <= OP_BYTE_WRP_2_3_REG_ADDR)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a07      	ldr	r2, [pc, #28]	@ (80025d4 <is_option_byte_address+0x28>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d905      	bls.n	80025c8 <is_option_byte_address+0x1c>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a06      	ldr	r2, [pc, #24]	@ (80025d8 <is_option_byte_address+0x2c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d801      	bhi.n	80025c8 <is_option_byte_address+0x1c>
		return OPTION_BYTE_ADDRESS;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e000      	b.n	80025ca <is_option_byte_address+0x1e>
	else
		return NOT_OPTION_BYTE_ADDRESS;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr
 80025d4:	1ffff7ff 	.word	0x1ffff7ff
 80025d8:	1ffff80c 	.word	0x1ffff80c

080025dc <bl_mem_write>:
 * @note  	NONE
 *
 */

bl_status_t bl_mem_write(uint8_t* buffer)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
	uint32_t base_addr;
	uint8_t payload_len;

	// Step1: validate the command
	if (buffer == NULL || !is_valid_cmd(&buffer[0]))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d005      	beq.n	80025f6 <bl_mem_write+0x1a>
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff ff8c 	bl	8002508 <is_valid_cmd>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <bl_mem_write+0x1e>
		return BL_INVALID_CMD;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e099      	b.n	800272e <bl_mem_write+0x152>

	// Step2: Check if protection active or not.
	if (is_protection_active())
 80025fa:	f7ff ff9f 	bl	800253c <is_protection_active>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <bl_mem_write+0x2c>
		return BL_PROTECTED_MEMORY;
 8002604:	2302      	movs	r3, #2
 8002606:	e092      	b.n	800272e <bl_mem_write+0x152>

	bl_send_ack(1);
 8002608:	2001      	movs	r0, #1
 800260a:	f000 f9f7 	bl	80029fc <bl_send_ack>

	// Step3: read base address
	if (usart_read(&usart_2_handle,&buffer[0],5,1000) != USART_READ_OK)
 800260e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002612:	2205      	movs	r2, #5
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	4848      	ldr	r0, [pc, #288]	@ (8002738 <bl_mem_write+0x15c>)
 8002618:	f7ff f98c 	bl	8001934 <usart_read>
 800261c:	4603      	mov	r3, r0
 800261e:	2b01      	cmp	r3, #1
 8002620:	d001      	beq.n	8002626 <bl_mem_write+0x4a>
		return BL_ERROR_RX;
 8002622:	2304      	movs	r3, #4
 8002624:	e083      	b.n	800272e <bl_mem_write+0x152>

	// Step4: verify checksum
	base_addr = *( (uint32_t*)&buffer[0]);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	60fb      	str	r3, [r7, #12]
	if (!bl_verify_checksum(&buffer[0],5))
 800262c:	2105      	movs	r1, #5
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f888 	bl	8002744 <bl_verify_checksum>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d103      	bne.n	8002642 <bl_mem_write+0x66>
	{
		bl_send_nack();
 800263a:	f000 f9f5 	bl	8002a28 <bl_send_nack>
		return BL_CHECKSUM_FAILED;
 800263e:	2303      	movs	r3, #3
 8002640:	e075      	b.n	800272e <bl_mem_write+0x152>
	}
	bl_send_ack(1);
 8002642:	2001      	movs	r0, #1
 8002644:	f000 f9da 	bl	80029fc <bl_send_ack>

	// Step5: Read Payload length

	if (usart_read(&usart_2_handle,&buffer[0],1,1000) != USART_READ_OK)
 8002648:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800264c:	2201      	movs	r2, #1
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4839      	ldr	r0, [pc, #228]	@ (8002738 <bl_mem_write+0x15c>)
 8002652:	f7ff f96f 	bl	8001934 <usart_read>
 8002656:	4603      	mov	r3, r0
 8002658:	2b01      	cmp	r3, #1
 800265a:	d001      	beq.n	8002660 <bl_mem_write+0x84>
		return BL_ERROR_RX;
 800265c:	2304      	movs	r3, #4
 800265e:	e066      	b.n	800272e <bl_mem_write+0x152>

	payload_len = buffer[0] + 1;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	3301      	adds	r3, #1
 8002666:	72fb      	strb	r3, [r7, #11]

	// Step6: Read Payload
	if (usart_read(&usart_2_handle,&buffer[0],payload_len + 1,1000) != USART_READ_OK)
 8002668:	7afb      	ldrb	r3, [r7, #11]
 800266a:	b29b      	uxth	r3, r3
 800266c:	3301      	adds	r3, #1
 800266e:	b29a      	uxth	r2, r3
 8002670:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	4830      	ldr	r0, [pc, #192]	@ (8002738 <bl_mem_write+0x15c>)
 8002678:	f7ff f95c 	bl	8001934 <usart_read>
 800267c:	4603      	mov	r3, r0
 800267e:	2b01      	cmp	r3, #1
 8002680:	d001      	beq.n	8002686 <bl_mem_write+0xaa>
		return BL_ERROR_RX;
 8002682:	2304      	movs	r3, #4
 8002684:	e053      	b.n	800272e <bl_mem_write+0x152>

	// Step7: verify the payload checksum
	if (!bl_verify_checksum(&buffer[0],payload_len + 1))
 8002686:	7afb      	ldrb	r3, [r7, #11]
 8002688:	3301      	adds	r3, #1
 800268a:	b2db      	uxtb	r3, r3
 800268c:	4619      	mov	r1, r3
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f858 	bl	8002744 <bl_verify_checksum>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d103      	bne.n	80026a2 <bl_mem_write+0xc6>
	{
		bl_send_nack();
 800269a:	f000 f9c5 	bl	8002a28 <bl_send_nack>
		return BL_CHECKSUM_FAILED;
 800269e:	2303      	movs	r3, #3
 80026a0:	e045      	b.n	800272e <bl_mem_write+0x152>
	}

	//step8: check if it is supported memory or option byte.
	if (is_supported_memory(base_addr))
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f7ff ff52 	bl	800254c <is_supported_memory>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d02f      	beq.n	800270e <bl_mem_write+0x132>
	{
		if (flag_flash_memory)
 80026ae:	4b23      	ldr	r3, [pc, #140]	@ (800273c <bl_mem_write+0x160>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d013      	beq.n	80026de <bl_mem_write+0x102>
		{
			flag_flash_memory = 0;
 80026b6:	4b21      	ldr	r3, [pc, #132]	@ (800273c <bl_mem_write+0x160>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	701a      	strb	r2, [r3, #0]
			if (execute_flash_mem_write(&(buffer[0]),base_addr,payload_len) == WRITE_SUCCESS)
 80026bc:	7afb      	ldrb	r3, [r7, #11]
 80026be:	461a      	mov	r2, r3
 80026c0:	68f9      	ldr	r1, [r7, #12]
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7ff feb2 	bl	800242c <execute_flash_mem_write>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d103      	bne.n	80026d6 <bl_mem_write+0xfa>
			{
				bl_send_ack(1);
 80026ce:	2001      	movs	r0, #1
 80026d0:	f000 f994 	bl	80029fc <bl_send_ack>
 80026d4:	e02a      	b.n	800272c <bl_mem_write+0x150>
			}
			else
			{
				bl_send_nack();
 80026d6:	f000 f9a7 	bl	8002a28 <bl_send_nack>
				return BL_FLASH_WRITE_FAILED;
 80026da:	2306      	movs	r3, #6
 80026dc:	e027      	b.n	800272e <bl_mem_write+0x152>
			}
		}
		else if (flag_ram_memory)
 80026de:	4b18      	ldr	r3, [pc, #96]	@ (8002740 <bl_mem_write+0x164>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d022      	beq.n	800272c <bl_mem_write+0x150>
		{
			flag_ram_memory = 0;
 80026e6:	4b16      	ldr	r3, [pc, #88]	@ (8002740 <bl_mem_write+0x164>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
			if (execute_ram_mem_write(&(buffer[0]),base_addr,payload_len) == WRITE_SUCCESS)
 80026ec:	7afb      	ldrb	r3, [r7, #11]
 80026ee:	461a      	mov	r2, r3
 80026f0:	68f9      	ldr	r1, [r7, #12]
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff fedb 	bl	80024ae <execute_ram_mem_write>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d103      	bne.n	8002706 <bl_mem_write+0x12a>
			{
				bl_send_ack(1);
 80026fe:	2001      	movs	r0, #1
 8002700:	f000 f97c 	bl	80029fc <bl_send_ack>
 8002704:	e012      	b.n	800272c <bl_mem_write+0x150>
			}
			else
			{
				bl_send_nack();
 8002706:	f000 f98f 	bl	8002a28 <bl_send_nack>
				return BL_RAM_WRITE_FAILED;
 800270a:	2307      	movs	r3, #7
 800270c:	e00f      	b.n	800272e <bl_mem_write+0x152>
			}
		}
	}
	else if (is_option_byte_address(base_addr))
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f7ff ff4c 	bl	80025ac <is_option_byte_address>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d004      	beq.n	8002724 <bl_mem_write+0x148>
	{
		execute_option_byte_write(&(buffer[0]),base_addr);
 800271a:	68f9      	ldr	r1, [r7, #12]
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f7ff fee0 	bl	80024e2 <execute_option_byte_write>
 8002722:	e003      	b.n	800272c <bl_mem_write+0x150>
	}
	else
	{
		bl_send_nack();
 8002724:	f000 f980 	bl	8002a28 <bl_send_nack>
		return BL_MEMORY_NOT_SUPPORTED;
 8002728:	2308      	movs	r3, #8
 800272a:	e000      	b.n	800272e <bl_mem_write+0x152>
	}
	return BL_OK;
 800272c:	2300      	movs	r3, #0

}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	2000023c 	.word	0x2000023c
 800273c:	20000294 	.word	0x20000294
 8002740:	20000295 	.word	0x20000295

08002744 <bl_verify_checksum>:
 *
 * @note  XOR checckusm logic is used.
 *
 */
bl_status_t bl_verify_checksum(uint8_t* buffer,uint8_t len)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	70fb      	strb	r3, [r7, #3]
	uint8_t checksum = 0;
 8002750:	2300      	movs	r3, #0
 8002752:	73fb      	strb	r3, [r7, #15]

	// verify input
	if (buffer == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <bl_verify_checksum+0x1a>
		return NULL_POINTER;
 800275a:	2302      	movs	r3, #2
 800275c:	e016      	b.n	800278c <bl_verify_checksum+0x48>

	for (uint8_t i = 0; i < len;i++)
 800275e:	2300      	movs	r3, #0
 8002760:	73bb      	strb	r3, [r7, #14]
 8002762:	e009      	b.n	8002778 <bl_verify_checksum+0x34>
	{
		checksum ^= buffer[i];
 8002764:	7bbb      	ldrb	r3, [r7, #14]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	4413      	add	r3, r2
 800276a:	781a      	ldrb	r2, [r3, #0]
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	4053      	eors	r3, r2
 8002770:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < len;i++)
 8002772:	7bbb      	ldrb	r3, [r7, #14]
 8002774:	3301      	adds	r3, #1
 8002776:	73bb      	strb	r3, [r7, #14]
 8002778:	7bba      	ldrb	r2, [r7, #14]
 800277a:	78fb      	ldrb	r3, [r7, #3]
 800277c:	429a      	cmp	r2, r3
 800277e:	d3f1      	bcc.n	8002764 <bl_verify_checksum+0x20>
	}

	if (checksum == 0)
 8002780:	7bfb      	ldrb	r3, [r7, #15]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <bl_verify_checksum+0x46>
	{
		return CHECKSUM_MATCHED;
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <bl_verify_checksum+0x48>
	}
	else
	{
		return CHECKSUM_NOT_MATCHED;
 800278a:	2300      	movs	r3, #0
	}
}
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
	...

08002798 <bl_get_ver_cmd>:
 * @note This implementation sends two ACKs: one after command validation
 *       and one after sending the payload, it is as per AN3155 application note.
 *
 */
bl_status_t bl_get_ver_cmd(uint8_t* buffer)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
	uint8_t bl_version = BL_VERSION;
 80027a0:	2360      	movs	r3, #96	@ 0x60
 80027a2:	73fb      	strb	r3, [r7, #15]

	if (buffer == NULL || !is_valid_cmd(&buffer[0]))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d005      	beq.n	80027b6 <bl_get_ver_cmd+0x1e>
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff feac 	bl	8002508 <is_valid_cmd>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <bl_get_ver_cmd+0x22>
		return BL_INVALID_CMD;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e00d      	b.n	80027d6 <bl_get_ver_cmd+0x3e>

	bl_send_ack(1);
 80027ba:	2001      	movs	r0, #1
 80027bc:	f000 f91e 	bl	80029fc <bl_send_ack>

	// send the bl version
	uart_transmit(&usart_2_handle,&bl_version,1);
 80027c0:	f107 030f 	add.w	r3, r7, #15
 80027c4:	2201      	movs	r2, #1
 80027c6:	4619      	mov	r1, r3
 80027c8:	4805      	ldr	r0, [pc, #20]	@ (80027e0 <bl_get_ver_cmd+0x48>)
 80027ca:	f7ff f845 	bl	8001858 <uart_transmit>

	bl_send_ack(1);
 80027ce:	2001      	movs	r0, #1
 80027d0:	f000 f914 	bl	80029fc <bl_send_ack>

	return BL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	2000023c 	.word	0x2000023c

080027e4 <bl_get>:
 * @note This implementation sends two ACKs: one after command validation
 *       and one after sending the payload, it is as per AN3155 application note.
 *
 */
bl_status_t bl_get(uint8_t* buffer)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
	uint8_t cmd_count =(uint8_t) (sizeof(supported_cmd)/sizeof(supported_cmd[0]));
 80027ec:	2307      	movs	r3, #7
 80027ee:	73fb      	strb	r3, [r7, #15]
	uint8_t bl_version = BL_VERSION;
 80027f0:	2360      	movs	r3, #96	@ 0x60
 80027f2:	73bb      	strb	r3, [r7, #14]

	if (buffer == NULL || !is_valid_cmd(&buffer[0]))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d005      	beq.n	8002806 <bl_get+0x22>
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff fe84 	bl	8002508 <is_valid_cmd>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <bl_get+0x26>
		return BL_INVALID_CMD;
 8002806:	2301      	movs	r3, #1
 8002808:	e01a      	b.n	8002840 <bl_get+0x5c>

	bl_send_ack(1);
 800280a:	2001      	movs	r0, #1
 800280c:	f000 f8f6 	bl	80029fc <bl_send_ack>

	// send number of bytes
	uart_transmit(&usart_2_handle,&cmd_count,1);
 8002810:	f107 030f 	add.w	r3, r7, #15
 8002814:	2201      	movs	r2, #1
 8002816:	4619      	mov	r1, r3
 8002818:	480b      	ldr	r0, [pc, #44]	@ (8002848 <bl_get+0x64>)
 800281a:	f7ff f81d 	bl	8001858 <uart_transmit>

	// send version
	uart_transmit(&usart_2_handle,&bl_version,1);
 800281e:	f107 030e 	add.w	r3, r7, #14
 8002822:	2201      	movs	r2, #1
 8002824:	4619      	mov	r1, r3
 8002826:	4808      	ldr	r0, [pc, #32]	@ (8002848 <bl_get+0x64>)
 8002828:	f7ff f816 	bl	8001858 <uart_transmit>

	// send supported commands
	uart_transmit(&usart_2_handle,supported_cmd,cmd_count);
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	461a      	mov	r2, r3
 8002830:	4906      	ldr	r1, [pc, #24]	@ (800284c <bl_get+0x68>)
 8002832:	4805      	ldr	r0, [pc, #20]	@ (8002848 <bl_get+0x64>)
 8002834:	f7ff f810 	bl	8001858 <uart_transmit>

	bl_send_ack(1);
 8002838:	2001      	movs	r0, #1
 800283a:	f000 f8df 	bl	80029fc <bl_send_ack>

	return BL_OK;
 800283e:	2300      	movs	r3, #0

}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	2000023c 	.word	0x2000023c
 800284c:	200000c4 	.word	0x200000c4

08002850 <bl_get_cid_cmd>:
 * @note This implementation sends two ACKs: one after command validation
 *       and one after sending the payload, it is as per AN3155 application note.
 *
 */
bl_status_t bl_get_cid_cmd(uint8_t* buffer)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
	uint16_t id = DBGMCU_IDCODE & 0xFFF;
 8002858:	4b16      	ldr	r3, [pc, #88]	@ (80028b4 <bl_get_cid_cmd+0x64>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	b29b      	uxth	r3, r3
 800285e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002862:	b29b      	uxth	r3, r3
 8002864:	81fb      	strh	r3, [r7, #14]
	uint8_t length = 1;
 8002866:	2301      	movs	r3, #1
 8002868:	737b      	strb	r3, [r7, #13]

	if (buffer == NULL || !is_valid_cmd(&buffer[0]))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <bl_get_cid_cmd+0x2c>
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff fe49 	bl	8002508 <is_valid_cmd>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <bl_get_cid_cmd+0x30>
		return BL_INVALID_CMD;
 800287c:	2301      	movs	r3, #1
 800287e:	e014      	b.n	80028aa <bl_get_cid_cmd+0x5a>

	bl_send_ack(1);
 8002880:	2001      	movs	r0, #1
 8002882:	f000 f8bb 	bl	80029fc <bl_send_ack>

	// Send the number of bytes - 1.
	uart_transmit(&usart_2_handle,(uint8_t*)&length,1);
 8002886:	f107 030d 	add.w	r3, r7, #13
 800288a:	2201      	movs	r2, #1
 800288c:	4619      	mov	r1, r3
 800288e:	480a      	ldr	r0, [pc, #40]	@ (80028b8 <bl_get_cid_cmd+0x68>)
 8002890:	f7fe ffe2 	bl	8001858 <uart_transmit>

	// Send chip-ID
	uart_transmit(&usart_2_handle,(uint8_t*)&id,2); // send id.
 8002894:	f107 030e 	add.w	r3, r7, #14
 8002898:	2202      	movs	r2, #2
 800289a:	4619      	mov	r1, r3
 800289c:	4806      	ldr	r0, [pc, #24]	@ (80028b8 <bl_get_cid_cmd+0x68>)
 800289e:	f7fe ffdb 	bl	8001858 <uart_transmit>

	bl_send_ack(1);
 80028a2:	2001      	movs	r0, #1
 80028a4:	f000 f8aa 	bl	80029fc <bl_send_ack>

	return BL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	e0042000 	.word	0xe0042000
 80028b8:	2000023c 	.word	0x2000023c

080028bc <bl_go_to_addr>:
 * @note This implementation jumps to address after verifying whether it is valid address or not.
 *
 */

bl_status_t bl_go_to_addr(uint8_t* buffer)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
	uint32_t base_addr = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60fb      	str	r3, [r7, #12]

	// Check for NULL pointer and valid command.
	if (buffer == NULL || !is_valid_cmd(&buffer[0]))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d005      	beq.n	80028da <bl_go_to_addr+0x1e>
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff fe1a 	bl	8002508 <is_valid_cmd>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <bl_go_to_addr+0x22>
		return BL_INVALID_CMD;
 80028da:	2301      	movs	r3, #1
 80028dc:	e030      	b.n	8002940 <bl_go_to_addr+0x84>

	// Check for protection.
	if (is_protection_active())
 80028de:	f7ff fe2d 	bl	800253c <is_protection_active>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <bl_go_to_addr+0x30>
		return BL_PROTECTED_MEMORY;
 80028e8:	2302      	movs	r3, #2
 80028ea:	e029      	b.n	8002940 <bl_go_to_addr+0x84>

	bl_send_ack(1);
 80028ec:	2001      	movs	r0, #1
 80028ee:	f000 f885 	bl	80029fc <bl_send_ack>

	// Read Address.
	if (usart_read(&usart_2_handle,&buffer[0],5,1000) != USART_READ_OK)
 80028f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028f6:	2205      	movs	r2, #5
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	4813      	ldr	r0, [pc, #76]	@ (8002948 <bl_go_to_addr+0x8c>)
 80028fc:	f7ff f81a 	bl	8001934 <usart_read>
 8002900:	4603      	mov	r3, r0
 8002902:	2b01      	cmp	r3, #1
 8002904:	d001      	beq.n	800290a <bl_go_to_addr+0x4e>
		return BL_ERROR_RX;
 8002906:	2304      	movs	r3, #4
 8002908:	e01a      	b.n	8002940 <bl_go_to_addr+0x84>

	// verify checksum
	base_addr = *( (uint32_t*)&buffer[0]);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	60fb      	str	r3, [r7, #12]
	if (bl_verify_checksum(&buffer[0],5) && is_supported_memory(base_addr))
 8002910:	2105      	movs	r1, #5
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff ff16 	bl	8002744 <bl_verify_checksum>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00d      	beq.n	800293a <bl_go_to_addr+0x7e>
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f7ff fe14 	bl	800254c <is_supported_memory>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d007      	beq.n	800293a <bl_go_to_addr+0x7e>
	{
		bl_send_ack(1);
 800292a:	2001      	movs	r0, #1
 800292c:	f000 f866 	bl	80029fc <bl_send_ack>
		jump_to_user_app(base_addr);
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f7ff fd11 	bl	8002358 <jump_to_user_app>
	{
		bl_send_nack();
		return BL_CHECKSUM_FAILED;
	}

	return BL_OK;
 8002936:	2300      	movs	r3, #0
 8002938:	e002      	b.n	8002940 <bl_go_to_addr+0x84>
		bl_send_nack();
 800293a:	f000 f875 	bl	8002a28 <bl_send_nack>
		return BL_CHECKSUM_FAILED;
 800293e:	2303      	movs	r3, #3
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	2000023c 	.word	0x2000023c

0800294c <bl_flash_erase>:
 *
 * @note This implementation erase the either entire flash or number of pages from base page number.
 *
 */
bl_status_t bl_flash_erase(uint8_t* buffer)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
	uint8_t pages_to_erase,base_page_number;

	// Check for NULL pointer and valid command.
	if (buffer == NULL || !is_valid_cmd(&buffer[0]))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d005      	beq.n	8002966 <bl_flash_erase+0x1a>
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff fdd4 	bl	8002508 <is_valid_cmd>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <bl_flash_erase+0x1e>
		return BL_INVALID_CMD;
 8002966:	2301      	movs	r3, #1
 8002968:	e042      	b.n	80029f0 <bl_flash_erase+0xa4>

	// Check for protection.
	if (is_protection_active())
 800296a:	f7ff fde7 	bl	800253c <is_protection_active>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <bl_flash_erase+0x2c>
		return BL_PROTECTED_MEMORY;
 8002974:	2302      	movs	r3, #2
 8002976:	e03b      	b.n	80029f0 <bl_flash_erase+0xa4>

	bl_send_ack(1);
 8002978:	2001      	movs	r0, #1
 800297a:	f000 f83f 	bl	80029fc <bl_send_ack>

	// Read the base number of pages to erase, base page number and checksum.
	if (usart_read(&usart_2_handle,&buffer[0],3,1000) != USART_READ_OK)
 800297e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002982:	2203      	movs	r2, #3
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	481c      	ldr	r0, [pc, #112]	@ (80029f8 <bl_flash_erase+0xac>)
 8002988:	f7fe ffd4 	bl	8001934 <usart_read>
 800298c:	4603      	mov	r3, r0
 800298e:	2b01      	cmp	r3, #1
 8002990:	d001      	beq.n	8002996 <bl_flash_erase+0x4a>
		return BL_ERROR_RX;
 8002992:	2304      	movs	r3, #4
 8002994:	e02c      	b.n	80029f0 <bl_flash_erase+0xa4>

	// Mass Erase condition.
	if (buffer[0] == 0xFF)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2bff      	cmp	r3, #255	@ 0xff
 800299c:	d102      	bne.n	80029a4 <bl_flash_erase+0x58>
	{
		flash_mass_erase();
 800299e:	f7ff fb3f 	bl	8002020 <flash_mass_erase>
 80029a2:	e021      	b.n	80029e8 <bl_flash_erase+0x9c>
	}
	else
	{
		pages_to_erase = buffer[0];
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	73bb      	strb	r3, [r7, #14]
		base_page_number = buffer[1];
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	785b      	ldrb	r3, [r3, #1]
 80029ae:	737b      	strb	r3, [r7, #13]
		// Verify checksum
		if (!bl_verify_checksum(&buffer[0],3))
 80029b0:	2103      	movs	r1, #3
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff fec6 	bl	8002744 <bl_verify_checksum>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d103      	bne.n	80029c6 <bl_flash_erase+0x7a>
		{
			bl_send_nack();
 80029be:	f000 f833 	bl	8002a28 <bl_send_nack>
			return BL_CHECKSUM_FAILED;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e014      	b.n	80029f0 <bl_flash_erase+0xa4>
		}

		for (uint8_t i = 0;i < pages_to_erase;i++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	73fb      	strb	r3, [r7, #15]
 80029ca:	e009      	b.n	80029e0 <bl_flash_erase+0x94>
		{
			flash_sector_erase(base_page_number + i);
 80029cc:	7b7a      	ldrb	r2, [r7, #13]
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	4413      	add	r3, r2
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff faa1 	bl	8001f1c <flash_sector_erase>
		for (uint8_t i = 0;i < pages_to_erase;i++)
 80029da:	7bfb      	ldrb	r3, [r7, #15]
 80029dc:	3301      	adds	r3, #1
 80029de:	73fb      	strb	r3, [r7, #15]
 80029e0:	7bfa      	ldrb	r2, [r7, #15]
 80029e2:	7bbb      	ldrb	r3, [r7, #14]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d3f1      	bcc.n	80029cc <bl_flash_erase+0x80>
		}

	}

	bl_send_ack(1);
 80029e8:	2001      	movs	r0, #1
 80029ea:	f000 f807 	bl	80029fc <bl_send_ack>

	return BL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	2000023c 	.word	0x2000023c

080029fc <bl_send_ack>:
 *
 * @note This implementation transmit the ACK. length paramter is there for compatibility with earlier BL version.
 *
 */
void bl_send_ack(uint32_t length)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
	uint8_t temp_arr[2];
	temp_arr[0] = BL_ACK;
 8002a04:	2379      	movs	r3, #121	@ 0x79
 8002a06:	733b      	strb	r3, [r7, #12]
	temp_arr[1] = (uint8_t)length;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	737b      	strb	r3, [r7, #13]
	uart_transmit(&usart_2_handle,&temp_arr[0],1);
 8002a0e:	f107 030c 	add.w	r3, r7, #12
 8002a12:	2201      	movs	r2, #1
 8002a14:	4619      	mov	r1, r3
 8002a16:	4803      	ldr	r0, [pc, #12]	@ (8002a24 <bl_send_ack+0x28>)
 8002a18:	f7fe ff1e 	bl	8001858 <uart_transmit>
}
 8002a1c:	bf00      	nop
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	2000023c 	.word	0x2000023c

08002a28 <bl_send_nack>:
 *
 * @note This implementation transmit the NACK.
 *
 */
void bl_send_nack(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
	uint8_t temp_var = BL_NACK;
 8002a2e:	231f      	movs	r3, #31
 8002a30:	71fb      	strb	r3, [r7, #7]
	uart_transmit(&usart_2_handle,&temp_var,1);
 8002a32:	1dfb      	adds	r3, r7, #7
 8002a34:	2201      	movs	r2, #1
 8002a36:	4619      	mov	r1, r3
 8002a38:	4803      	ldr	r0, [pc, #12]	@ (8002a48 <bl_send_nack+0x20>)
 8002a3a:	f7fe ff0d 	bl	8001858 <uart_transmit>
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	2000023c 	.word	0x2000023c

08002a4c <main>:



void set_msp(uint32_t msp_value);
int main(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0

	mcu_init();
 8002a52:	f7ff f9dd 	bl	8001e10 <mcu_init>

	/* Loop forever */
	while(1)
	{
		if (io_get_in(PUSH_BUTTON) == GPIO_PIN_RESET)
 8002a56:	2010      	movs	r0, #16
 8002a58:	f7fe fd5a 	bl	8001510 <io_get_in>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d105      	bne.n	8002a6e <main+0x22>
		{
			bl_read_uart_data();
 8002a62:	f7ff fca1 	bl	80023a8 <bl_read_uart_data>
			delay(100);
 8002a66:	2064      	movs	r0, #100	@ 0x64
 8002a68:	f7ff fa13 	bl	8001e92 <delay>
 8002a6c:	e7f3      	b.n	8002a56 <main+0xa>
		}
		else
		{
			uint32_t user_app_address = (uint32_t)USER_APP_FLASH_BASE_ADDR;
 8002a6e:	4b03      	ldr	r3, [pc, #12]	@ (8002a7c <main+0x30>)
 8002a70:	607b      	str	r3, [r7, #4]
			jump_to_user_app(user_app_address);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7ff fc70 	bl	8002358 <jump_to_user_app>
		if (io_get_in(PUSH_BUTTON) == GPIO_PIN_RESET)
 8002a78:	e7ed      	b.n	8002a56 <main+0xa>
 8002a7a:	bf00      	nop
 8002a7c:	08004000 	.word	0x08004000

08002a80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a80:	480d      	ldr	r0, [pc, #52]	@ (8002ab8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a82:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a84:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a88:	480c      	ldr	r0, [pc, #48]	@ (8002abc <LoopForever+0x6>)
  ldr r1, =_edata
 8002a8a:	490d      	ldr	r1, [pc, #52]	@ (8002ac0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ac4 <LoopForever+0xe>)
  movs r3, #0
 8002a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a90:	e002      	b.n	8002a98 <LoopCopyDataInit>

08002a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a96:	3304      	adds	r3, #4

08002a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a9c:	d3f9      	bcc.n	8002a92 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ac8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002aa0:	4c0a      	ldr	r4, [pc, #40]	@ (8002acc <LoopForever+0x16>)
  movs r3, #0
 8002aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002aa4:	e001      	b.n	8002aaa <LoopFillZerobss>

08002aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002aa8:	3204      	adds	r2, #4

08002aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aac:	d3fb      	bcc.n	8002aa6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002aae:	f000 f811 	bl	8002ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ab2:	f7ff ffcb 	bl	8002a4c <main>

08002ab6 <LoopForever>:

LoopForever:
  b LoopForever
 8002ab6:	e7fe      	b.n	8002ab6 <LoopForever>
  ldr   r0, =_estack
 8002ab8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ac0:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8002ac4:	08002b3c 	.word	0x08002b3c
  ldr r2, =_sbss
 8002ac8:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8002acc:	20000360 	.word	0x20000360

08002ad0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ad0:	e7fe      	b.n	8002ad0 <ADC1_2_IRQHandler>
	...

08002ad4 <__libc_init_array>:
 8002ad4:	b570      	push	{r4, r5, r6, lr}
 8002ad6:	2600      	movs	r6, #0
 8002ad8:	4d0c      	ldr	r5, [pc, #48]	@ (8002b0c <__libc_init_array+0x38>)
 8002ada:	4c0d      	ldr	r4, [pc, #52]	@ (8002b10 <__libc_init_array+0x3c>)
 8002adc:	1b64      	subs	r4, r4, r5
 8002ade:	10a4      	asrs	r4, r4, #2
 8002ae0:	42a6      	cmp	r6, r4
 8002ae2:	d109      	bne.n	8002af8 <__libc_init_array+0x24>
 8002ae4:	f000 f81a 	bl	8002b1c <_init>
 8002ae8:	2600      	movs	r6, #0
 8002aea:	4d0a      	ldr	r5, [pc, #40]	@ (8002b14 <__libc_init_array+0x40>)
 8002aec:	4c0a      	ldr	r4, [pc, #40]	@ (8002b18 <__libc_init_array+0x44>)
 8002aee:	1b64      	subs	r4, r4, r5
 8002af0:	10a4      	asrs	r4, r4, #2
 8002af2:	42a6      	cmp	r6, r4
 8002af4:	d105      	bne.n	8002b02 <__libc_init_array+0x2e>
 8002af6:	bd70      	pop	{r4, r5, r6, pc}
 8002af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002afc:	4798      	blx	r3
 8002afe:	3601      	adds	r6, #1
 8002b00:	e7ee      	b.n	8002ae0 <__libc_init_array+0xc>
 8002b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b06:	4798      	blx	r3
 8002b08:	3601      	adds	r6, #1
 8002b0a:	e7f2      	b.n	8002af2 <__libc_init_array+0x1e>
 8002b0c:	08002b34 	.word	0x08002b34
 8002b10:	08002b34 	.word	0x08002b34
 8002b14:	08002b34 	.word	0x08002b34
 8002b18:	08002b38 	.word	0x08002b38

08002b1c <_init>:
 8002b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1e:	bf00      	nop
 8002b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b22:	bc08      	pop	{r3}
 8002b24:	469e      	mov	lr, r3
 8002b26:	4770      	bx	lr

08002b28 <_fini>:
 8002b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b2a:	bf00      	nop
 8002b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b2e:	bc08      	pop	{r3}
 8002b30:	469e      	mov	lr, r3
 8002b32:	4770      	bx	lr
